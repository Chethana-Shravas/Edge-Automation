


Const nCol=16384
'Public ObjXlApp1,ObjXlApp2 
Public XlWb1,XlWb2,ExcelClose,FilePath,STPSheetName,strFileName,strAliasName
Public objExcelSTP,objQCws,objQCwb

' We will have objExcel - Excel instance for Run.xlsx, [*QC_Template*].xlsx
' We will have objExcelSTP - Excel instace which EDGE Client will open
' We will have objRunXls - Excel Workbook instance for Run.xlsx under objExcel
' We will have objQCws - Excel Workbook instance for [*QC_Template*].xlsx under objExcel
' We will have objSTPXls - Excel Workbook instance for [STP].xlsx  under objExcelSTP



'**************************************************************
' Purpose : Select a column and press on 'Compute Series' to refresh EDGE data
' Create : 16/Apr/2015
' Last Updated : 
'**************************************************************
Sub sComputeSeries(sTestData1)
Dim strResult,strTemp
Dim objFolder
Dim objFile
Dim STP
Dim objArray,i
Dim oSTP_ExcelObj,strTestDataFile,File

On Error Resume Next

Delay 3000,"Performing Compute Series"

STP=getSplitValue(sTestData1,"STP")
STPSheetName=getSplitValue(sTestData1,"STPSheetName")
strTestDataFile=getSplitValue(sTestData1,"TestDataFile")

objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
For i=0 to ubound(objArray)
  log.Message objArray(i).FullName
  set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & STP & "*",1,True)
  If oSTP_ExcelObj.Exists = True Then
    strAliasName=objArray(i).mappedname
    strFileName=oSTP_ExcelObj.WndCaption
'    strFileName=GetFileName(strFileName,"Microsoft Excel")
'    strFileName=iif(instr(strFileName,"Microsoft")>0,GetFileName(strFileName,"Microsoft Excel"),strFileName)
    If instr(strFileName,"Microsoft Excel")>0 then
      strFileName=GetFileName(strFileName,"Microsoft Excel")
    Else
      strFileName=GetFileNameExcel13(strFileName," - Excel")
    End If
'    strFileName=iif(instr(strFileName,"Microsoft Excel")>0,GetFileName(strFileName,"Microsoft Excel"),GetFileNameExcel13(strFileName,"- Excel.xlsx"))
    FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
    FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
    log.Message FilePath
    Exit For
  Else
    log.Message "STP file not found in " & objArray(i).FullName
  End If
Next

set objExcelSTP = Aliases.EXCEL
'objExcelSTP.DisplayAlerts=False

' If STP file object not found - fail the case and go to next test case
If oSTP_ExcelObj.Exists = False Then
  blnCriticalErrorFound = True
  strCriticalError = "Unable to get STP workbook object"
  strTestCaseResult = "FAIL"
  Call ExcelProcessKill
  Exit Sub
End If

Delay 1000 ,"Activating frequency sheet in STP.."
''Getting Opened STP Object 
Set objSTPXls=GetObject(FilePath)
objSTPXls.DisplayAlerts=False
With objSTPXls
  With .Sheets(STPSheetName).Select
  End With
  With .WorkSheets(STPSheetName)
       .Columns("P:P").Select
  End With
End With    

''Perform Compute series in STP     
Call Compute(strAliasName)       

strTestDataFile=aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\EDGE Automation\EDGE\Edge DM Test Data\" & STP & "\" & strTestDataFile & ".xlsx" 

Set objQCwb = objExcel.workbooks.open(strTestDataFile)
Set objQCws=objQCwb.Worksheets("CDM")
'Set XlWb2 = objQCws.Workbooks.open(strTestDataFile)
'objQCws.Sheets("CDM").Select
strTCRemarks = "Performed Compute series operation in Excel"
End Sub


''To perform compute series in STP 
Sub Compute(strAliasName)
Dim strObj
Dim strTemp,objErrmsg
Dim netUIHWND,ObjAlias,File
On Error Resume Next

'''Selecting Formula Column
'With objSTPXls
'  With .WorkSheets(STPSheetName)
'       .Columns("P:P").Select
'  End With
'End With 
 
'Delay 2000 ,"Performing Compute Series"
'Set netUIHWND = strAliasName.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND
Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND
If netUIHWND.Exists=True then  
  Call netUIHWND.Click(659, 45)
  Call netUIHWND.Click(612, 112)
  strTemp="Window(""#32770"", ""Error"", 1)"
  Set objErrmsg=Sys.Process("EXCEL", 2).WaitChild(strTemp,3000)
  If objErrmsg.Exists = True then
    strTemp="Window(""Button"", ""OK"", 1)"
    Set objOkClick=objErrmsg.FindChild("Name",strTemp,3,True)
    objOkClick.Click  
  End If
  log.Message "Performed Compute Series"
Else
  log.Message "Compute Series not performed"
End If

''Mark Good
Delay 1000,"Mark Good..."
With objSTPXls
  With .WorkSheets(STPSheetName)
       .Cells.Select
  End With
End With
Call netUIHWND.Click(32, 92)
  
''Upload Series
Call netUIHWND.Click(131, 71)
Delay 15000 , "Uploading.."

  Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,40000)
  strTemp=Sys.Process("EXCEL", 2).Window("#32770", "Warning", 1)
  Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,40000)
  If File.Exists Then
    File.Window("Button", "&No", 2).click
  End if 
        
''Waiting for Msgbox
strTemp="WPFObject(""PART_ContainerContent"")"
Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,40000)
If File.Exists Then
  File.Window("Button", "OK", 1).Click
End If
''Question Msgbox
strTemp="WPFObject(""PART_ContainerContent"")"
Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,25000)
If File.Exists Then
  File.Keys "N"
End If
''Referesh Series
 Call netUIHWND.Click(298, 69)
 Call sExcelFullHistory

Set netUIHWND=Nothing
End Sub



'**************************************************************
' Purpose : Compare data of two given Excel ranges
' Create : 16/Apr/2015
' Last Updated : 
'**************************************************************
Sub sCompareRange(sTestData1)
Dim intRowDiff,intColDiff,intI,strSTPCellValue,strTDCellValue
Dim intSTPStartCol,intSTPRow,intSTPCol
Dim intTDStartCol,intTDEndCol,intTDStartRow,intTDRow,intTDCol,intSTPEndCol
Dim STPSheetName,STPHeaderRow,STPStartRow,STPStartCol,STPNumberofRows,TDHeaderRow,TDStartCol
Dim intQCValue,intSTPValue,File

On Error Resume Next
  
STPSheetName=getSplitValue(sTestData1,"STPSheetName")
STPHeaderRow=getSplitValue(sTestData1,"STPHeaderRow")
STPStartRow=getSplitValue(sTestData1,"STPStartRow")
STPNumberofRows=getSplitValue(sTestData1,"STPNumberofRows")
STPNumberofRows=iif(STPNumberofRows="",10,STPNumberofRows)
'STPStartCol=getSplitValue(sTestData1,"STPStartCol")
TDHeaderRow=getSplitValue(sTestData1,"TDHeaderRow")
'TDStartCol=getSplitValue(sTestData1,"TDStartCol")
intTDStartRow=getSplitValue(sTestData1,"TDStartRow")

If STPSheetName="" or STPHeaderRow="" or STPStartRow="" or TDHeaderRow="" then
    strTCRemarks="Insufficient Data"
    strTestCaseResult="FAIL"
End If

Delay 1000,"Comparing Excels.."

With objSTPXls
  With .WorkSheets(STPSheetName)
    ''STP
    ''Selecting the Specified sheet name in STP
    .Sheets(STPSheetName).Select
    intSTPEndCol=0
    
    ''To Find Starting Date in Test Data  
    intI=18
    strTDCellValue=objQCws.Cells(TDHeaderRow,intI)
    If isDate(strTDCellValue) then
      strTDCellValue=FormatDateTime(strTDCellValue,2)
      TDStartCol=intI
    End If
    
    ''To Find STP Start Column
    If strTDCellValue<>"" then
      For intI=1 to nCol
        strSTPCellValue=.Cells(STPHeaderRow,intI)
        If isDate(strSTPCellValue)=True then
          strSTPCellValue=FormatDateTime(strSTPCellValue,2)
          If strSTPCellValue=FormatDateTime(strTDCellValue,2) then
            STPStartCol=intI  
            Exit For    
          End If
        End If    
      Next
    End If

    ''If StartColumn is not found in STP
    If STPStartCol=0 then
      blnCriticalErrorFound = True
      strCriticalError = strTDCellValue & " Column not found in STP"
      strTCRemarks=strTDCellValue & " Column not found in STP"
      strTestCaseResult="FAIL"
      Exit Sub
    End If
        
'    ''To Find STP Start Column
'    strSTPCellValue=""
'    STPStartCol=0
'    intI=25''Starting Column in STP
'    strSTPCellValue=.Cells(STPHeaderRow,intI)''Starting Date in STP
'    If isDate(strSTPCellValue) then
'      strSTPCellValue=FormatDateTime(strSTPCellValue,2)
'      STPStartCol=intI
'    End If
'    ''Old    
'    For intI=1 to nCol
'      strCellValue=.Cells(STPHeaderRow,intI)
'      If isDate(strCellValue) then
'        strCellValue=FormatDateTime(strCellValue,2)
'        If strCellValue=FormatDateTime(TDStartCol,2) then
'          STPStartCol=intI  
'          Exit For    
'        End If
'      End If
'    Next

    
    ''Finding total number of Columns which has data in STP 
    'If Cint(intSTPEndCol)=0 or intSTPEndCol="" then
      For intSTPStartCol=STPStartCol to nCol
        If .Cells(STPHeaderRow,intSTPStartCol) <> "" then
          intSTPEndCol=Cint(intSTPEndCol)+1
        End If
      Next
    'End If
    
    ''TEST DATA(TD)
    ''TD Start Row
    If intTDStartRow="" then
      intTDStartRow=Cint(TDHeaderRow)+1
    End If
    
    intTDEndCol=0
    
'    ''To Find TDStartCol number (Old)  
'    For intI=1 to nCol     
'      strTDCellValue=objQCws.Cells(TDHeaderRow,intI)
'      If isDate(strTDCellValue) then
'        If FormatDateTime(strTDCellValue,2)=FormatDateTime(strSTPCellValue,2) then
'          TDStartCol=intI
'          Exit For
'        End If
'      End If  
'    Next
    
    ''Finding total number of Columns which has data in Test Data(TD) 
    For intTDStartCol=TDStartCol to nCol
      If objQCws.Cells(TDHeaderRow,intTDStartCol) <> "" then
        intTDEndCol=Cint(intTDEndCol)+1
      End If
    Next
   
    ''Comparing number of Columns in STP and Test Data
    If Cint(intSTPEndCol)<>Cint(intTDEndCol) then
      log.Message "Number of column does not match"
      strTCRemarks="Number of column does not match"
      strTestCaseResult="FAIL"
      Exit Sub      
    End If
      
    ''Comparing STP with Test Data
    intRowDiff=Cint(intTDStartRow)-Cint(STPStartRow)
    intColDiff=Cint(TDStartCol)-Cint(STPStartCol)
    
     strLevel=objQCws.Cells(intTDStartRow,7)
    
      For intSTPRow=STPStartRow to Cint(STPStartRow)+Cint(STPNumberofRows)-1
          intTDRow=Cint(intSTPRow)+Cint(intRowDiff)
          For intSTPCol=STPStartCol to intSTPEndCol              
              intTDCol=Cint(intSTPCol)+Cint(intColDiff)
              If Trim(.Cells(intSTPRow,intSTPCol)) <> "" or Trim(objQCws.Cells(intTDRow,intTDCol)) <> ""  then
                  intSTPValue=CDbl(Round(Trim(.Cells(intSTPRow,intSTPCol)),8))
                  intQCValue=CDbl(Round(Trim(objQCws.Cells(intTDRow,intTDCol)),8))
'                  If Round(Trim(.Cells(intSTPRow,intSTPCol)),8) <> Round(Trim(objQCws.Cells(intTDRow,intTDCol)),8) then
                  If Cint(intSTPValue) <> Cint(intQCValue) then
                    log.Message  " Column Name: " & .Cells(STPHeaderRow,intSTPCol) & "STP Data does not match with Test Data!!  STP Data: " & .Cells(intSTPRow,intSTPCol) & " Test Data: " & objQCws.Cells(intTDRow,intTDCol) 
                    strTCRemarks= "STP Data does not match with Test Data!! " & " Column Name: " & .Cells(STPHeaderRow,intSTPCol) & " STP Data: " & iif(.Cells(intSTPRow,intSTPCol)="","Blank",.Cells(intSTPRow,intSTPCol)) & " Row no: " & intSTPRow & " Test Data: " & iif(objQCws.Cells(intTDRow,intTDCol)="","Blank",objQCws.Cells(intTDRow,intTDCol)) & " Row no: " & intTDRow 
                    strTestCaseResult="FAIL"
                    Exit Sub        
                  End If   
              End If   
          Next
      Next  

  End With
End With 
  log.Message  "STP Data matches with Test Data"
  strTCRemarks =  "STP Data matches with Test Data, EDGE Syntax: " & strLevel
  strTestCaseResult="PASS"
End Sub

''Function to get filename of Excel Workbook
Function GetFileName(CellText,Value)
Dim aArray,aArray1, intI
On Error resume Next

GetFileName = ""

aArray = split(cellText,chr(10))
For intI = 0 to ubound(aArray)
  If aArray(intI) <> "" Then
     aArray1 = Split(aArray(intI),"-",2)           
    If ucase(Trim(aArray1(0))) = Ucase(Value) Then
       GetFileName = Trim(cStr(aArray1(1)))
       Exit For 
    End If
  End If
Next

If GetFileName = "" Then
  Log.Message("No value found for '" & Value & "' in '" & CellText & "'")
End If

If Err.Number <> 0 Then
  Log.Warning "Error in 'GetFileName' - " & Err.Description
  Err.Clear
End If
End Function


''Function to get filename of Excel(13) Workbook
Function GetFileNameExcel13(CellText,Value)
Dim aArray,aArray1, intI
On Error resume Next

GetFileNameExcel13 = ""

aArray = split(cellText,chr(10))
For intI = 0 to ubound(aArray)
  If aArray(intI) <> "" Then
     aArray1 = Split(aArray(intI)," - Excel",2)           
'    If ucase(Trim(aArray1(0))) = Ucase(Value) Then
       GetFileNameExcel13 = Trim(aArray1(0))
       Exit For 
'    End If
  End If
Next

If GetFileNameExcel13 = "" Then
  Log.Message("No value found for '" & Value & "' in '" & CellText & "'")
End If

If Err.Number <> 0 Then
  Log.Warning "Error in 'GetFileNameExcel13' - " & Err.Description
  Err.Clear
End If
End Function

Function iif(Condition,Val1,Val2)
  If Condition=True then
    iif=Val1
  Else
    iif=Val2
  End If
End Function

Sub sCreateSeries(strParameters)
'Sub sCreateSeries()
On Error Resume Next

  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,File
  
  Const xlFillDefault = 0
  strStartcolumn=0
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strForeCast= getSplitValue(strParameters,"ForeCast")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSeriesFreq = getSplitValue(strParameters,"Series Freq")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")
  strExcelNumber = getSplitValue(strParameters,"ExcelNumber")
 strExcelNumber =Cint(strExcelNumber)
  
  'For Unit testcase(PRT)
  If strUnitType="ZZZ" then
   strUnitType=strUnit
  End If
  

  'STPSheetName="14244377"
'  STP="Test Source 1"
 ' strTestDataFile="rchethana_20190701_102451"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
'  strSeriesFreq="A1"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="5"
'    
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
 
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
        For r = 1 To .UsedRange.Rows.Count
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
           intlastRow = r           
           Exit For
          End  If 
        Next   
         
        inti=3
        lastColumn=.UsedRange.Columns.Count        
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          If UCASE(strText)=UCase("Series Name") then 
          .Cells(intlastRow,inti).Value=strSeriesName
          ElseIf UCASE(strText)=UCase("Source Series Name") then 
          .Cells(intlastRow,inti).Value=strSourceSeriesName
          ElseIf UCASE(strText)=UCase("Series Source Code") then 
          .Cells(intlastRow,inti).Value=strSeriesSourceCode
          ElseIf UCASE(strText)=UCase("ForeCast") then 
          .Cells(intlastRow,inti).Value=strForeCast 
          ElseIf UCASE(strText)=UCase("Series Status") then 
          .Cells(intlastRow,inti).Value=strSeriesStatus
          ElseIf UCASE(strText)=UCase("Series Type") then 
          .Cells(intlastRow,inti).Value=strSeriesType
          ElseIf UCASE(strText)=UCase("Series Country") then 
          .Cells(intlastRow,inti).Value=strSeriousCountry
          ElseIf UCASE(strText)=UCase("Output Unit") then 
          .Cells(intlastRow,inti).Value=strOutputUnit
          ElseIf UCASE(strText)=UCase("Series Nature") then 
          .Cells(intlastRow,inti).Value=strSeriesNature
          ElseIf UCASE(strText)=UCase("Series Freq") then 
											intFreqColumn = inti														
          .Cells(intlastRow,inti).Value=strSeriesFreq
          ElseIf UCASE(strText)=UCase("Source Unit") then 
          .Cells(intlastRow,inti).Value=strSourceUnit
          ElseIf UCASE(strText)=UCase("Unit Type") then 
              .Cells(intlastRow,inti).Value=strUnitType  
          ElseIf isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         
          Delay 5000 , "Creating a new series.."
          
          strTimepoints = getSplitValue(strParameters,"Timepoints")
          If strTimepoints=6 then
              ''Copy the Series for 1 row 
              strEndSeriesColumn=strStartcolumn-3
              strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
              Delay(5000)
        
              With objSTPXls
                With .Sheets(STPSheetName).Select
                End With      
                With .WorkSheets(STPSheetName)
                   .Range("C" & intlastRow & ":" & strEndSeriesColumn & intlastRow ).Select
                    intTargetRow=intlastRow + 1
                    .Range("C" & intlastRow & ":" &strEndSeriesColumn & intlastRow).AutoFill  .Range("C" & intlastRow & ":" & strEndSeriesColumn & intTargetRow), xlFillDefault
																				.Cells(intlastRow+1,intFreqColumn).Select
																				.Cells(intlastRow+1,intFreqColumn).Value=strSeriesFreq	
																			'	.Cells(intlastRow+2,intFreqColumn).Select
																			'	.Cells(intlastRow+2,intFreqColumn).Value=strSeriesFreq																														       
                End With
              END WITH
          End If
'          
'          'Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND  
'          Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
'     
'         
          
          ''Mark Good
          'Delay 3000,"Mark Good..."
          With objSTPXls
            With .WorkSheets(STPSheetName)
                 .Cells.Select
            End With
          End With

  'Click on Mark good
  Call sClicKMarkGood(strExcelNumber,strTestDataFile)

  'click on Upload Series
  Call sClickUpload(strExcelNumber,strTestDataFile)
  
  	'For Unit Testcase(PRT)
      strUnitType = getSplitValue(strParameters,"Unit Type") 
      If strUnitType="ZZZ" then
        Call sClickonInformation(strExcelNumber,"Yes")
        strTCRemarks="STP Series created successfully with Unit:"&strUnit
        Call sCloseSource
        Exit Sub
      Else
        'select No on File Close Window
         Call sClickonInformation(strExcelNumber,"No")
         Delay 2000, "Please Wait"
      End If
          

      
      
      'For Daily Check Panel testcase(PRT)
      strSeriesFreq = getSplitValue(strParameters,"Series Freq")
      If strSeriesFreq="D" then
         With objSTPXls
            With .WorkSheets(STPSheetName)
                 strSeriesID=.Cells(intlastRow,1).Value
                 DescText = intlastRow       
                 strTCRemarks="STP Series created successfully with Series ID="&strSeriesID   
                 'Call ExcelProcessKill() 
                 Exit Sub      
            End With
          End With
      End If
          
        
        
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
               
                 ' Click on Refresh Button
               ' Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
                
                
'                 'click on Refresh Button 
'                   Sys.Keys "~Y"
'                   Sys.Keys "YB"
''                Call netUIHWND.Click(300, 66)
''                Call netUIHWND.Click(300, 66)
                'Click on Refresh Button
                Call sClickRefresh(strExcelNumber,strTestDataFile)
                Call sExcelFullHistory
          End With
        End With
    End With
  End With 
  log.Message  "New Series Created"
  strTCRemarks =  "Created Series for STP" 
  strTestCaseResult="PASS"
  
  
'  
'  With objSTPXls
'    With .Sheets(STPSheetName).Select
'    End With      
'    With .WorkSheets(STPSheetName)
'        intcount=0
'        if strStartcolumn=0 then
'        End if
'        For intj= (strStartcolumn + 1) to lastColumn 
'          If IsEmpty(.UsedRange.Cells(intlastRow, intj).Value) = True AND (.UsedRange.Cells(r, intj).Text) ="" Then
'            if intcount<=5 then
'              .Cells(intlastRow,intj).select
'              .Cells(intlastRow,intj).Value=strTimepoints
'              strTimepoints=strTimepoints + 1
'            Else
'              Exit For
'            End if 
'            intcount=intcount+1 
'          End If  
'        Next
        
'        strTimepoints = getSplitValue(strParameters,"Timepoints")
'        If strTimepoints=6 then
'            ''Copy the Series for 1 row
'            strStartColumnName=strStartcolumn + 1
'            strStartColumnName=GetColumnName(strStartColumnName) 
'            strEndSeriesColumn=intj
'            strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
'            Delay(5000)
'        
'            With objSTPXls
'              With .Sheets(STPSheetName).Select
'              End With      
'              With .WorkSheets(STPSheetName)
'                 .Range(strStartColumnName & intlastRow & ":" & strEndSeriesColumn & intlastRow ).Select
'                  intTargetRow=intlastRow + 1
'                  .Range(strStartColumnName & intlastRow & ":" &strEndSeriesColumn & intlastRow).AutoFill  .Range(strStartColumnName & intlastRow & ":" & strEndSeriesColumn & intTargetRow), xlFillDefault
'              End With
'            END WITH
'        End If
    
       'Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
       'Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
       
       
        ''Upload Series
'          Sys.Keys "~Y"
'          Sys.Keys "Y5"
'        Call netUIHWND.Click(139, 67)
'        Call netUIHWND.Click(139, 67)
        'Delay 90000 , "Uploading.."
        
         'Mark Good Warning
'          Set File = Sys.Process("EXCEL", 2).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Warning"")",5000)
'          If File.Exists= True Then
'            SYS.Keys "N"
'          End If
        
'        ''Waiting for Msgbox
'        Set File = Sys.Process("EXCEL", 2)._
'          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",60000)._
'          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Information"", 1)",60000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
'          Waitchild("WPFObject(""PART_InactiveBorder"")",60000)
'          
'           If File.Exists= True Then
'            SYS.Keys "[Enter]"
'            Delay 2000 , "Please Wait"
'          End If
'		  
'		    ''Question Msgbox
'          
'              Set File = Sys.Process("EXCEL", 2)._
'          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",60000)._
'          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Question"", 1)",60000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
'          Waitchild("WPFObject(""PART_InactiveBorder"")",60000)


'        Set File = Sys.Process("EXCEL", 2)._
'              Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)
'
'      If File.Exists Then
'            File.Click
'            Set PicObj = Utils.Picture
'            Set PicObj = Sys.Desktop.Picture
'            PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
'            picCount = picCount + 1 
'            'Click on Oj button
'            'SYS.Keys("O")
'            Set objOk = Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Information").WPFObject("CustomMessageBoxWindow", "Information", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_OK"")",10000)
'            objOk.Click
'            Watch.Stop
'            blnTimeRecorded = True
'      End If
'       Log.Message("End First Execution time: "  & now)
'
'
'     Set File = Sys.Process("EXCEL", 2)._
'              Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",3000000)
'
'      If File.Exists Then
'        'File.Click
'        'Sys.Keys("N")
'        Set objNo = Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_No"")",10000)
'        objNo.Click
'      End If


  'click on Mark Good
  Call sClicKMarkGood(strExcelNumber,strTestDataFile)
  
  'Click om Upload Series
  Call sClickUpload(strExcelNumber,strTestDataFile)
  
  'click on No Button on File close window
  Call sClickonInformation(strExcelNumber,"No")  
        
       ' For PRT testcase TC_Todo_30
       strTimepoints = getSplitValue(strParameters,"Timepoints")
        If strTimepoints=0 then
           If File.Exists= True Then
              Sys.Keys "Y"
              Delay 2000 , "Please Wait"
           End If
           Exit Sub
        End If
        
'            If File.Exists= True Then
'            Sys.Keys "N"
'            Delay 2000 , "Please Wait"
'          End If
        
        'For PRT testcase TC_Todo_11
       strTimepoints = getSplitValue(strParameters,"Timepoints")
        If strTimepoints=5  or strTimepoints=6 then
           With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
                'Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
                'Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
'                Call netUIHWND.Click(300, 66)
'                Call netUIHWND.Click(300, 66) 'Click Refresh
'                  Sys.Keys "~Y"
'                  Sys.Keys "YB"
                'Click om Refresh Button
                Call sClickRefresh(strExcelNumber,strTestDataFile)
                Call sExcelFullHistory
          End With
         End With          
         Exit Sub
        End If
              
        'Refresh Series
        With objSTPXls
          With .WorkSheets(STPSheetName)                 
                'Set wndEXCEL7 = Aliases.EXCEL.wndXLMAIN.XLDESK.wndEXCEL72
                .Cells(intlastRow,1).Select
                ' Call wndEXCEL7.Keys("^c")
               strSeriesID=.Cells(intlastRow,1).Value															
               strSeriesID=.Cells(intlastRow,1).text															
              .Cells(intlastRow,lastColumn).Select
          End With
        End With
         strTCRemarks =  "Created New Series for STP - "&strSeriesID 
'      End With
'  End With 
'  objSTPXls.Close
'  Delay(10000)
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*RUN*",1,True)
    If oSTP_ExcelObj.Exists = True Then
    Else
      objArray(i).Close
    End If
  Next
  Delay(5000)
  Call SClosesource()
End Sub 

Sub sWarning()
  Dim strTemp,objErrmsg,objOkClick
  
  strTemp=Sys.Process("EXCEL").Window("#32770", "Warning", 1)
  Set objErrmsg=Sys.Process("EXCEL", 2).WaitChild(strTemp,3000)
  If objErrmsg.Exists = True then
    strTemp="Window(""Button"", ""OK"", 1)"
    Set objOkClick=objErrmsg.FindChild("Name",strTemp,3,True)
    objOkClick.Click  
  End If
End Sub 

Sub sComputePlus(strParameters)
'Sub sComputePlus()

On Error Resume Next
Dim objSTPXls,objArray,oSTP_ExcelObj,netUIHWND,File
Dim i,strAliasName,strFileName,FilePath,STPSheetName,StrSeriesId1,StrSeriesId2,intlastRow,intPreRow ,intRow,strTemp,strTestDataFile,STP,lastColumn
  
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
	strTimepoints = getSplitValue(strParameters,"Timepoints")
  strExcelNumber = getSplitValue(strParameters,"ExcelNumber")
  strExcelNumber =Cint(strExcelNumber)
		
		
		
'		STPSheetName="A1_1"
'		STP="Test Source 1"
'		strTestDataFile="YYY-Automation-Test Source 1"
'		strTimepoints="6"
'    strSeriesID = "395236577"


  
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
    For i=0 to ubound(objArray)
      log.Message objArray(i).FullName
      set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
      If oSTP_ExcelObj.Exists = True Then
        strAliasName=objArray(i).mappedname
        strFileName=oSTP_ExcelObj.WndCaption
        If instr(strFileName,"Microsoft Excel")>0 then
          strFileName=GetFileName(strFileName,"Microsoft Excel")
        Else
          strFileName=GetFileNameExcel13(strFileName," - Excel")
        End If
        FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
        FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
        log.Message FilePath
        Exit For
      Else
        log.Message "STP file not found in " & objArray(i).FullName
      End If
    Next
  
    Set objSTPXls=GetObject(FilePath)
    With objSTPXls
      With .Sheets(STPSheetName).Select
      End With

      With .WorkSheets(STPSheetName)
        Dim r
        lastColumn=.UsedRange.Columns.Count
          delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
          For r = 1 To .UsedRange.Rows.Count
            If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
             intlastRow=r
												'	msgbox intlastRow
             Exit For
            End  If 
          Next
          'Set wndEXCEL7 = Aliases.EXCEL.wndXLMAIN.XLDESK.wndEXCEL7
          'intlastRow=intlastRow-1
'          if intlastRow >4  then
'            .Cells(intlastRow,1).Select
'            StrSeriesId1=.Cells(intlastRow,1).Value
'          End if 
          'intPreRow=intlastRow-1
           intlastRow=intlastRow-1
           intRow1 =intlastRow-1
           intRow2=intlastRow-2 
				  
          if intlastRow > 4  then
'            .Cells(intPreRow,1).Select
'             StrSeriesId=.Cells(intPreRow,1).Value
             .Cells(intRow1,1).Select
              StrSeriesId1=.Cells(intRow1,1).Value
              StrSeriesId2=.Cells(intRow2,1).Value 
             .Cells(intLastRow,18).Select
             .Cells(intLastRow,18).Value="id("& StrSeriesId1 & ")+id(" & StrSeriesId2 & ")"
             .Cells(intLastRow,18).Text="id("& StrSeriesId1 & ")+id(" & StrSeriesId2 & ")"
          End if
 									
          'if intLastRow >4  then
           
												'.Cells(intLastRow,16).Value="id("& StrSeriesId & ")"
											'	msgbox StrSeriesId1            
            ' Call wndEXCEL7.Keys("id("& StrSeriesId1 & ")+id(" & StrSeriesId2 & ")")
            '.Cells(intRow+1,16).Select
        '  End if 
         'set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
					'Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND
          
          'Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
         ''Click om Compute
         Call sClickComputePlus(strExcelNumber,strTestDataFile)
         
         
         ''Mark Good
          Delay 1000,"Mark Good..."
          With objSTPXls
            With .WorkSheets(STPSheetName)
                 .Cells.Select
            End With
          End With
          
         Call sClicKMarkGood(strExcelNumber,strTestDataFile)
          
        ''Upload Series
        Call sClickUpload(strExcelNumber,strTestDataFile)
        
        'click No on File close Window
        Call sClickonInformation(strExcelNumber,"No")
        'Delay 45000 , "Uploading.."
        


'''information Msgbox
'        Set File = Sys.Process("EXCEL", 2)._
'          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",60000)'._
''            Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Information"", 1)",60000)._
''            Waitchild("WPFObject(""Grid"", """", 1)",60000)._
''            Waitchild("WPFObject(""PART_InactiveBorder"")",60000)
'          
'      If File.Exists= True Then
'        SYS.Keys "[Enter]"
'								 Delay 2000 , "Please Wait"
'        End If
'        
''Question MessageBox
'  Set File = Sys.Process("EXCEL", 2)._
'          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",60000)'._
''          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Question"", 1)",60000)._
''          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
''          Waitchild("WPFObject(""PART_InactiveBorder"")",60000)
'          
'        If File.Exists Then
'          Sys.Keys "N"
'										Delay 2000 , "Please Wait"
'        End If
        
        
              'Refresh Series
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
               ' Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
                Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
                'Click on Refresh
                Call sClickRefresh(strExcelNumber,strTestDataFile)
                Call sExcelFullHistory
                .Cells(intlastRow,lastColumn).Select
          End With
        End With        
        End With
      End With
      
      
      
      ' checking addition
      With objSTPXls
       With .WorkSheets(STPSheetName)
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          If isDate(strText)  then
           If IsEmpty(.UsedRange.Cells(intRow2, inti).Value) = False AND (.UsedRange.Cells(intRow2, inti).Text) <> "" Then           
             If IsEmpty(.UsedRange.Cells(intRow1, inti).Value) = False AND (.UsedRange.Cells(intRow1, inti).Text) <> "" Then
             intComputeValue = (.UsedRange.Cells(intRow1, inti).Value) +(.UsedRange.Cells(intRow2, inti).Value)
              If .UsedRange.Cells(intLastRow, inti).Value =  intComputeValue Then
                blnFlag=True
              Else
                blnFlag=False
                Exit For
              End If
             End If
            End  If             
          End if 
       Next
         End With
      End With


								
											
      If blnFlag=True then
        strTCRemarks = "Checked for Plus computing values"
        log.Message "Checked for Plus computing values"
        strTestCaseResult="PASS"
      Else
        strTCRemarks = "Addition failed at" & inti & "column"
        strTestCaseResult="FAIL"
      End If


      ' objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
        For i=0 to ubound(objArray)
          log.Message objArray(i).FullName
          set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*RUN*",1,True)
          If oSTP_ExcelObj.Exists = True Then
          Else
            objArray(i).Close
          End If
        Next
        Delay(5000)
      'Set objSTPXls = Nothing
      Call SClosesource()
      
      'Call Aliases.EdgeClient.HwndSource_RibbonWindow.RibbonWindow.ContentControl.Grid.Grid.ContentControl.Grid.ContentControl.PART_ContainerContent.BarManager.DockPanel.DockLayoutManager.LayoutGroup.LayoutPanel.Click(1293, 14)
End Sub 

Sub sComputeDiv(strParameters)

On Error Resume Next

  Dim objSTPXls,objArray,oSTP_ExcelObj,netUIHWND,File
  Dim i,strAliasName,strFileName,FilePath,STPSheetName,StrSeriesId1,intlastRow,intPreRow ,intRow,strTemp,strTestDataFile,STP,lastColumn
  
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
    For i=0 to ubound(objArray)
      log.Message objArray(i).FullName
      set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
      If oSTP_ExcelObj.Exists = True Then
        strAliasName=objArray(i).mappedname
        strFileName=oSTP_ExcelObj.WndCaption
        If instr(strFileName,"Microsoft Excel")>0 then
          strFileName=GetFileName(strFileName,"Microsoft Excel")
        Else
          strFileName=GetFileNameExcel13(strFileName," - Excel")
        End If
        FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
        FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
        log.Message FilePath
        Exit For
      Else
        log.Message "STP file not found in " & objArray(i).FullName
      End If
    Next
  
    Set objSTPXls=GetObject(FilePath)
    With objSTPXls
      With .Sheets(STPSheetName).Select
      End With

      With .WorkSheets(STPSheetName)
        Dim r
          delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
          For r = 1 To .UsedRange.Rows.Count
            If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
             intlastRow=r
             Exit For
            End  If 
          Next
          lastColumn=.UsedRange.Columns.Count
          'Set wndEXCEL7 = Aliases.EXCEL.wndXLMAIN.XLDESK.wndEXCEL7
          intlastRow=intlastRow-1
          'intRow1 = intlastRow -3
         ' intRow2 = intlastRow -2
          if intlastRow >4  then
            .Cells(intlastRow,1).Select
            StrSeriesId1=.Cells(intlastRow,1).Value
           ' StrSeriesId2=.Cells(intRow2,1).Value            
          End if 
          
         intRow=intlastRow-1
         'intRow=intlastRow
          If intRow >4  then
            .Cells(intRow,17).Select
            .Cells(intRow,17).Value="id("& StrSeriesId1 & ")/100"
            .Cells(intRow,17).Text="id("& StrSeriesId1 & ")/100"           
             'Call wndEXCEL7.Keys("id("& StrSeriesId1 & ")/100")
             'Call wndEXCEL7.Keys("[Enter]")              
             .Cells(intRow+1,17).Select
          End if 
          
         'set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
        Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
         
         ''Compute
         Call netUIHWND.Click(593, 112)
         
         ''Mark Good
          Delay 1000,"Mark Good..."
          With objSTPXls
            With .WorkSheets(STPSheetName)
                 .Cells.Select
            End With
          End With
          Call netUIHWND.Click(32, 92)
          
        ''Upload Series
        Call netUIHWND.Click(131, 69)
        'Delay 85000 , "Uploading.."
        
        ''Waiting for Msgbox
        strTemp="WPFObject(""PART_ContainerContent"")"
        Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)'._
'          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Information"", 1)",600000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
'          Waitchild("WPFObject(""FloatingContainerBorder"")",600000)._
'          Waitchild("WPFObject(""FloatingContainerBackground"")",600000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
'          Waitchild("WPFObject(""FloatingContainerBody"")",600000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
'          Waitchild("WPFObject(""PART_ContainerContent"")",600000)
          
      If File.Exists= True Then
        SYS.Keys "[Enter]"
        End If
        
        ''Question Msgbox
        Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",60000)'._
'          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Question"", 1)",60000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
'          Waitchild("WPFObject(""FloatingContainerBorder"")",60000)._
'          Waitchild("WPFObject(""FloatingContainerBackground"")",60000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
'          Waitchild("WPFObject(""FloatingContainerBody"")",60000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
'          Waitchild("WPFObject(""PART_ContainerContent"")",60000)
        If File.Exists Then
          Sys.Keys "N"
        End If
              'Refresh Series
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
                'Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
                Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
                'Call netUIHWND.Click(296, 72)
                Call netUIHWND.Click(318, 68)
                Call sExcelFullHistory                
               .Cells(intlastRow,lastColumn).Select
          End With
        End With
        
        End With
      End With
      
      ' checking division
      With objSTPXls
       With .WorkSheets(STPSheetName)
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          If isDate(strText)  then
           If IsEmpty(.UsedRange.Cells(intlastrow, inti).Value) = False AND (.UsedRange.Cells(intlastrow, inti).Text) <> "" Then      
            If .UsedRange.Cells(introw, inti).Value = (.UsedRange.Cells(intlastrow, inti).Value)/100 then
                blnFlag=True
              Else
                blnFlag=False
                Exit For
              End If
             
            End  If             
          End if 
       Next
         End With
      End With
      
      If blnFlag=True then
      strTCRemarks = "Checked for Division computing values"
      End If
      
      If blnFlag=False then
      strTCRemarks = "Division failed at" & inti & "column"
      strTestCaseResult="FAIL"
      End If
      
      
       objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
        For i=0 to ubound(objArray)
          log.Message objArray(i).FullName
          set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*RUN*",1,True)
          If oSTP_ExcelObj.Exists = True Then
          Else
            objArray(i).Close
          End If
        Next
        Delay(5000)
      'Set objSTPXls = Nothing
      Call SClosesource()
     ' Call Aliases.EdgeClient.HwndSource_RibbonWindow.RibbonWindow.ContentControl.Grid.Grid.ContentControl.Grid.ContentControl.PART_ContainerContent.BarManager.DockPanel.DockLayoutManager.LayoutGroup.LayoutPanel.Click(1293, 14)
End Sub 

Sub sChangePctyoy(strParameters)
On Error Resume Next
Dim objSTPXls,objArray,oSTP_ExcelObj,netUIHWND,File
Dim i,strAliasName,strFileName,FilePath,STPSheetName,StrSeriesId1,StrSeriesId2,intlastRow,intPreRow ,intRow,strTemp,strTestDataFile,STP,lastColumn
  

  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
    For i=0 to ubound(objArray)
      log.Message objArray(i).FullName
      set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
      If oSTP_ExcelObj.Exists = True Then
        strAliasName=objArray(i).mappedname
        strFileName=oSTP_ExcelObj.WndCaption
        If instr(strFileName,"Microsoft Excel")>0 then
          strFileName=GetFileName(strFileName,"Microsoft Excel")
        Else
          strFileName=GetFileNameExcel13(strFileName," - Excel")
        End If
        FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
        FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
        log.Message FilePath
        Exit For
      Else
        log.Message "STP file not found in " & objArray(i).FullName
      End If
    Next
  
    Set objSTPXls=GetObject(FilePath)
    With objSTPXls
      With .Sheets(STPSheetName).Select
      End With

      With .WorkSheets(STPSheetName)
        Dim r
          delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
          For r = 1 To .UsedRange.Rows.Count
            If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
             intlastRow=r
             Exit For
            End  If 
          Next
          lastColumn=.UsedRange.Columns.Count
          'Set wndEXCEL7 = Aliases.EXCEL.wndXLMAIN.XLDESK.wndEXCEL7
          intlastRow=intlastRow-1
          if intlastRow >4  then
            .Cells(intlastRow,1).Select
            StrSeriesId1=.Cells(intlastRow,1).Value
          End if 
          intRow=intlastRow-1
          if intRow >4  then
            .Cells(intRow,16).Select
            .Cells(intRow,16).Value="change_pct_yoy("& StrSeriesId1 & ")"
            .Cells(intRow,16).Text="change_pct_yoy("& StrSeriesId1 & ")"
            .Cells(intRow+1,16).Select
           ' Call wndEXCEL7.Keys("change_pct_yoy("& StrSeriesId1 & ")")
            'Call wndEXCEL7.Keys("[Enter]")
          End if 
         set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
         ''Compute
         Call netUIHWND.Click(593, 112)
         
         ''Mark Good
          Delay 1000,"Mark Good..."
          With objSTPXls
            With .WorkSheets(STPSheetName)
                 .Cells.Select
            End With
          End With
          Call netUIHWND.Click(32, 92)
          
        ''Upload Series
        Call netUIHWND.Click(131, 69)
        'Delay 85000 , "Uploading.."
        
        ''Waiting for Msgbox
        strTemp="WPFObject(""PART_ContainerContent"")"
        Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)._
          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Information"", 1)",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""FloatingContainerBorder"")",600000)._
          Waitchild("WPFObject(""FloatingContainerBackground"")",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""FloatingContainerBody"")",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""PART_ContainerContent"")",600000)
          
      If File.Exists= True Then
        SYS.Keys "[Enter]"
        End If
        
        ''Question Msgbox
        Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",60000)._
          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Question"", 1)",60000)._
          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
          Waitchild("WPFObject(""FloatingContainerBorder"")",60000)._
          Waitchild("WPFObject(""FloatingContainerBackground"")",60000)._
          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
          Waitchild("WPFObject(""FloatingContainerBody"")",60000)._
          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
          Waitchild("WPFObject(""PART_ContainerContent"")",60000)
        If File.Exists Then
          Sys.Keys "N"
        End If
              'Refresh Series
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
                Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
                Call netUIHWND.Click(296, 72)
                Call sExcelFullHistory
               .Cells(intlastRow,lastColumn).Select

          End With
        End With
        
        End With
      End With
      
       ' checking division
      With objSTPXls
       With .WorkSheets(STPSheetName)
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          If isDate(strText)  then
           If IsEmpty(.UsedRange.Cells(intlastrow, inti).Value) = False AND (.UsedRange.Cells(intlastrow, inti).Text) <> "" Then           
             If IsEmpty(.UsedRange.Cells(intlastrow, inti+1).Value) = False AND (.UsedRange.Cells(intlastrow, inti+1).Text) <> "" Then
              intFirst=.UsedRange.Cells(intlastrow, inti).Value
              intSecond=.UsedRange.Cells(intlastrow, inti+1).Value
              If .UsedRange.Cells(introw, inti).Value = Round(((intFirst-intSecond)/intSecond)*100,8) then
                blnFlag=True
              Else
                blnFlag=False
                Exit For
              End If
             End If
            End  If             
          End if 
       Next
         End With
      End With
      
      If blnFlag=True then
      strTCRemarks = "Checked for computing values:change_pct_yoy"
      End If
      
      If blnFlag=False then
      strTCRemarks = "change_pct_yoy failed at" & inti & "column"
      strTestCaseResult="FAIL"
      End If
      
        objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
        For i=0 to ubound(objArray)
          log.Message objArray(i).FullName
          set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*RUN*",1,True)
          If oSTP_ExcelObj.Exists = True Then
          Else
            objArray(i).Close
          End If
        Next
        Delay(5000)
      'Set objSTPXls = Nothing
      Call SClosesource()
      'Call Aliases.EdgeClient.HwndSource_RibbonWindow.RibbonWindow.ContentControl.Grid.Grid.ContentControl.Grid.ContentControl.PART_ContainerContent.BarManager.DockPanel.DockLayoutManager.LayoutGroup.LayoutPanel.Click(1293, 14)
End Sub 


Sub sUpdateTimepoints(strParameters)
'Sub sUpdateTimepoints

On Error Resume Next

  Dim STPSheetName,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,i,FilePath,File
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strTimepoints = getSplitValue(strParameters,"Timepoints")
  strExcelNumber = getSplitValue(strParameters,"ExcelNumber")
  strExcelNumber = Cint(strExcelNumber)
'    STPSheetName="A1_1"
'    STP="Test Source 1"
'    strTestDataFile="YYY-Automation-Test Source 1"
'    strTimepoints="5"


    
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
     'msgbox FilePath
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        Delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
        For r = 1 To .UsedRange.Rows.Count
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
           intlastRow=r
           Exit For
          End  If 
        Next
        intlastRow=intlastRow-1
        inti=3
        lastColumn=.UsedRange.Columns.Count
         For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          If isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
'        if strStartcolumn <> lastColumn AND strStartcolumn < lastColumn then
'        .Cells(intlastRow,strStartcolumn).Value=strTimepoints-1
'        End if 
        strStartcolumn=strStartcolumn+1
        .Cells(intlastRow,strStartcolumn).Select
        For Point = 0 to 6 
          .Cells(intlastRow,strStartcolumn+Point).Value=strTimepoints
          strTimepoints= strTimepoints+1
        Next
       '.Cells(intlastRow,strStartcolumn).Value=strTimepoints-1        
        Delay 2000
    
       'Mark Good 
      Call sClicKMarkGood(strExcelNumber,strTestDataFile) 
      Delay 5000, "Please wait"
   
      'Upload Series   
       Call sClickUpload(strExcelNumber,strTestDataFile)
       Delay 5000, "Please wait"

      
       'Click on Information 
       Call sClickonInformation(strExcelNumber,"No")  
      
             
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
                'Refresh Series
                Delay 200
                Call sClickRefresh(strExcelNumber,strTestDataFile)
                Delay 2000
                Call sExcelFullHistory
                .Cells(intlastRow,strStartcolumn).Select
          End With
        End With
  
    End With
  End With 
  log.Message "Updated Timepoints Successfully " 
  strTCRemarks = "Updated Timepoints Successfully"
  'msgbox strTCRemarks
  
  'objSTPXls.Close
    'objSTPXls.Close

  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*RUN*",1,True)
    If oSTP_ExcelObj.Exists = True Then
    Else
      objArray(i).Close
    End If
  Next
  Delay(5000)
  'Set objSTPXls = Nothing
  Call SClosesource()
End Sub 

Sub sDeleteTimepoints(strParameters)

On Error Resume Next

  Dim STPSheetName,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,i,FilePath,File
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strTimepoints = getSplitValue(strParameters,"Timepoints")
  strExcelNumber = getSplitValue(strParameters,"ExcelNumber")
  strExcelNumber = Cint(strExcelNumber)  

    
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
        For r = 1 To .UsedRange.Rows.Count
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
           intlastRow=r
           Exit For
          End  If 
        Next
        intlastRow=intlastRow-1
        inti=3
        lastColumn=.UsedRange.Columns.Count
        For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          If isDate(strText) then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         
         'Select First TimePoint 
         Delay 500
         .Cells(intlastRow,strStartcolumn+1).Select 
         Delay 500
        'Click on DeletValue and Mark Good Buttons
         Call sClickDeletValue(strExcelNumber,strTestDataFile)
         Delay 2000
         Call sClicKMarkGood(strExcelNumber,strTestDataFile) 
         Delay 2000
          
         'Select SecondTimePoint 
         Delay 500
        .Cells(intlastRow,strStartcolumn+2).Select
         Delay 500
         'Click on DeletValue and Mark Good Buttons
         Call sClickDeletValue(strExcelNumber,strTestDataFile)
         Delay 2000
         Call sClicKMarkGood(strExcelNumber,strTestDataFile) 
         Delay 2000 ,"Mark Good..."        
          With objSTPXls
            With .WorkSheets(STPSheetName)
                 .Cells.Select
            End With
          End With

         'Mark Good 
         Call sClicKMarkGood(strExcelNumber,strTestDataFile) 
         Delay 2000 

       
        ''Upload Series
        
      Call sClickUpload(strExcelNumber,strTestDataFile)
       Delay 2000, "Please wait"

    'click on Information Window
    Call sClickonInformation(strExcelNumber,"No")  
      
     'Refresh Series
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
                Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
                Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
               'Click on Refresh
                Call sClickRefresh(strExcelNumber,strTestDataFile)
                Delay 2000
                Call sExcelFullHistory
                .Cells(intlastRow,strStartcolumn+1).Select       
          End With
        End With
        strTCRemarks = "Deleted Timepoints Successfully"
    End With
  End With 
  
  'objSTPXls.Close
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*RUN*",1,True)
    If oSTP_ExcelObj.Exists = True Then
    Else
      objArray(i).Close
    End If
  Next
  Delay 10000,"Pls Wait..."
  'Set objSTPXls = Nothing
  Call SClosesource()
End Sub 

Sub sUpdateSTPTimepoint(strParameters)
'Sub sUpdateSTPTimepoint
On Error Resume Next

  Dim STPSheetName,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,i,FilePath,File,strRequiredTCName
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strTimepoints = getSplitValue(strParameters,"Timepoints")  
  strExcelNumber = getSplitValue(strParameters,"ExcelNumber")
  strExcelNumber = Cint(strExcelNumber)
  
'  strRequiredTCName = "TC_Todo_11"
'    STPSheetName="A1_1"
'    STP="Test Source 1"
'    strTestDataFile="YYY-Automation-Test Source 1"
'    'strTimepoints= "5"
 
    
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      'msgbox FilePath
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With
   
    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
        For r = 1 To .UsedRange.Rows.Count
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
           intlastRow=r
           Exit For
          End  If 
        Next
        intlastRow=intlastRow-1
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          If isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
           .Cells(intlastRow,strStartcolumn).select
        Dim intcount
        Dim intDelCol,intj,strNewTimepoints, intCol,strStartcolumnNew
        intcount=0
        strNewTimepoints=0
'      If Ucase(Trim(strRequiredTCName))=Ucase(Trim("TC_Todo_11")) Then 
'        strTimepoints = getSplitValue(strParameters,"Timepoints")
'         'strTimepoints =5
'         'strStartcolumnNew=strStartcolumn+1
'        .Cells(intlastRow,strStartcolumn).Select
'        .Cells(intlastRow,strStartcolumn).Value=strTimepoints
'        .Cells(intlastRow,strStartcolumn+1).Value=strTimepoints
'        
'      End IF    
         
        
                
        For intj= strStartColumn to lastColumn
          If .Cells(intlastRow,intj).Value=5 then
            'Modify two existing values
            .Cells(intlastRow,intj).Select
            .Cells(intlastRow,intj).Value = 11
            .Cells(intlastRow,intj+1).Select
            .Cells(intlastRow,intj+1).Value = 12
            'Delete two existing values            
            .Cells(intlastRow,intj+2).Select
            'Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile1 &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
            'Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
            'Call netUIHWND.Click(247, 111)
            
            'Click on Delet Value
             Call sClickDeletValue(strExcelNumber,strTestDataFile)
            .Cells(intlastRow,intj+3).Select
             Call sClickDeletValue(strExcelNumber,strTestDataFile)
            'Call netUIHWND.Click(247, 111)
            
            'Add two non-zero values in empty cells 
            .Cells(intlastRow,intj+6).Select
            .Cells(intlastRow,intj+6).Value = 20
            .Cells(intlastRow,intj+7).Select
            .Cells(intlastRow,intj+7).Value = 21
            'Add two zero values in empty cells 
            .Cells(intlastRow,intj+8).Select
            .Cells(intlastRow,intj+8).Value = 0
            .Cells(intlastRow,intj+9).Select
            .Cells(intlastRow,intj+9).Value = 0            
            Exit For            
          End If
        Next
'        For intj= (strStartcolumn) to strStartcolumn+4 
'          If IsEmpty(.UsedRange.Cells(intlastRow, intj).Value) = True AND (.UsedRange.Cells(r, intj).Text) ="" Then
'            .Cells(intlastRow,intj).Select
'            .Cells(intlastRow,intj).Value=strNewTimepoints
'            strNewTimepoints=strNewTimepoints + 1
'          Else
'             If intcount=0 then
'             intDelCol=intj
'             Else 
'              .Cells(intlastRow,intj).Value=strTimepoints
'               strTimepoints=strTimepoints+1
'             End if
'             intcount=intcount+1 
'          End If  
'        Next
'        .Cells(intlastRow,intDelCol).select
'        Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
'        Call netUIHWND.Click(247, 111)
'        Delay(1000)
'        Call netUIHWND.Click(53, 93)
        ''Mark Good
        Delay 1000,"Mark Good..."
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
          End With
        End With
        
        
'        Call netUIHWND.Click(32, 92)

          
        ''Upload Series
'        Call netUIHWND.Click(131, 69)
        'Delay 85000 , "Uploading.."
        
'        Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,600000)
'        strTemp=Sys.Process("EXCEL", 2).Window("#32770", "Warning", 1)
'        Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,600000)
'        If File.Exists Then
'          File.Window("Button", "&No", 2).click
'        End if 
        
        ''Waiting for Msgbox
'        Set File = Sys.Process("EXCEL", 2)._
'          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)._
'          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Information"", 1)",600000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
'          Waitchild("WPFObject(""FloatingContainerBorder"")",600000)._
'          Waitchild("WPFObject(""FloatingContainerBackground"")",600000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
'          Waitchild("WPFObject(""FloatingContainerBody"")",600000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
'          Waitchild("WPFObject(""PART_ContainerContent"")",600000)

' Set File = Sys.Process("EXCEL", 2)._
'          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",30000)._
'          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Information"", 1)",30000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",30000)._
'          Waitchild("WPFObject(""PART_InactiveBorder"")",30000)
'          
'        If File.Exists Then
'          SYS.Keys "[Enter]"
'        End If
'        
'        ''Question Msgbox
''        Set File = Sys.Process("EXCEL", 2)._
''          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",60000)._
''          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Question"", 1)",60000)._
''          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
''          Waitchild("WPFObject(""FloatingContainerBorder"")",60000)._
''          Waitchild("WPFObject(""FloatingContainerBackground"")",60000)._
''          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
''          Waitchild("WPFObject(""FloatingContainerBody"")",60000)._
''          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
''          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
''          Waitchild("WPFObject(""PART_ContainerContent"")",60000)
'
'  Set File = Sys.Process("EXCEL", 2)._
'          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",30000)._
'          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Question"", 1)",30000)._
'          Waitchild("WPFObject(""Grid"", """", 1)",30000)._
'          Waitchild("WPFObject(""PART_InactiveBorder"")",30000)
'          
'          
'        If File.Exists Then
'          Sys.Keys "N"
'        End If


       'Mark Good 
      Call sClicKMarkGood(strExcelNumber,strTestDataFile) 
      Delay 5000, "Please wait"
   
      'Upload Series   
       Call sClickUpload(strExcelNumber,strTestDataFile)
       Delay 5000, "Please wait"

      
       'Click on Information 
       Call sClickonInformation(strExcelNumber,"No")  

          
              'Refresh Series
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
             '  Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile1 &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
                'Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
               ' Call netUIHWND.Click(296, 72)
               
                Delay 200
                Call sClickRefresh(strExcelNumber,strTestDataFile)
                Delay 2000               
                Call sExcelFullHistory
                .Cells(intlastRow,intj).Select
          End With
        End With
  
    End With
  End With 
  strTCRemarks = "Updated STP Timepoints Successfully"
  log.Message "Updated STP Timepoints Successfully " 

  
  'objSTPXls.Close
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    Set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*RUN*",1,True)
    If oSTP_ExcelObj.Exists = True Then
    Else
      objArray(i).Close
    End If
  Next
  Delay(5000)
  Delay 10000,"Pls Wait..."
'  Set objSTPXls = Nothing
  Call SClosesource()
 

End Sub


Sub sTestCreateSeriesTimePoints()

On Error Resume Next

  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick
  Dim strEndSeriesColumn,intTargetRow,File
  
  strStartcolumn=0
'  STP= getSplitValue(strParameters,"STP") 
'  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
'  STPSheetName= getSplitValue(strParameters,"STPSheetName")
'  strSeriesName = getSplitValue(strParameters,"Series Name")
'  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
'  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
'  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
'  strSeriesType =  getSplitValue(strParameters,"Series Type")
'  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
'  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
'  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
'  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
'  strUnitType = getSplitValue(strParameters,"Unit Type") 
'  strTimepoints = getSplitValue(strParameters,"Timepoints")

  STPSheetName="A1_1"
  STP="Source"
  strTestDataFile="YYY-Automation_Benchmark-Source"
  strSeriesName="test-series"
  strSourceSeriesName="test-series"
  strSeriesSourceCode="test-series"
  strSeriesStatus="T"
  strSeriesType="Key"
  strSeriousCountry="YYY"
  strOutputUnit="NA"
  strSeriesNature="R"
'  strSeriesFreq="A1"
  strSourceUnit="NA"
  strUnitType="%"
  strTimepoints="8"
    
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
  
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
        For r = 1 To .UsedRange.Rows.Count
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
           intlastRow=r
           Exit For
          End  If 
        Next
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          If UCASE(strText)=UCase("Series Name") then 
          .Cells(intlastRow,inti).Value=strSeriesName
          ElseIf UCASE(strText)=UCase("Source Series Name") then 
          .Cells(intlastRow,inti).Value=strSourceSeriesName
          ElseIf UCASE(strText)=UCase("Series Source Code") then 
          .Cells(intlastRow,inti).Value=strSeriesSourceCode
          ElseIf UCASE(strText)=UCase("Series Status") then 
          .Cells(intlastRow,inti).Value=strSeriesStatus
          ElseIf UCASE(strText)=UCase("Series Type") then 
          .Cells(intlastRow,inti).Value=strSeriesType
          ElseIf UCASE(strText)=UCase("Series Country") then 
          .Cells(intlastRow,inti).Value=strSeriousCountry
          ElseIf UCASE(strText)=UCase("Output Unit") then 
          .Cells(intlastRow,inti).Value=strOutputUnit
          ElseIf UCASE(strText)=UCase("Series Nature") then 
          .Cells(intlastRow,inti).Value=strSeriesNature
          ElseIf UCASE(strText)=UCase("Series Freq") then 
          .Cells(intlastRow,inti).Value=strSeriesFreq
          ElseIf UCASE(strText)=UCase("Source Unit") then 
          .Cells(intlastRow,inti).Value=strSourceUnit
          ElseIf UCASE(strText)=UCase("Unit Type") then 
              .Cells(intlastRow,inti).Value=strUnitType  
          ElseIf isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         
          Delay 15000 , "Creating a new series.."
          
          ''Copy the Series for 1000 Cells 
        strEndSeriesColumn=strStartcolumn-3
        strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
        Delay(5000)
        
        With .Sheets(STPSheetName).Select
        End With
        With .WorkSheets(STPSheetName)
           .Range("C" & intlastRow & ":" & strEndSeriesColumn & intlastRow ).Select
             'Const xlFillDefault = 0
             intTargetRow=intlastRow + 2
            .Range("C" & intlastRow & ":" &strEndSeriesColumn & intlastRow).AutoFill  .Range("C" & intlastRow & ":" & strEndSeriesColumn & intTargetRow), xlFillDefault
        End With
          
          Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
          
          ''Mark Good
          Delay 3000,"Mark Good..."
          With objSTPXls
            With .WorkSheets(STPSheetName)
                 .Cells.Select
            End With
          End With
          
          delay(6000)
          
          Call netUIHWND.Click(32, 92)
                         
          ''Upload Series
          Call netUIHWND.Click(131, 71)
          Delay 95000 , "Uploading Series.."

        strTemp="WPFObject(""PART_ContainerContent"")"
        Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,40000)
        If File.Exists Then
          File.Window("Button", "OK", 1).Click
        End If
        
        ''Question Msgbox
        strTemp="WPFObject(""PART_ContainerContent"")"
        Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,25000)
        If File.Exists Then
          File.Keys "N"
        End If
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
                Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
                Call netUIHWND.Click(296, 72)
                Call sExcelFullHistory
          End With
        End With
    End With
  End With 
  log.Message  "New Series Created"
  strTCRemarks =  "Created Series for STP" 
  strTestCaseResult="PASS"
'  
'   Dim tableLayoutPanel
'  Dim tableLayoutPanel2
'  Dim hostedTextBoxBase
'  Call Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND.Click(205, 62)
'  Delay(20000)
'  Set tableLayoutPanel = Aliases.EXCEL3.AddDateForm.tableLayoutPanel1
'  Dim objEdgeDate,objTemp, objStrClose
'  set objEdgeDate= Sys.Process("EXCEL", 2)
'  strTemp="WinFormsObject(""AddDateForm"")"
'  Set objTemp=objEdgeDate.FindChild("Name",strTemp,5)
'  If objTemp.Exists = TRUE then
'    set objStrClose= Sys.Process("EXCEL", 2).WinFormsObject("AddDateForm").WinFormsObject("tableLayoutPanel1").WinFormsObject("panel10").WinFormsObject("tableLayoutPanel3").WinFormsObject("pastButton")
'    objStrClose.Click
'    Delay(10000)
'    Sys.Process("EXCEL", 2).WinFormsObject("AddDateForm").WinFormsObject("tableLayoutPanel1").WinFormsObject("panel10").WinFormsObject("tableLayoutPanel3").WinFormsObject("pastEditor").Keys(10)
'    Delay(10000)
'    Sys.Process("EXCEL", 2).WinFormsObject("AddDateForm").WinFormsObject("tableLayoutPanel1").WinFormsObject("tableLayoutPanel2").WinFormsObject("okButton").Click
'     Delay(10000)
'  End If
'  Delay(10000)
  lastColumn=.UsedRange.Columns.Count
   With objSTPXls
    With .Sheets(STPSheetName).Select
    End With      
    With .WorkSheets(STPSheetName)
        intcount=0
        if strStartcolumn=0 then
        End if
        For intj= (strStartcolumn + 1) to lastColumn 
          If IsEmpty(.UsedRange.Cells(intlastRow, intj).Value) = True AND (.UsedRange.Cells(r, intj).Text) ="" Then
            if intcount<=10 then
             .Cells(intlastRow,intj).Select
              .Cells(intlastRow,intj).Value=strTimepoints
              strTimepoints=strTimepoints + 1
            Else
              Exit For
            End if 
            intcount=intcount+1 
          End If  
        Next
    End With
        Dim strStartColumnName,StrEndColumnName
        strStartColumnName=strStartcolumn + 1
        strStartColumnName=GetColumnName(strStartColumnName)
        StrEndColumnName=GetColumnName(lastColumn)
        
        ''Copy the Series for 1000 Cells 
    With objSTPXls  
        With .Sheets(STPSheetName).Select
        End With
        With .WorkSheets(STPSheetName)
           .Range(strStartColumnName & intlastRow & ":" & StrEndColumnName & intlastRow ).Select
             'Const xlFillDefault = 0
             intTargetRow=intlastRow + 2
            .Range(strStartColumnName & intlastRow & ":" & StrEndColumnName & intlastRow).AutoFill  .Range(strStartColumnName & intlastRow & ":" & StrEndColumnName & intTargetRow), xlFillDefault
        End With
        Delay(8000)
    
        Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
        ''Upload Series
        Call netUIHWND.Click(131, 69)
        Delay 90000 , "Uploading.."
        
        ''Waiting for Msgbox
        strTemp="WPFObject(""PART_ContainerContent"")"
        Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,40000)
        If File.Exists Then
          File.Window("Button", "OK", 1).Click
        End If
        
        ''Question Msgbox
        strTemp="WPFObject(""PART_ContainerContent"")"
        Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,25000)
        If File.Exists Then
          File.Keys "N"
        End If
              'Refresh Series
        With objSTPXls
          With .WorkSheets(STPSheetName)                
                Set wndEXCEL7 = Aliases.EXCEL.wndXLMAIN.XLDESK.wndEXCEL7
'                .Cells(intlastRow,1).Select
'                Call wndEXCEL7.Keys("^c")
              .Cells(intlastRow,lastColumn).Select
          End With
        End With
         strTCRemarks =  "Created Series and Timepoints for STP" 
    End With
  END With
  objSTPXls.Close
  Delay(10000)
  Set netUIHWND=Nothing
  Set strStartcolumn=""
  Call SClosesource()
End Sub 

Function GetColumnName(colNum)
    Dim d 
    Dim m 
    Dim name 
    d = colNum
    name = ""
    Do While (d > 0)
        m = (d - 1) Mod 26
        name = Chr(65 + m) + name
        d = Int((d - m) / 26)
    Loop
    GetColumnName = name
End Function



Sub sTestCreateSeries()

On Error Resume Next

  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,File
  
  strStartcolumn=0
'  STP= getSplitValue(strParameters,"STP") 
'  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
'  STPSheetName= getSplitValue(strParameters,"STPSheetName")
'  strSeriesName = getSplitValue(strParameters,"Series Name")
'  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
'  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
'  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
'  strSeriesType =  getSplitValue(strParameters,"Series Type")
'  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
'  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
'  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
'  strSeriesFreq = getSplitValue(strParameters,"Series Freq")
'  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
'  strUnitType = getSplitValue(strParameters,"Unit Type") 
'  strTimepoints = getSplitValue(strParameters,"Timepoints")
Const xlFillDefault = 0
  STPSheetName="A1_1"
  STP="Source"
  strTestDataFile="YYY-Automation_Benchmark-Source"
  strSeriesName="test-series"
  strSourceSeriesName="test-series"
  strSeriesSourceCode="test-series"
  strSeriesStatus="T"
  strSeriesType="Key"
  strSeriousCountry="YYY"
  strOutputUnit="NA"
  strSeriesNature="R"
'  strSeriesFreq="A1"
  strSourceUnit="NA"
  strUnitType="%"
  strTimepoints="8"
'    
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  FilePath="C:\Users\spoonguzhali\Documents\Edge\EdgeAddinStorage\2015-10-06\YYY-Automation_Benchmark-Source.xlsx"
  Delay(2000)
  
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
        For r = 1 To .UsedRange.Rows.Count
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
           intlastRow=r
           Exit For
          End  If 
        Next
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          If UCASE(strText)=UCase("Series Name") then 
          .Cells(intlastRow,inti).Value=strSeriesName
          ElseIf UCASE(strText)=UCase("Source Series Name") then 
          .Cells(intlastRow,inti).Value=strSourceSeriesName
          ElseIf UCASE(strText)=UCase("Series Source Code") then 
          .Cells(intlastRow,inti).Value=strSeriesSourceCode
          ElseIf UCASE(strText)=UCase("Series Status") then 
          .Cells(intlastRow,inti).Value=strSeriesStatus
          ElseIf UCASE(strText)=UCase("Series Type") then 
          .Cells(intlastRow,inti).Value=strSeriesType
          ElseIf UCASE(strText)=UCase("Series Country") then 
          .Cells(intlastRow,inti).Value=strSeriousCountry
          ElseIf UCASE(strText)=UCase("Output Unit") then 
          .Cells(intlastRow,inti).Value=strOutputUnit
          ElseIf UCASE(strText)=UCase("Series Nature") then 
          .Cells(intlastRow,inti).Value=strSeriesNature
          ElseIf UCASE(strText)=UCase("Series Freq") then 
          .Cells(intlastRow,inti).Value=strSeriesFreq
          ElseIf UCASE(strText)=UCase("Source Unit") then 
          .Cells(intlastRow,inti).Value=strSourceUnit
          ElseIf UCASE(strText)=UCase("Unit Type") then 
              .Cells(intlastRow,inti).Value=strUnitType  
          ElseIf isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         
          Delay 15000 , "Creating a new series.."
          
          
          ''Copy the Series for 1000 Cells 
        strEndSeriesColumn=strStartcolumn-3
        strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
        Delay(5000)
        
        With .Sheets(STPSheetName).Select
        End With
        With .WorkSheets(STPSheetName)
           .Range("C" & intlastRow & ":" & strEndSeriesColumn & intlastRow ).Select
             'Const xlFillDefault = 0
             intTargetRow=intlastRow + 2
            .Range("C" & intlastRow & ":" &strEndSeriesColumn & intlastRow).AutoFill  .Range("C" & intlastRow & ":" & strEndSeriesColumn & intTargetRow), xlFillDefault
        End With
          
          
          Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
          
          ''Mark Good
          Delay 3000,"Mark Good..."
          With objSTPXls
            With .WorkSheets(STPSheetName)
                 .Cells.Select
            End With
          End With
          Call netUIHWND.Click(32, 92)
                         
          ''Upload Series
          Call netUIHWND.Click(131, 71)
          
        Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)._
          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Information"", 1)",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""FloatingContainerBorder"")",600000)._
          Waitchild("WPFObject(""FloatingContainerBackground"")",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""FloatingContainerBody"")",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""PART_ContainerContent"")",600000)
          
      If File.Exists= True Then
        SYS.Keys "[Enter]"
        End If
        
        ''Question Msgbox
        strTemp="WPFObject(""PART_ContainerContent"")"
        Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,50000)
        If File.Exists Then
          File.Keys "N"
        End If
        
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
                Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
                Call netUIHWND.Click(296, 72)
                Call sExcelFullHistory
          End With
        End With
    End With
  End With 
  log.Message  "New Series Created"
  strTCRemarks =  "Created Series for STP" 
  strTestCaseResult="PASS"
  
'   lastColumn=.UsedRange.Columns.Count
'   
'  With objSTPXls
'    With .Sheets(STPSheetName).Select
'    End With      
'    With .WorkSheets(STPSheetName)
'        intcount=0
'        if strStartcolumn=0 then
'        End if
'        intj= (strStartcolumn + 1)
'        For intj= intj to lastColumn 
'          If IsEmpty(.UsedRange.Cells(intlastRow, intj).Value) = True AND (.UsedRange.Cells(r, intj).Text) ="" Then
'            if intcount<=5 then
'              .Cells(intlastRow,intj).Select
'              .Cells(intlastRow,intj).Text=100
'              .Cells(intlastRow,intj).Value=100
'              strTimepoints=strTimepoints + 1
'            Else
'              Exit For
'            End if 
'            intcount=intcount+1 
'          End If  
'        Next
'        
        
        lastColumn=.UsedRange.Columns.Count
'   With objSTPXls
'    With .Sheets(STPSheetName).Select
'    End With      
'    With .WorkSheets(STPSheetName)
'        intcount=0
'        if strStartcolumn=0 then
'        End if
'        For intj= (strStartcolumn + 1) to lastColumn 
'          If IsEmpty(.UsedRange.Cells(intlastRow, intj).Value) = True AND (.UsedRange.Cells(r, intj).Text) ="" Then
'            if intcount<=10 then
'             .Cells(intlastRow,intj).Select
'              .Cells(intlastRow,intj).Value=strTimepoints
'              strTimepoints=strTimepoints + 1
'            Else
'              Exit For
'            End if 
'            intcount=intcount+1 
'          End If  
'        Next
    With objSTPXls
      With .Sheets("A1_1").Select
      End With      
    With .WorkSheets("A1_1")
        intcount=0
        if strStartcolumn=0 then
        End if
        intj= (strStartcolumn + 1)
        For intj= intj to lastColumn 
          If IsEmpty(.UsedRange.Cells(intlastRow, intj).Value) = True AND (.UsedRange.Cells(r, intj).Text) ="" Then
            if intcount<=5 then
              .Cells(intlastRow,intj).Select
              .Cells(intlastRow,intj).Text=strTimepoints
              .Cells(intlastRow,intj).Value=strTimepoints
              strTimepoints=strTimepoints + 1
            Else
              Exit For
            End if 
            intcount=intcount+1 
          End If  
        Next
        Dim strStartColumnName,StrEndColumnName
        strStartColumnName=strStartcolumn + 1
        strStartColumnName=GetColumnName(strStartColumnName)
        StrEndColumnName=GetColumnName(lastColumn)
        
        ''Copy the Series for 1000 Cells 
   ' With objSTPXls  
        With .Sheets(STPSheetName).Select
        End With
        With .WorkSheets(STPSheetName)
           .Range(strStartColumnName & intlastRow & ":" & StrEndColumnName & intlastRow ).Select
             'Const xlFillDefault = 0
             intTargetRow=intlastRow + 2
            .Range(strStartColumnName & intlastRow & ":" & StrEndColumnName & intlastRow).AutoFill  .Range(strStartColumnName & intlastRow & ":" & StrEndColumnName & intTargetRow), xlFillDefault
        End With
'    
        Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
        If blnTimeRecorded = False Then
          Watch.Start
        End IF	

        ''Upload Series
        Call netUIHWND.Click(131, 69)
         
        Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)._
          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Information"", 1)",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""FloatingContainerBorder"")",600000)._
          Waitchild("WPFObject(""FloatingContainerBackground"")",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""FloatingContainerBody"")",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""PART_ContainerContent"")",600000)
          
      If File.Exists= True Then
        SYS.Keys "[Enter]"
        End If
         Watch.Stop
        blnTimeRecorded = True
        ''Question Msgbox
        strTemp="WPFObject(""PART_ContainerContent"")"
        Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,50000)
        If File.Exists Then
          File.Keys "N"
        End If
        Log.Message("Test1 finished. Execution time: " & Watch.Tostring)
        
              'Refresh Series
      With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
                Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
                Call netUIHWND.Click(296, 72)
                Call sExcelFullHistory
          End With
        End With
         strTCRemarks =  "Created NEW Series for STP" 
    End With
  End With 
'  objSTPXls.Close
'  Delay(10000)
'  Set netUIHWND=Nothing
'  Set strStartcolumn=""
'  Call SClosesource()
  Log.Message("Test1 finished. Execution time: " & Watch.Tostring)
End Sub 

Sub sCreateSeriesTimePoints(strParameters)
  
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,strStartRow,File
  On Error Resume Next
  
  strStartcolumn=0

  Const xlFillDefault = 0
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strForeCast= getSplitValue(strParameters,"ForeCast")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")
'  strExcelNumber = getSplitValue(strParameters,"ExcelNumber")
' strExcelNumber =Cint(strExcelNumber)

'  STPSheetName="A1_1"
'  STP="STP2"
'  strTestDataFile="YYY-L_T-STP2"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
''  strSeriesFreq="A1"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="2000"
'   
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
  'FilePath="C:\Users\spoonguzhali\Desktop\EdgeAddinStorage\2015-10-08\YYY-Automation_Benchmark-Source.xlsx"
  Set objSTPXls=GetObject(FilePath)
  'msgbox FilePath
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
        
        r=1
         If r=1 AND IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then
             intlastRow=r
             strStartRow=r
             intlastRowSTP=r
             strStartRowSTP=r
         End If
        Do While (r < .UsedRange.Rows.Count)        
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then
            If IsEmpty(.UsedRange.Cells(r-1, 1).Value) = False AND (.UsedRange.Cells(r-1, 1).Text) <>"" Then           
             intlastRow=r
             strStartRow=r
             intlastRowSTP=r
             strStartRowSTP=r
             'msgbox r
             Exit Do
            Else
             r=r-1
            End If            
          Else          
           r = r+100   
          End  If
        Loop  

        inti=3
        lastColumn=.UsedRange.Columns.Count

       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          If UCASE(strText)=UCase("Series Name") then 
          .Cells(intlastRow,inti).Value=strSeriesName
          ElseIf UCASE(strText)=UCase("Source Series Name") then 
          .Cells(intlastRow,inti).Value=strSourceSeriesName
          ElseIf UCASE(strText)=UCase("Series Source Code") then 
          .Cells(intlastRow,inti).Value=strSeriesSourceCode
           ElseIf UCASE(strText)=UCase("ForeCast") then 
          .Cells(intlastRow,inti).Value=strForeCast 
          ElseIf UCASE(strText)=UCase("Series Status") then 
          .Cells(intlastRow,inti).Value=strSeriesStatus
          ElseIf UCASE(strText)=UCase("Series Type") then 
          .Cells(intlastRow,inti).Value=strSeriesType
          ElseIf UCASE(strText)=UCase("Series Country") then 
          .Cells(intlastRow,inti).Value=strSeriousCountry
          ElseIf UCASE(strText)=UCase("Output Unit") then 
          .Cells(intlastRow,inti).Value=strOutputUnit
          ElseIf UCASE(strText)=UCase("Series Nature") then 
          .Cells(intlastRow,inti).Value=strSeriesNature
          ElseIf UCASE(strText)=UCase("Series Freq") then 
          .Cells(intlastRow,inti).Value=strSeriesFreq
          ElseIf UCASE(strText)=UCase("Source Unit") then 
          .Cells(intlastRow,inti).Value=strSourceUnit
          ElseIf UCASE(strText)=UCase("Unit Type") then 
              .Cells(intlastRow,inti).Value=strUnitType  
          ElseIf isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         Delay 5000 , "Creating a new series.."
          
          ''Copy the Series for 2000 Cells 
        strEndSeriesColumn=strStartcolumn-3
        strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
        Delay(5000)
        
        With objSTPXls
          With .Sheets(STPSheetName).Select
          End With      
          With .WorkSheets(STPSheetName)
             .Range("C" & intlastRow & ":" & strEndSeriesColumn & intlastRow ).Select               
               intTargetRow=intlastRow + 1999
              .Range("C" & intlastRow & ":" &strEndSeriesColumn & intlastRow).AutoFill  .Range("C" & intlastRow & ":" & strEndSeriesColumn & intTargetRow), xlFillDefault
          End With
        END WITH
      
          
          
'         
'Updted Script to Identify Mark Good object and Click on the same:
      Delay 3000,"Click on Mark Good..."
      Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
         With objSTPXls
           With .WorkSheets(STPSheetName)
                .Cells.Select
                Sys.Keys "~YY3"  
            End With
          End With
          
          'Click On Mrk Good
          Call sClicKMarkGood(2,strTestDataFile)
          Call netUIHWND.Click(589, 42)     
          Call netUIHWND.Click(589, 42)      
          Delay 200
          Call NetUIHWND.Click(41, 87)
          Call NetUIHWND.Click(41, 87)

  End With
  End With 
  

End Sub 

Sub sUpload20(strParameters)

Dim intUploadCount

intUploadCount = getSplitValue(strParameters,"UploadCount")
For intUCount = 1 to intUploadCount
 Call sUpload201(strParameters,intUCount)
Next

strTCRemarks = intUploadCount &" uploads have been performed" & "<br />" & "20K timepoints for each upload."

End Sub

Sub sUpload201(strParameters,intUCount)

  
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,strStartRow,intFirstRow,strTimepts
  Dim Watchstr,Watchstr1,Time1,Time2,Watch1,File
  Dim CreateSTP,PropArray,ValuesArray,objTemp,ReplaceFile,intUploadCount
  On Error Resume Next
  
  strStartcolumn=0

  Const xlFillDefault = 0
  
  blnTimeRecorded = False
  
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  'STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  'strTimepoints = getSplitValue(strParameters,"Timepoints")
  intUploadCount = getSplitValue(strParameters,"UploadCount")
   
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 2,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  ' FilePath="C:\Users\spoonguzhali\Desktop\EdgeAddinStorage\2015-10-09\YYY-Automation_Benchmark-DM.xlsx"
  Delay(2000)
  
 
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      intFirstRow=4 
      inti=3
      lastColumn=.UsedRange.Columns.Count
      lastColumn = .Cells(1, .Columns.Count).End(xlToLeft).Column
      
      
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intFirstRow,inti).Select
          If isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
        strTimepoints = .Cells(4,26).Text
        strTimepoints= strTimepoints + 1
        strEndSeriesColumn=strStartcolumn-3
        strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
        Delay(1000)   
  
    strEndSeriesColumn=strStartcolumn-3
    strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
    Delay(1000)
  
    Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
    Set objSTPXls=GetObject(FilePath)     

    With .Sheets(STPSheetName).Select
    End With      
   With .WorkSheets(STPSheetName)
        intcount=0
        if strStartcolumn=0 then
        End if
        intj= (strStartcolumn + 1)
        For intj= intj to lastColumn 
            if intcount<=9 then
              .Cells(intFirstRow,intj).Select
              .Cells(intFirstRow,intj).Text=strTimepoints
              .Cells(intFirstRow,intj).Value=strTimepoints
              'strTimepoints=strTimepoints + 1
            Else
              Exit For
            End if 
            intcount=intcount+1 
        Next
    End with    
    
      Dim strStartColumnName,StrEndColumnName
      strStartColumnName=strStartcolumn + 1
      strStartColumnName=GetColumnName(strStartColumnName)
      StrEndColumnName=GetColumnName(lastColumn)
        
      ''Copy the Series for 100 Cells 
 
      With .Sheets(STPSheetName).Select
      End With
      With .WorkSheets(STPSheetName)
         .Range(strStartColumnName & intFirstRow & ":" & StrEndColumnName & intFirstRow ).Select
           intTargetRow=intlastRow + 2003
          .Range(strStartColumnName & intFirstRow & ":" & StrEndColumnName & intFirstRow).AutoFill  .Range(strStartColumnName & intFirstRow & ":" & StrEndColumnName & intTargetRow), xlFillDefault
      End With
  
    
      Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
      'Upload Series
     ' Call netUIHWND.Click(131, 69)
      Call netUIHWND.Click(124, 70)
      Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",3000000)._
          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Information"", 1)",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""FloatingContainerBorder"")",600000)._
          Waitchild("WPFObject(""FloatingContainerBackground"")",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""FloatingContainerBody"")",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""Grid"", """", 1)",600000)._
          Waitchild("WPFObject(""PART_ContainerContent"")",600000)
          
      If File.Exists= True Then
        SYS.Keys "[Enter]"        
      End If

      ''Question Msgbox
      strTemp="WPFObject(""PART_ContainerContent"")"
      Set File=Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("FloatingContainerBorder").WPFObject("FloatingContainerBackground").WPFObject("Grid", "", 1).WPFObject("FloatingContainerBody").WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WaitChild(strTemp,500000)
      log.Message(intUCount & "and" & intUploadCount)
      If File.Exists and cint(intUCount) <> cint(intUploadCount)  Then
        Sys.Keys "N"
      Else
        Sys.Keys "Y"
        Exit Sub
      End If
     
      'refresh
      Call netUIHWND.Click(296, 72)    

  strTemp = "WinFormsObject(""TimeRangePickerForm"")"
  Set CreateSTP=Sys.Process("EXCEL",2).WaitChild(strTemp,100000)
  If CreateSTP.Exists = True Then
    PropArray = Array("WndCaption", "Visible")
    ValuesArray = Array("Full History", True)
    Set objTemp = CreateSTP.FindChild(PropArray, ValuesArray, 50)
    'Delay (20000)
    If objTemp.Exists = True Then
      objTemp.Click
      log.Message "Selected Full History Radio button"
    Else
      log.Message "Full History Radio button not found"
    End If    

    PropArray = Array("WndCaption", "Visible")
    ValuesArray = Array("Open", True)
    Set objTemp = CreateSTP.FindChild(PropArray, ValuesArray, 10)
    Delay 5000,"Opening STP.. Pls wait.."
    If objTemp.Exists = True Then
      objTemp.Click
    End If

'    strTemp="WinFormsObject(""OpenButton"")"
'    Set objTemp = CreateSTP.FindChild(Name,strTemp,50)
'    If objTemp.Exists = True Then
'      objTemp.Click
'    End If


'    strTemp="WinFormsObject(""SelectFreqForm"")"
'    Set objTemp=Sys.Process("EXCEL",2).WaitChild(strTemp,0000)
'    If objTemp.Exists Then
'        strTemp="WinFormsObject(""radButton1"")"
'        Set objTemp=objTemp.FindChild("Name",strTemp,5)
'        If objTemp.Exists = True then
'          objTemp.Click
'        End If
'    End if
    
     Set ReplaceFile = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Warning"")",300000)._
          Waitchild("WPFObject(""CustomMessageBoxWindow"", ""Warning"", 1)",60000)._
          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
          Waitchild("WPFObject(""FloatingContainerBorder"")",60000)._
          Waitchild("WPFObject(""FloatingContainerBackground"")",60000)._
          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
          Waitchild("WPFObject(""FloatingContainerBody"")",60000)._
          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
          Waitchild("WPFObject(""Grid"", """", 1)",60000)._
          Waitchild("WPFObject(""PART_ContainerContent"")",60000)
    If ReplaceFile.Exists=True Then
      'ReplaceFile.Click
      Sys.Keys("Y")
    End If
    blnSTPfile=False
    'strTCRemarks = "STP file opened"
  Else
    log.Message "STP File not found"
    strTCRemarks="STP File not found"
    blnCriticalErrorFound = True
    strCriticalError = "Unable to find STP file"
    strTestCaseResult = "FAIL"
    blnSTPfile=True
    Call ExcelProcessKill
    Exit Sub
  End If

  Set CreateSTP=Nothing  
  Set objTemp=Nothing
          
         


  End With
  End With


End Sub


Sub sDM(strParameters)
'Sub sDM()
  
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,strStartRow,intFirstRow,strTimepts
  Dim Watchstr,Watchstr1,Time1,Time2,Watch1,File
  
  On Error Resume Next
  
  Watchstr=""
  Watchstr1=""
  iTestCaseFirstRow = 0

  Set Watch = HISUtils.StopWatch
  Set Watch1 = HISUtils.StopWatch
  Time1="12/12/2012"& " "& "00:00:00"
  Time1=aqConvert.StrToDateTime(Time1)
  Time2=Time1
  new_time=Time1
  
  strStartcolumn=0

  Const xlFillDefault = 0
  
  blnTimeRecorded = False
  
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  'STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 


''  STPSheetName="A1_1"
''  STP="DM"
''  strTestDataFile="YYY-Automation_STP1-DM"
''  strTimepoints="8"
'
'   
'  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 2,True)
'  For i=0 to ubound(objArray)
'    log.Message objArray(i).FullName
'    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
'    If oSTP_ExcelObj.Exists = True Then
'      strAliasName=objArray(i).mappedname
'      strFileName=oSTP_ExcelObj.WndCaption
'      If instr(strFileName,"Microsoft Excel")>0 then
'        strFileName=GetFileName(strFileName,"Microsoft Excel")
'      Else
'        strFileName=GetFileNameExcel13(strFileName," - Excel")
'      End If
'      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
'      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
'      log.Message FilePath
'      Exit For
'    Else
'      log.Message "STP file not found in " & objArray(i).FullName
'    End If
'  Next
'
'  Delay(2000)

 FilePath=aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")+ "\"+strTestDataFile +".xlsx"
 Set objSTPXls=GetObject(FilePath) 
 With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      intFirstRow=4 
      inti=3
      lastColumn=.UsedRange.Columns.Count
      lastColumn = .Cells(1, .Columns.Count).End(xlToLeft).Column
      
      
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intFirstRow,inti).Select
          If isDate(strText)  then
              strStartcolumn=inti+1
              strColumnName = strStartcolumn
              Exit For
          End if 
         Next 
         

       
        strTimepoint =  Cint(.Cells(4,strStartcolumn).Text)+1
        strEndSeriesColumn=strStartcolumn-3
        strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
        Delay(1000)   
  
    strEndSeriesColumn=strStartcolumn-3
    strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
    Delay(1000)
  

    Set objSTPXls=GetObject(FilePath)     

    With .Sheets(STPSheetName).Select
    End With      
   With .WorkSheets(STPSheetName)
        intcount=0
        if strStartcolumn=0 then
        End if       
        For intj= strStartcolumn to lastColumn 
            if intcount<=9 then
              .Cells(intFirstRow,strStartcolumn).Select
              .Cells(intFirstRow,strStartcolumn).Text=strTimepoint
              .Cells(intFirstRow,strStartcolumn).Value=strTimepoint
              strTimepoint=strTimepoint + 1
              strStartcolumn= (strStartcolumn + 1)
            Else
              Exit For
            End if 
            intcount=intcount+1 
        Next
    End with    
    
      Dim strStartColumnName,StrEndColumnName
      strStartColumnName=GetColumnName(strColumnName)
      StrEndColumnName=GetColumnName(lastColumn)
        
      ''Copy the Series for 100 Cells  
      With .Sheets(STPSheetName).Select
      End With
      With .WorkSheets(STPSheetName)
         .Range(strStartColumnName & intFirstRow & ":" & StrEndColumnName & intFirstRow ).Select
           intTargetRow=intlastRow + 103
          .Range(strStartColumnName & intFirstRow & ":" & StrEndColumnName & intFirstRow).AutoFill  .Range(strStartColumnName & intFirstRow & ":" & StrEndColumnName & intTargetRow), xlFillDefault
      End With
  
  
      Call sClickUpload(2,strTestDataFile)
   
     
      If blnTimeRecorded = False Then
          Watch.Start
          Log.Message("Start Execution time: "  & now)
      End IF    
      


    Set File = Sys.Process("EXCEL", 2).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",3000000)
    If File.Exists= True Then
        SYS.Keys "[Enter]"
        Watch.Stop
        blnTimeRecorded = True
      End If



      ''Question Msgbox
      strTemp="WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")"
      Set File=Sys.Process("EXCEL", 2).WaitChild(strTemp,60000)
      If File.Exists Then
        Sys.Keys "Y"
      End If
              
      Log.Message("Time taken : "  & Watch.Tostring)     
         
         strTCRemarks = strTCRemarks & "<br />" & "DM Execution Time"
         strTCRemarks = strTCRemarks & "  " & Watch.Tostring & " - uploaded a DM successfully"

  End With
  End With 
  
End Sub

sub sUpdateSTP(strParameters)
  Dim excel,netUIHWND,excel2,netUIHWND2
  Dim Watchstr,Watchstr1,Time1,Time2,Watch2,watch3,File
On Error Resume Next  

     strTestDataFile1=getSplitValue(strParameters,"TestDataFile1") 
     strTestDataFile2=getSplitValue(strParameters,"TestDataFile2") 

  Watchstr=""
  Watchstr1=""
  iTestCaseFirstRow = 0
    
  Watch2=""
  Watch3=""
  
  Set Watch2 = HISUtils.StopWatch
  Set Watch3 = HISUtils.StopWatch
  
  Time1="12/12/2012"& " "& "00:00:00"
  Time1=aqConvert.StrToDateTime(Time1)
  Time2=Time1
  new_time=Time1
  
  blnTimeRecorded = False



'  Modified set object Upload for Both the File
'Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile1 &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
Delay 10000
Set netUIHWND2 =  Sys.Process("EXCEL", 3).Window("XLMAIN", strTestDataFile2 &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)

 'Call netUIHWND.Click(139, 67)
'Call netUIHWND.Click(136, 73)
'Call netUIHWND.Click(326, 68)

Call sClickUpload(2,strTestDataFile)
  If blnTimeRecorded = False Then
    Watch2.Start
    Log.Message("Start Execution time: "  & now)
  End IF  
   
  
  'Delay 2000,"Pls Wait.."
'  Call sClickUpload(3,strTestDataFile)
  Call NetUIHWND.Click(589, 42)
  Call NetUIHWND.Click(589, 42)
  Delay 200
  Call NetUIHWND.Click(139, 67)
  If blnTimeRecorded = False Then
    Watch3.Start
    Log.Message("Start Execution time: "  & now)
  End IF 
  
   'Delay 10000,"Pls Wait.."
 ' strTemp="WPFObject(""PART_ContainerContent"")"
  Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)
  If File.Exists Then
    File.Click
     Set PicObj = Utils.Picture
     Set PicObj = Sys.Desktop.Picture
     PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
     picCount = picCount + 1     
     '    'SYS.Keys("O")       
     Set objOk = Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Information").WPFObject("CustomMessageBoxWindow", "Information", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_OK"")",10000)
     objOk.Click
'  
    Watch2.Stop
    blnTimeRecorded = True
    
  End If
   Log.Message("End First Execution time: "  & now)
   Log.Message("First STP finished. Execution time: " & Watch2.Tostring)
        
  ''Question Msgbox
 Set File = Sys.Process("EXCEL", 2).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",300000)
  If File.Exists Then
     '    'Sys.Keys "Y"
    Set objYes= Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_Yes"")",10000)
    objYes.Click

  End If
  
  
    
 ' strTemp="WPFObject(""PART_ContainerContent"")"
  Set File = Sys.Process("EXCEL", 3).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",300000)
  If File.Exists Then
    File.Click
     Set PicObj = Utils.Picture
     Set PicObj = Sys.Desktop.Picture
     PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
     picCount = picCount + 1    
      'SYS.Keys("O")
   
     Set objOk = Sys.Process("EXCEL", 3).WPFObject("HwndSource: CustomMessageBoxWindow", "Information").WPFObject("CustomMessageBoxWindow", "Information", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_OK"")",10000)
     objOk.Click
    Watch3.Stop
    blnTimeRecorded = True
    
  End If
  Log.Message("End Second Execution time: "  & now)
  Log.Message("Second STP finished. Execution time: " & Watch3.Tostring)
            
  ''Question Msgbox
 Set File = Sys.Process("EXCEL", 3).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",300000)
  If File.Exists Then
    'Sys.Keys "Y"
    Set objYes= Sys.Process("EXCEL", 3).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_Yes"")",10000)
    objYes.Click

  End If
  


  dim intTotSec,aArrayTimes
  Watchstr=Watch2.ToString
  Watchstr1=split(Watchstr,":")
         
  Watchstr=Round(aqconvert.StrToFloat(Watchstr1(1))*60,1) + round(aqconvert.StrToFloat(Watchstr1(2))) 
  Log.Message("Time taken for First STP : "  & Watchstr)      
  'strTCRemarks = strTCRemarks & " <br/> " & Watchstr
  
  strTCRemarks = strTCRemarks & "<br />" & "First STP Execution Time"
  strTCRemarks = strTCRemarks & "  " & Watch2.Tostring & " - uploaded a STP successfully"
  
  Watchstr=Watch3.ToString
  Watchstr1=split(Watchstr,":")
         
  Watchstr=Round(aqconvert.StrToFloat(Watchstr1(1))*60,1) + round(aqconvert.StrToFloat(Watchstr1(2))) 
  Log.Message("Time taken for second STP : "  & Watchstr)      
  'strTCRemarks = strTCRemarks & " <br/> " & Watchstr
  
  strTCRemarks = strTCRemarks & "<br />" & "Second STP Execution Time"
  strTCRemarks = strTCRemarks & "  " & Watch3.Tostring & " - uploaded a STP successfully"
  
'  Call netUIHWND.Click(296, 72)
'  Call sExcelFullHistory
'
'  Set netUIHWND2 = excel2.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND
'  Call netUIHWND2.Click(296, 72)
'  Call sExcelFullHistory3
  
End sub

Sub sCreateSeriesTimePoints2(strParameters)
  
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,strStartRow,File
  On Error Resume Next
  
  strStartcolumn=0

  Const xlFillDefault = 0

  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strForeCast= getSplitValue(strParameters,"ForeCast")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")

'  STPSheetName="A1_1"
'  STP="STP2"
'  strTestDataFile="YYY-Automation_Benchmark-STP2"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
''  strSeriesFreq="A1"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="2000"
   
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath= FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      'msgbox FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
 Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."

       r=1
         If r=1 AND IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then
             intlastRow=r
             strStartRow=r
             intlastRowSTP1=r
             strStartRowSTP1=r
         End If
        Do While (r < .UsedRange.Rows.Count)        
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then
            If IsEmpty(.UsedRange.Cells(r-1, 1).Value) = False AND (.UsedRange.Cells(r-1, 1).Text) <>"" Then           
             intlastRow=r
             strStartRow=r
             intlastRowSTP1=r
             strStartRowSTP1=r    
             Exit Do
            Else
             r=r-1
            End If            
          Else          
           r = r+100   
          End  If
        Loop  

        inti=3
        lastColumn=.UsedRange.Columns.Count

       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          If UCASE(strText)=UCase("Series Name") then 
          .Cells(intlastRow,inti).Value=strSeriesName
          ElseIf UCASE(strText)=UCase("Source Series Name") then 
          .Cells(intlastRow,inti).Value=strSourceSeriesName
          ElseIf UCASE(strText)=UCase("Series Source Code") then 
          .Cells(intlastRow,inti).Value=strSeriesSourceCode
          ElseIf UCASE(strText)=UCase("ForeCast") then 
          .Cells(intlastRow,inti).Value=strForeCast 
          ElseIf UCASE(strText)=UCase("Series Status") then 
          .Cells(intlastRow,inti).Value=strSeriesStatus
          ElseIf UCASE(strText)=UCase("Series Type") then 
          .Cells(intlastRow,inti).Value=strSeriesType
          ElseIf UCASE(strText)=UCase("Series Country") then 
          .Cells(intlastRow,inti).Value=strSeriousCountry
          ElseIf UCASE(strText)=UCase("Output Unit") then 
          .Cells(intlastRow,inti).Value=strOutputUnit
          ElseIf UCASE(strText)=UCase("Series Nature") then 
          .Cells(intlastRow,inti).Value=strSeriesNature
          ElseIf UCASE(strText)=UCase("Series Freq") then 
          .Cells(intlastRow,inti).Value=strSeriesFreq
          ElseIf UCASE(strText)=UCase("Source Unit") then 
          .Cells(intlastRow,inti).Value=strSourceUnit
          ElseIf UCASE(strText)=UCase("Unit Type") then 
              .Cells(intlastRow,inti).Value=strUnitType  
          ElseIf isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         Delay 5000 , "Creating a new series.."
          
          ''Copy the Series for 2000 Cells 
        strEndSeriesColumn=strStartcolumn-3
        strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
        Delay(5000)
        'msgbox "1000 cells copied"
        
        With objSTPXls
          With .Sheets(STPSheetName).Select
          End With      
          With .WorkSheets(STPSheetName)
             .Range("C" & intlastRow & ":" & strEndSeriesColumn & intlastRow ).Select
               intTargetRow=intlastRow + 1999
              .Range("C" & intlastRow & ":" &strEndSeriesColumn & intlastRow).AutoFill  .Range("C" & intlastRow & ":" & strEndSeriesColumn & intTargetRow), xlFillDefault
          End With
        END WITH
      
          
          



'Updted Script to Identify Mark Good object and Click on the same:
      Delay 10000,"Click on Mark Good..."
      Set NetUIHWND =  Sys.Process("EXCEL", 3).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
         With objSTPXls
           With .WorkSheets(STPSheetName)
                .Cells.Select
                Sys.Keys "~YY3" 
            End With
          End With
          
'          'Click on Mark good:
'         ' Call sClicKMarkGood(3,strTestDataFile)
'          Call NetUIHWND.Click(589, 42)
'          Call NetUIHWND.Click(589, 42)
'          Delay 200
'          Call NetUIHWND.Click(41, 87)
'          Call NetUIHWND.Click(41, 87)

  End With
  End With 

End Sub 

Sub sSourceseries()
Dim objFileToRead
On Error Resume Next
  strFileText=""
  Set objFileToRead = CreateObject("Scripting.FileSystemObject").OpenTextFile(strProjectFilesPath &"Source.txt",1)
  strSourceFileText = objFileToRead.ReadAll()
  objFileToRead.Close
End sub 

Sub sLayoutseries()
Dim objFileToRead
On Error Resume Next
  strFileText=""
  Set objFileToRead = CreateObject("Scripting.FileSystemObject").OpenTextFile(strProjectFilesPath &"Layout.txt",1)
  strLayoutFileText = objFileToRead.ReadAll()
  objFileToRead.Close
End sub 

Sub sCreateTimePoints(strParameters)
  
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,strStartRow,File
  On Error Resume Next
  
  strStartcolumn=0

  Const xlFillDefault = 0
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")

'  STPSheetName="A1_1"
'  STP="STP2"
'  strTestDataFile="YYY-L_T-STP2"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
''  strSeriesFreq="A1"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="2000"
'   
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
  'FilePath="C:\Users\spoonguzhali\Desktop\EdgeAddinStorage\2015-10-08\YYY-Automation_Benchmark-Source.xlsx"
  'msgbox intlastRow
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          
          If isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         


  Delay 10000,"Please Wait"
''Click on Refresh Button 

    Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
    'Call netUIHWND.Click(318, 68)
    
    Call NetUIHWND.Click(491, 64)
    Delay 200
    Call sExcelFullHistory()
      
   strEndSeriesColumn=strStartcolumn-3
   strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
   Delay(5000)
  ' Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
   Set objSTPXls=GetObject(FilePath)     
          
 
   lastColumn=.UsedRange.Columns.Count
     

    With .Sheets(STPSheetName).Select
    End With      
   With .WorkSheets(STPSheetName)
        intcount=0
        if strStartcolumn=0 then
        End if
        intj= (strStartcolumn + 1)
        For intj= intj to lastColumn 
          If IsEmpty(.UsedRange.Cells(strStartRowSTP, intj).Value) = True AND (.UsedRange.Cells(strStartRowSTP, intj).Text) ="" Then
            if intcount<=9 then
              .Cells(strStartRowSTP,intj).Select
              .Cells(strStartRowSTP,intj).Text=strTimepoints
              .Cells(strStartRowSTP,intj).Value=strTimepoints
              strTimepoints=strTimepoints + 1
            Else
              Exit For
            End if 
            intcount=intcount+1 
          End If  
        Next
    EnD with    
    
        Dim strStartColumnName,StrEndColumnName
        strStartColumnName=strStartcolumn + 1
        strStartColumnName=GetColumnName(strStartColumnName)
        StrEndColumnName=GetColumnName(lastColumn)
        
        ''Copy the Series for 2000 Cells 
 
        With .Sheets(STPSheetName).Select
        End With
        With .WorkSheets(STPSheetName)
           .Range(strStartColumnName & intlastRowSTP & ":" & StrEndColumnName & intlastRowSTP ).Select
             'Const xlFillDefault = 0
             intTargetRow=intlastRowSTP + 1999
'              intTargetRow=intlastRowSTP + 2
            .Range(strStartColumnName & intlastRowSTP & ":" & StrEndColumnName & intlastRowSTP).AutoFill  .Range(strStartColumnName & intlastRowSTP & ":" & StrEndColumnName & intTargetRow), xlFillDefault
        End With
  End With
  End With 

End Sub 




Sub sUpdateSeries(strParameters)
'Sub sUpdateSeries()
  Dim excel,netUIHWND,excel2,netUIHWND2, objTemp, strTemp
  Dim Watchstr,Watchstr1,Time1,Time2,Watch1,File
On Error Resume Next 

  'msgbox"Updateseries Started" 
  strTestDataFile1=getSplitValue(strParameters,"TestDataFile1") 
  strTestDataFile2=getSplitValue(strParameters,"TestDataFile2")

  Watchstr=""
  Watchstr1=""
  iTestCaseFirstRow = 0

  Set Watch = HISUtils.StopWatch
  Set Watch1 = HISUtils.StopWatch
  
  Time1="12/12/2012"& " "& "00:00:00"
  Time1=aqConvert.StrToDateTime(Time1)
  Time2=Time1
  new_time=Time1
  Delay 10000
  
 If blnTimeRecorded = False Then
    Watch.Start
    Log.Message("Start Execution time: "  & now)
  End IF 
  
  
   If blnTimeRecorded = False Then
     Watch1.Start
     Log.Message("Start Execution time: "  & now)
   End IF 
  
  
  'msgbox "Second Upload is done"
  'strTemp="WPFObject(""PART_ContainerContent"")"
  Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)

  If File.Exists Then
        File.Click
        Set PicObj = Utils.Picture
        Set PicObj = Sys.Desktop.Picture
        PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
        picCount = picCount + 1 
        'Click on Oj button
        'SYS.Keys("O")
        Set objOk = Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Information").WPFObject("CustomMessageBoxWindow", "Information", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_OK"")",10000)
        objOk.Click
        Watch.Stop
        blnTimeRecorded = True
  End If
   Log.Message("End First Execution time: "  & now)
   Log.Message("First STP series finished. Execution time: " & Watch.Tostring)
        
  ''Question Msgbox
  'strTemp="WPFObject(""PART_ContainerContent"")"
  
  Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",3000000)

  If File.Exists Then    
    'File.Click
    'Click on No Button
    Set objNo = Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_No"")",10000)
    objNo.Click
'    Sys.Keys("N")
  End If
  
   
  
  'strTemp="WPFObject(""PART_ContainerContent"")"
  Set File = Sys.Process("EXCEL", 3)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)
          
  
  If File.Exists Then
    File.Click
     Set PicObj = Utils.Picture
     Set PicObj = Sys.Desktop.Picture
     PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
     picCount = picCount + 1 
     'SYS.Keys("O")
     'Click on OK Buttom     
     Set objOk = Sys.Process("EXCEL", 3).WPFObject("HwndSource: CustomMessageBoxWindow", "Information").WPFObject("CustomMessageBoxWindow", "Information", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_OK"")",10000)
     objOk.Click
    Watch1.Stop
    blnTimeRecorded = True
    
  End If
  Log.Message("End Second Execution time: "  & now)
  Log.Message("Second STP finished. Execution time: " & Watch1.Tostring)
            
  ''Question Msgbox
  Set File = Sys.Process("EXCEL", 3)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",3000000)

  If File.Exists Then
    'File.Click
    'Sys.Keys("N")
    Set objNo = Sys.Process("EXCEL", 3).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_No"")",10000)
    objNo.Click
  End If
  


  dim intTotSec,aArrayTimes
  Watchstr=Watch.ToString
  Watchstr1=split(Watchstr,":")
         
  Watchstr=Round(aqconvert.StrToFloat(Watchstr1(1))*60,1) + round(aqconvert.StrToFloat(Watchstr1(2))) 
  Log.Message("Time taken for First STP : "  & Watchstr)      
  'strTCRemarks = strTCRemarks & " <br/> " & Watchstr
  
  strTCRemarks = strTCRemarks & "<br />" & "First STP  series Execution Time"
  strTCRemarks = strTCRemarks & "  " & Watch.Tostring & " - uploaded a STP successfully"
  
  Watchstr=Watch1.ToString
  Watchstr1=split(Watchstr,":")
         
  Watchstr=Round(aqconvert.StrToFloat(Watchstr1(1))*60,1) + round(aqconvert.StrToFloat(Watchstr1(2))) 
  Log.Message("Time taken for second STP : "  & Watchstr)      
  'strTCRemarks = strTCRemarks & " <br/> " & Watchstr
  
  strTCRemarks = strTCRemarks & "<br />" & "second STP series Execution Time"
  strTCRemarks = strTCRemarks & "  " & Watch1.Tostring & " - uploaded a STP successfully"
  
'  Call netUIHWND.Click(296, 72)
'  Call sExcelFullHistory
'
'  Set netUIHWND2 = excel2.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND
'  Call netUIHWND2.Click(296, 72)
'  Call sExcelFullHistory3
  
End sub

Sub sCreateTimePoints1(strParameters)
  
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,strStartRow,File
  On Error Resume Next
  
  strStartcolumn=0

  Const xlFillDefault = 0
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strForeCast = getSplitValue(strParameters,"ForeCast") 
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")

'  STPSheetName="A1_1"
'  STP="STP2"
'  strTestDataFile="YYY-L_T-STP2"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
''  strSeriesFreq="A1"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="2000"
'   
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
  'FilePath="C:\Users\spoonguzhali\Desktop\EdgeAddinStorage\2015-10-08\YYY-Automation_Benchmark-Source.xlsx"
  msgbox intlastRow
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
         
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          
          If isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         
         
         
       With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
               Delay 10000,"Please Wait"
               
             ''Click on Refresh Button
             'Call sClickRefresh(3,strTestDataFile)               
             Set NetUIHWND =  Sys.Process("EXCEL", 3).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
             Call NetUIHWND.Click(589, 42)
             Call NetUIHWND.Click(589, 42)
             Delay 200
             Call NetUIHWND.Click(300, 66)     
             Delay 200            
             strExcel = "3"
             Call sExcelFullHistorySTP(strExcel)
              'Call sExcelFullHistorySTP()
               
          End With
        End With
          

    strEndSeriesColumn=strStartcolumn-3
    strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
    Delay(5000)
 
      Set objSTPXls=GetObject(FilePath)     
          
 
   lastColumn=.UsedRange.Columns.Count
     

    With .Sheets(STPSheetName).Select
    End With      
   With .WorkSheets(STPSheetName)
        intcount=0
        if strStartcolumn=0 then
        End if
        intj= (strStartcolumn + 1)
        For intj= intj to lastColumn 
          If IsEmpty(.UsedRange.Cells(strStartRowSTP1, intj).Value) = True AND (.UsedRange.Cells(strStartRowSTP1, intj).Text) ="" Then
            if intcount<=9 then
              .Cells(strStartRowSTP1,intj).Select
              .Cells(strStartRowSTP1,intj).Text=strTimepoints
              .Cells(strStartRowSTP1,intj).Value=strTimepoints
              strTimepoints=strTimepoints + 1
            Else
              Exit For
            End if 
            intcount=intcount+1 
          End If  
        Next
    EnD with    
    
        Dim strStartColumnName,StrEndColumnName
        strStartColumnName=strStartcolumn + 1
        strStartColumnName=GetColumnName(strStartColumnName)
        StrEndColumnName=GetColumnName(lastColumn)
        
        ''Copy the Series for 2000 Cells 
 
        With .Sheets(STPSheetName).Select
        End With
        With .WorkSheets(STPSheetName)
           .Range(strStartColumnName & intlastRowSTP1 & ":" & StrEndColumnName & intlastRowSTP1 ).Select
            intTargetRow=intlastRowSTP1 + 1999
           .Range(strStartColumnName & intlastRowSTP1 & ":" & StrEndColumnName & intlastRowSTP1).AutoFill  .Range(strStartColumnName & intlastRowSTP1 & ":" & StrEndColumnName & intTargetRow), xlFillDefault
        End With 
        
  End With
  End With 

End Sub 
Sub sCreateSeriesTimePoints40(strParameters)
  
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,strStartRow,File
  On Error Resume Next
  
  strStartcolumn=0

  Const xlFillDefault = 0
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strForeCast= getSplitValue(strParameters,"ForeCast")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")

'  STPSheetName="A1_1"
'  STP="STP2"
'  strTestDataFile="YYY-L_T-STP2"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
''  strSeriesFreq="A1"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="2000"
'   
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
  'FilePath="C:\Users\spoonguzhali\Desktop\EdgeAddinStorage\2015-10-08\YYY-Automation_Benchmark-Source.xlsx"
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
'        For r = 1 To .UsedRange.Rows.Count
'          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
'             intlastRow=r
'             strStartRow=r
'             intlastRowSTP=r
'             strStartRowSTP=r
'             Exit For
'          End  If 
'        Next
        r=1
         If r=1 AND IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then
             intlastRow=r
             strStartRow=r
             intlastRowSTP1=r
             strStartRowSTP1=r
         End If
        Do While (r < .UsedRange.Rows.Count)        
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then
            If IsEmpty(.UsedRange.Cells(r-1, 1).Value) = False AND (.UsedRange.Cells(r-1, 1).Text) <>"" Then           
             intlastRow=r
             strStartRow=r
             intlastRowSTP=r
             strStartRowSTP=r
             'msgbox r
             Exit Do
            Else
             r=r-1
            End If            
          Else          
           r = r+100   
          End  If
        Loop  
        'intlastRow=intlastRow-1
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          If UCASE(strText)=UCase("Series Name") then 
          .Cells(intlastRow,inti).Value=strSeriesName
          ElseIf UCASE(strText)=UCase("Source Series Name") then 
          .Cells(intlastRow,inti).Value=strSourceSeriesName
          ElseIf UCASE(strText)=UCase("Series Source Code") then 
          .Cells(intlastRow,inti).Value=strSeriesSourceCode
          ElseIf UCASE(strText)=UCase("ForeCast") then 
          .Cells(intlastRow,inti).Value=strForeCast 
          ElseIf UCASE(strText)=UCase("Series Status") then 
          .Cells(intlastRow,inti).Value=strSeriesStatus
          ElseIf UCASE(strText)=UCase("Series Type") then 
          .Cells(intlastRow,inti).Value=strSeriesType
          ElseIf UCASE(strText)=UCase("Series Country") then 
          .Cells(intlastRow,inti).Value=strSeriousCountry
          ElseIf UCASE(strText)=UCase("Output Unit") then 
          .Cells(intlastRow,inti).Value=strOutputUnit
          ElseIf UCASE(strText)=UCase("Series Nature") then 
          .Cells(intlastRow,inti).Value=strSeriesNature
          ElseIf UCASE(strText)=UCase("Series Freq") then 
          .Cells(intlastRow,inti).Value=strSeriesFreq
          ElseIf UCASE(strText)=UCase("Source Unit") then 
          .Cells(intlastRow,inti).Value=strSourceUnit
          ElseIf UCASE(strText)=UCase("Unit Type") then 
              .Cells(intlastRow,inti).Value=strUnitType  
          ElseIf isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         Delay 15000 , "Creating a new series.."
          
          ''Copy the Series for 4000 Cells 
        strEndSeriesColumn=strStartcolumn-3
        strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
        Delay(15000)
        
        With objSTPXls
          With .Sheets(STPSheetName).Select
          End With      
          With .WorkSheets(STPSheetName)
             .Range("C" & intlastRow & ":" & strEndSeriesColumn & intlastRow ).Select
               'Const xlFillDefault = 0
               intTargetRow=intlastRow + 3999
'              intTargetRow=intlastRow + 2
              .Range("C" & intlastRow & ":" &strEndSeriesColumn & intlastRow).AutoFill  .Range("C" & intlastRow & ":" & strEndSeriesColumn & intTargetRow), xlFillDefault
          End With
        END WITH
      
          
          
'          Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
'          
'          ''Mark Good
'          Delay 3000,"Mark Good..."
'          With objSTPXls
'            With .WorkSheets(STPSheetName)
'                 .Cells.Select
'            End With
'          End With
'          Call netUIHWND.Click(32, 92)
'
''Click on Mark Good Button
'       strTemp = "MSAAObject(""btn_Mark_Good"")" 
'       Set objTemp = Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).FindChild("Name",strTemp,50,True)
'       If objTemp.Exists Then
'          objTemp.Click
'       End If  

'Modified Click on Mark Good Button

'Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
  
'Click on MarkGood Button 
'Call netUIHWND.Click(62, 96)  

'Call netUIHWND.Click(31, 93)
'Call netUIHWND.Click(232, 92)  

Call sClicKMarkGood(2,strTestDataFile)    
  End With
  End With 
  'msgbox "CreateSeriesTimePoints40 is completed"
End Sub 


Sub sCreateSeriesTimePoints240(strParameters)
'Sub sCreateSeriesTimePoints240

  
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,strStartRow,File
  On Error Resume Next
  
  strStartcolumn=0

  Const xlFillDefault = 0

  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strForeCast= getSplitValue(strParameters,"ForeCast")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")

'  STPSheetName="A1_1"
'  STP="STP20"
'  strTestDataFile="YYY-Automation_UIT1_2-STP2"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
''  strSeriesFreq="A1"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="8"
   
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
  'FilePath="C:\Users\spoonguzhali\Desktop\EdgeAddinStorage\2015-10-08\YYY-Automation_Benchmark-Source.xlsx"
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
'        For r = 1 To .UsedRange.Rows.Count
'          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
'             intlastRow=r
'             strStartRow=r
'             intlastRowSTP1=r
'             strStartRowSTP1=r
'             Exit For
'          End  If 
'        Next
        r=1
         If r=1 AND IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then
             intlastRow=r
             strStartRow=r
             intlastRowSTP1=r
             strStartRowSTP1=r
         End If
        Do While (r < .UsedRange.Rows.Count)        
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then
            If IsEmpty(.UsedRange.Cells(r-1, 1).Value) = False AND (.UsedRange.Cells(r-1, 1).Text) <>"" Then           
             intlastRow=r
             strStartRow=r
             intlastRowSTP1=r
             strStartRowSTP1=r
             'msgbox r
             Exit Do
            Else
             r=r-1
            End If            
          Else          
           r = r+100   
          End  If
        Loop  
        'intlastRow=intlastRow-1
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          If UCASE(strText)=UCase("Series Name") then 
          .Cells(intlastRow,inti).Value=strSeriesName
          ElseIf UCASE(strText)=UCase("Source Series Name") then 
          .Cells(intlastRow,inti).Value=strSourceSeriesName
          ElseIf UCASE(strText)=UCase("Series Source Code") then 
          .Cells(intlastRow,inti).Value=strSeriesSourceCode
          ElseIf UCASE(strText)=UCase("ForeCast") then 
          .Cells(intlastRow,inti).Value=strForeCast 
          ElseIf UCASE(strText)=UCase("Series Status") then 
          .Cells(intlastRow,inti).Value=strSeriesStatus
          ElseIf UCASE(strText)=UCase("Series Type") then 
          .Cells(intlastRow,inti).Value=strSeriesType
          ElseIf UCASE(strText)=UCase("Series Country") then 
          .Cells(intlastRow,inti).Value=strSeriousCountry
          ElseIf UCASE(strText)=UCase("Output Unit") then 
          .Cells(intlastRow,inti).Value=strOutputUnit
          ElseIf UCASE(strText)=UCase("Series Nature") then 
          .Cells(intlastRow,inti).Value=strSeriesNature
          ElseIf UCASE(strText)=UCase("Series Freq") then 
          .Cells(intlastRow,inti).Value=strSeriesFreq
          ElseIf UCASE(strText)=UCase("Source Unit") then 
          .Cells(intlastRow,inti).Value=strSourceUnit
          ElseIf UCASE(strText)=UCase("Unit Type") then 
              .Cells(intlastRow,inti).Value=strUnitType  
          ElseIf isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         Delay 15000 , "Creating a new series.."
          
          ''Copy the Series for 4000 Cells 
        strEndSeriesColumn=strStartcolumn-3
        strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
        Delay(15000)
        
        With objSTPXls
          With .Sheets(STPSheetName).Select
          End With      
          With .WorkSheets(STPSheetName)
             .Range("C" & intlastRow & ":" & strEndSeriesColumn & intlastRow ).Select
               'Const xlFillDefault = 0
               intTargetRow=intlastRow + 3999
'                 intTargetRow=intlastRow + 2
              .Range("C" & intlastRow & ":" &strEndSeriesColumn & intlastRow).AutoFill  .Range("C" & intlastRow & ":" & strEndSeriesColumn & intTargetRow), xlFillDefault
          End With
        END WITH
    
'        Set netUIHWND = Aliases.excel2.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
'          ''Mark Good
'          Delay 3000,"Mark Good..."
'          With objSTPXls
'            With .WorkSheets(STPSheetName)
'                 .Cells.Select
'            End With
'          End With
'          Call netUIHWND.Click(32, 92)
'
''Click on Mark Good Button
'       strTemp = "MSAAObject(""btn_Mark_Good"")" 
'       Set objTemp = Sys.Process("EXCEL", 3).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).FindChild("Name",strTemp,50,True)
'       If objTemp.Exists Then
'          objTemp.Click
'       End If  

'Modified Click on Mark Good Button:
'Set netUIHWND =  Sys.Process("EXCEL", 3).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)

'  Call netUIHWND.Click(62, 96)
'Call netUIHWND.Click(31, 93)
'Call netUIHWND.Click(232, 92)
Call sClicKMarkGood(3,strTestDataFile)
                         
  End With
  End With 
 'msgbox "CreateSeriesTimePoints240 is completed"
End Sub 

Sub sCreateTimePoints40(strParameters)
  
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,strStartRow,File
  On Error Resume Next
  
  strStartcolumn=0

  Const xlFillDefault = 0
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")

'  STPSheetName="A1_1"
'  STP="STP2"
'  strTestDataFile="YYY-L_T-STP2"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
''  strSeriesFreq="A1"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="2000"
'   
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
  'FilePath="C:\Users\spoonguzhali\Desktop\EdgeAddinStorage\2015-10-08\YYY-Automation_Benchmark-Source.xlsx"
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          
          If isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
    
       'Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
      ' Set netUIHWND =  Sys.Process("EXCEL", 2).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
            
        With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select
               ' Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND
               'Click on Refresh Button 
                'Call netUIHWND.Click(300, 66)
                Call sClickRefresh(2,strTestDataFile)
               
                 'Call netUIHWND.Click(318, 68)
                 'Call NetUIHWND.Click(491, 64)
                Call sExcelFullHistory
          End With
        End With

    strEndSeriesColumn=strStartcolumn-3
    strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
    Delay(5000)
   ' Set netUIHWND = Aliases.EXCEL.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
      Set objSTPXls=GetObject(FilePath)     
          
 
   lastColumn=.UsedRange.Columns.Count
     

    With .Sheets(STPSheetName).Select
    End With      
   With .WorkSheets(STPSheetName)
        intcount=0
        if strStartcolumn=0 then
        End if
        intj= (strStartcolumn + 1)
        For intj= intj to lastColumn 
          If IsEmpty(.UsedRange.Cells(strStartRowSTP, intj).Value) = True AND (.UsedRange.Cells(strStartRowSTP, intj).Text) ="" Then
            if intcount<=9 then
              .Cells(strStartRowSTP,intj).Select
              .Cells(strStartRowSTP,intj).Text=strTimepoints
              .Cells(strStartRowSTP,intj).Value=strTimepoints
              strTimepoints=strTimepoints + 1
              'Delay(1000)
            Else
              Exit For
            End if 
            intcount=intcount+1 
          End If  
        Next
    EnD with    
    
        Dim strStartColumnName,StrEndColumnName
        strStartColumnName=strStartcolumn + 1
        strStartColumnName=GetColumnName(strStartColumnName)
        StrEndColumnName=GetColumnName(lastColumn)
        
        ''Copy the Series for 1000 Cells 
 
        With .Sheets(STPSheetName).Select
        End With
        With .WorkSheets(STPSheetName)
           .Range(strStartColumnName & intlastRowSTP & ":" & StrEndColumnName & intlastRowSTP ).Select
             'Const xlFillDefault = 0
             intTargetRow=intlastRowSTP + 3999
'              intTargetRow=intlastRowSTP + 2
            .Range(strStartColumnName & intlastRowSTP & ":" & StrEndColumnName & intlastRowSTP).AutoFill  .Range(strStartColumnName & intlastRowSTP & ":" & StrEndColumnName & intTargetRow), xlFillDefault
        End With
  End With
  End With 
  'msgbox "CreateTimePoints40 is completed"

End Sub 

Sub sCreateTimePoints140(strParameters)
  
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,strStartRow,File
  On Error Resume Next
  
  strStartcolumn=0

  Const xlFillDefault = 0
  
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")

'  STPSheetName="A1_1"
'  STP="STP2"
'  strTestDataFile="YYY-L_T-STP2"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
''  strSeriesFreq="A1"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="2000"
'   
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
  'FilePath="C:\Users\spoonguzhali\Desktop\EdgeAddinStorage\2015-10-08\YYY-Automation_Benchmark-Source.xlsx"
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
   
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          
          If isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
    
       With objSTPXls
          With .WorkSheets(STPSheetName)
               .Cells.Select

                'Set netUIHWND = Aliases.EXCEL2.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
                ' Set netUIHWND =  Sys.Process("EXCEL", 3).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
                 'Click on Refresh Button 
                 'Call netUIHWND.Click(300, 66)
                 Call sClickRefresh(3,strTestDataFile)
                 strExcel = "3"
                 Call sExcelFullHistorySTP(strExcel)
                'Call netUIHWND.Click(318, 68)
                'Call NetUIHWND.Click(491, 64)
                'Call sExcelFullHistorySTP
          End With
        End With
  
    'Set netUIHWND = Aliases.EXCEL2.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 

    strEndSeriesColumn=strStartcolumn-3
    strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
    Delay(5000)
   ' Set netUIHWND = Aliases.EXCEL2.wndXLMAIN.EXCEL2.toolbarRibbon.Ribbon.NUIPane.NetUIHWND 
      Set objSTPXls=GetObject(FilePath)     
          
 
   lastColumn=.UsedRange.Columns.Count
     

    With .Sheets(STPSheetName).Select
    End With      
   With .WorkSheets(STPSheetName)
        intcount=0
        if strStartcolumn=0 then
        End if
        intj= (strStartcolumn + 1)
        For intj= intj to lastColumn 
          If IsEmpty(.UsedRange.Cells(strStartRowSTP1, intj).Value) = True AND (.UsedRange.Cells(strStartRowSTP1, intj).Text) ="" Then
            if intcount<=9 then
              .Cells(strStartRowSTP1,intj).Select
              .Cells(strStartRowSTP1,intj).Text=strTimepoints
              .Cells(strStartRowSTP1,intj).Value=strTimepoints
              strTimepoints=strTimepoints + 1
              'Delay(1000)
            Else
              Exit For
            End if 
            intcount=intcount+1 
          End If  
        Next
    EnD with    
    
        Dim strStartColumnName,StrEndColumnName
        strStartColumnName=strStartcolumn + 1
        strStartColumnName=GetColumnName(strStartColumnName)
        StrEndColumnName=GetColumnName(lastColumn)
        
        ''Copy the Series for 1000 Cells 
 
        With .Sheets(STPSheetName).Select
        End With
        With .WorkSheets(STPSheetName)
           .Range(strStartColumnName & intlastRowSTP1 & ":" & StrEndColumnName & intlastRowSTP1 ).Select
             'Const xlFillDefault = 0
             intTargetRow=intlastRowSTP1 + 3999
'              intTargetRow=intlastRowSTP1 + 2
            .Range(strStartColumnName & intlastRowSTP1 & ":" & StrEndColumnName & intlastRowSTP1).AutoFill  .Range(strStartColumnName & intlastRowSTP1 & ":" & StrEndColumnName & intTargetRow), xlFillDefault
        End With      
  End With
  End With 
   ' msgbox "CreateTimePoints140 is completed"
End Sub

Sub SaveCNSTP(strParameters)
'Sub SaveCNSTP()

On Error Resume Next
Dim objFSO
  
 strLevel1=getSplitValue(strParameters,"Source")
 strLevel2=getSplitValue(strParameters,"Qcname")
 strLevel3=getSplitValue(strParameters,"Workspace")
 
' strLevel1="Test"
' strLevel2="YYY-eAIP Test"
' strLevel3="YYY-eAIP Test 1"
'	strEnvi = "Edge ( US Integration )" 
	
	' Create a new folder
	Set objFSO = CreateObject("Scripting.FileSystemObject")
FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
objFSO.CreateFolder FilePath
 
 
	
	  'Open Source Dispaly Viewer  
  Call sOpenSourceDispalyViewer() 
  
  'Select the required Level  
 ' Call SelectLevel5Source(strParameters)
  'Call SelectLevel3Source(strLevel1,strLevel2,strLevel3) 
  Call sGridSelection(strParameters)
  
  Delay 1000

 
 strTemp="WPFObject(""ContentControlEx"", ""Open CN STP"", 2)"
 Set objCNSTP=Sys.Process("EdgeClient").FindChild("Name",strTemp,50,true)
 Call objCNSTP.Click

  
 Set objTRPForm=Sys.Process("EXCEL", 2).WaitChild("WinFormsObject(""TimeRangePickerForm"")",50000)
 
 If fCheckEmpty(objTRPForm)=TRUE then
  strTestCaseResult="ABORT"
  strTCRemarks="STP not found"
  Exit Sub
 End If
	
 strTemp="WinFormsObject(""FullHistoryButton"")"
 Set objFullHistory=objTRPForm.FindChild("Name",strTemp,50,true)
 Call objFullHistory.Click
 Delay 2000
 
 strTemp="WinFormsObject(""chbWithoutOpen"")"
 Set objNoOpen=objTRPForm.FindChild("Name",strTemp,50,true)
 Call objNoOpen.Click
 Delay 2000
	
	
 Set objFilePath = Sys.Process("EXCEL", 2).WinFormsObject("TimeRangePickerForm").WinFormsObject("tableLayoutPanel1").WinFormsObject("fileOpenOptionsControl").WinFormsObject("tbExportPath")      
	Set objSelectFile = Sys.Process("EXCEL", 2).WinFormsObject("TimeRangePickerForm").WinFormsObject("tableLayoutPanel1").WinFormsObject("fileOpenOptionsControl").WinFormsObject("btnSelectPath")
	If objSelectFile.Exists Then
					objSelectFile.Click
					Set objBrowserPick = Sys.Process("EXCEL", 2).Window("#32770", "Browse For Folder", 1)
					If objBrowserPick.Exists Then
					Dim dlgBrowseForFolder
              'Call Aliases.EXCEL3.dlgBrowseForFolder.Drag(122, 19, 21, -211)
							Set dlgBrowseForFolder = Aliases.EXCEL.dlgBrowseForFolder
              Call dlgBrowseForFolder.Drag(122, 19, 21, -211)
							FilePath1 = getSplitValue(strParameters,"FilePath")	
							FilePath1 = "C:\Users\rchethana\Documents\Edge\EdgeAddinStorage\"
							FilePath1 = FilePath1 & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")	
							Call dlgBrowseForFolder.SHBrowseForFolderShellNameSpaceControl.SysTreeView32.ClickItem( FilePath1 )
              Delay 2000 ,"File path Selected"
							dlgBrowseForFolder.btnOK.ClickButton							
					End if
		End If

  Delay 500
  StrTemp = "WinFormsObject(""OpenButton"")" 
  Set objTemp = Sys.Process("EXCEL", 2).WinFormsObject("TimeRangePickerForm").WinFormsObject("tableLayoutPanel1").FindChild("Name",strTemp,50,True)
  objTemp.Click
 strTemp="WinFormsObject(""OpenButton"")"
 Set objOpen=objTRPForm.FindChild("Name",strTemp,50,true)
 Call objOpen.Click
	
	  strTemp="WinFormsObject(""SelectFreqForm"")"
			Sys.Process("EXCEL", 2).WinFormsObject("SelectFreqForm")
    Set objTemp=Sys.Process("EXCEL",2).WaitChild(strTemp,10000)
    If objTemp.Exists Then
        strTemp="WinFormsObject(""radButton1"")"
								Sys.Process("EXCEL", 2).WinFormsObject("SelectFreqForm").WinFormsObject("radButton1")
        Set objTemp=objTemp.FindChild("Name",strTemp,5)
        If objTemp.Exists = True then
          objTemp.Click
        End If
    End if
 Delay 20000, "Please wait Saving File"
 strTCRemarks="Saved CN STP file"
 
 'If Err.Number=0 then
 'Delay 10000,"Pls wait saving file..."
' Else
  'msgbox Err.Number
  'msgbox "Abort"
  'strTestCaseResult="ABORT"
' End If 

 'Close the Opened Excel File
 Call ExcelProcessKill
 
 'Create Series
 
 'Call SClosesource 
 
End Sub
'*********************************************************************************************************************************88

Sub sDailyCheckPointTimePoint(strParameters)
'Sub DailyCheckPointTimePoint()

  On Error Resume Next
  Dim STPSheetName, strTestDataFile, strTimepoints, objArray
  Dim strTemp, strAliasName, strFileName, FilePath, strSeriesIDNew
  Dim oSTP_ExcelObj,objTemp, objSTPXls, netUIHWND
  
  STPSheetName= getSplitValue(strParameters,"STPSheetName")  
  strTestDataFile=getSplitValue(strParameters,"TestDataFile")
  strTimepoints = getSplitValue(strParameters,"Timepoints")
  
'  STPSheetName="D_1"
'  strTestDataFile="YYY-Automation-Test Source 1"
'  strTimepoints="50"
'  strSeriesID="421317707"
  'date1 = "6/02/2019"
  
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    'Click on Refresh 
    Call sClickRefresh(2,strTestDataFile)
    Delay 2000
    Call sExcelFullHistory
    Delay 2000
    
    With .Sheets(STPSheetName).Select     
    End With    
    With .WorkSheets(STPSheetName)
      Delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
      For r = 1 To .UsedRange.Rows.Count
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
           intlastRow=r-1          
           Exit For
          End  If 
       Next
       
       strSeriesIDNew = .Cells(intlastRow,1).Value
       'msgbox strSeriesIDNew
       inti=3
       intCnt = 0
       lastColumn=.UsedRange.Columns.Count
       
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select      
          If isDate(strText)  then 
             strStartcolumnDate=strColumnNumber          
              If  strText = date then
                  strStartcolumn=inti              
                   intCnt = 1
                   Exit For
              End if 
          End If          
       Next 

       
      if intCnt = 0 Then
          Set netUIHWND = Sys.Process("EXCEL", 2).Window("XLMAIN", strFileName &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
          Delay 10000
          Call NetUIHWND.Click(589, 42)
          Call netUIHWND.Click(239, 74)
          Delay 1000     
          strDate = Split(Now, " ")
          Sys.Process("EXCEL", 2).WinFormsObject("AddDateForm").WinFormsObject("tableLayoutPanel1").WinFormsObject("panel10").WinFormsObject("tableLayoutPanel3").WinFormsObject("fromButton").Click
          Sys.Process("EXCEL", 2).WinFormsObject("AddDateForm").WinFormsObject("tableLayoutPanel1").WinFormsObject("panel10").WinFormsObject("tableLayoutPanel3").WinFormsObject("endPicker").Set_Text(strDate(0))
          Delay 1000
          Sys.Process("EXCEL", 2).WinFormsObject("AddDateForm").WinFormsObject("tableLayoutPanel1").WinFormsObject("tableLayoutPanel2").WinFormsObject("okButton").Click
          Call sEdgeProcessor()
          Delay 10000
          lastColumn=.UsedRange.Columns.Count
          For inti = 3 to lastColumn
            strText=.Cells(2,inti)
            .Cells(intlastRow,inti).Select
            If isDate(strText)  then
              strStartcolumn=inti                    
              Exit For
            End If 
          Next  
      End If 
      
      With .Sheets(STPSheetName).SelectstrTestDataFile
      End With   
         
       With .WorkSheets(STPSheetName)      
        If Cstr(strSeriesIDNew) = Cstr(strSeriesID) Then
            .Cells(intlastRow,strStartcolumn).Select
            .Cells(intlastRow,strStartcolumn).Text = strTimepoints
            .Cells(intlastRow,strStartcolumn).Value=strTimepoints            
        End If         
      End With
     
      'Mark Good 
      Call sClicKMarkGood(2,strTestDataFile) 
      Delay 2000
      
      'Upload Series
      Call sClickUpload(2,strTestDataFile)
      Delay 2000
      
      'Click yes to close file
      Call sClickonInformation(2,"Yes")
      
      
     End With
  End With 
 
        
End Sub 

'******************************************************************************************************************************************************************
'Partial Upload on opened ATP file

'Sub PartialUpload(strParameters)
Sub PartialUpload()

 On Error Resume Next  
 Dim strTemp, objTemp , blnFlag
 
 blnFlag = False
 
 Delay 2000, "Please Wait"
 strTestDataFile=getSplitValue(strParameters,"TestDataFile")
 strTestDataFile = "CN-JAY-Preliminary"
 
 Set netUIHWND = Sys.Process("EXCEL", 2).Window("XLMAIN", "*" & strTestDataFile , 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
 
 'Click on Edge Addin
  Call netUIHWND.Click(599, 41)
  Delay 200
  
  strTemp = "WinFormsObject(""summaryNameList"")"
  Set objTemp = Sys.Process("EXCEL", 2).Window("XLMAIN", "*" & strTestDataFile , 1).Window("EXCEL2", "", 1).FindChild("Name",strTemp,50,True)
 ' Sys.Process("EXCEL", 2).Window("XLMAIN", "Book1 - CN-JAY-Preliminary", 1).Window("EXCEL2", "", 1).Window("MsoCommandBar", "EDGE Information", 2).Window("MsoWorkPane", "EDGE Information", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1).Window("NetUICtrlNotifySink", "", 1).Window("CMMOcxHost", "", 1).WinFormsObject("InformationPane").WinFormsObject("pageView").WinFormsObject("atpInfoPage").WinFormsObject("atpInformationView").WinFormsObject("freqPageView").WinFormsObject("RadPageViewPage", "M").WinFormsObject("AtpInformationResultGrid").WinFormsObject("pnlMain").WinFormsObject("pnlControl").WinFormsObject("summaryNameList")
   'Set Summary Dropdown to Revised TimePoints
  If objTemp.Exists Then
    objTemp.set_Text("Revised Timepoints")
  End If
 
 'Click on Any Series ID
' Sys.Process("EXCEL", 2).Window("XLMAIN", "Book1 - CN-JAY-Preliminary", 1).Window("EXCEL2", "", 1).Window("MsoCommandBar", "EDGE Information", 2).Window("MsoWorkPane", "EDGE Information", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1).Window("NetUICtrlNotifySink", "", 1).Window("CMMOcxHost", "", 1).WinFormsObject("InformationPane").WinFormsObject("pageView").WinFormsObject("atpInfoPage").WinFormsObject("atpInformationView").WinFormsObject("freqPageView").WinFormsObject("RadPageViewPage", "M").WinFormsObject("AtpInformationResultGrid").WinFormsObject("pnlMain").
  strTemp = "WinFormsObject(""summaryResultGridView"")"
  Set objTemp = Sys.Process("EXCEL", 2).Window("XLMAIN", "*" & strTestDataFile , 1).Window("EXCEL2", "", 1).FindChild("Name",strTemp,50,True)  
  Call objTemp.ClickCell(1, "Series Id")
  
  'Click on Mark Good
  Call netUIHWND.Click(57, 73)
  
  'Click on Partial Upload 
  Call netUIHWND.Click(170, 71)
  
  'Click Ok for Information dialog
  strTemp ="WPFObject(""Button_OK"")"  
  Set objTemp = Sys.Process("EXCEL", 2).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",60000)

  If objTemp.Exists Then
    objTemp.Click    
  End If
  
  'Click Yes to Warning message
  strTemp ="WPFObject(""Button_Yes"")"  
  Set objTemp = Sys.Process("EXCEL", 2).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Warning"")",60000)

  If objTemp.Exists Then
    objTemp.Click    
  End If
  
    'Click Yes to Warning message
  strTemp ="WPFObject(""Button_Yes"")"  
  Set objTemp = Sys.Process("EXCEL", 2).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Warning"")",60000)

  If objTemp.Exists Then
    objTemp.Click    
  End If
  
  Set objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*"&MCFlag&"*",1,True)
    If oSTP_ExcelObj.Exists = True Then                             
      objArray(i).Close
      strTCRemarks= "ATP File is uploaded"
      strTestCaseResult="PASS"
      blnFlag = True
      Exit For              
    End If
   Next
  

   If blnFlag = False Then
    strTCRemarks= "ATP File is not uploaded"
    strTestCaseResult="FAIL"
   End If 

End Sub

'
'  Sub sSourceScheduleTimePoint(strParameters)
'  On Error Resume Next
'
'    Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
'    Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
'    Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
'    Dim i,FilePath,intcount,intj, intCol
'    Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
'    Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,File
'  
'    Const xlFillDefault = 0
'    strStartcolumn=0
'    STP= getSplitValue(strParameters,"STP") 
'    strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
'    STPSheetName= getSplitValue(strParameters,"STPSheetName")
'    strSeriesName = getSplitValue(strParameters,"Series Name")
'    strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
'    strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
'    strForeCast= getSplitValue(strParameters,"ForeCast")
'    strSeriesStatus =  getSplitValue(strParameters,"Series Status")
'    strSeriesType =  getSplitValue(strParameters,"Series Type")
'    strSeriousCountry = getSplitValue(strParameters,"Serious Country")
'    strOutputUnit=  getSplitValue(strParameters,"Output Unit")
'    strSeriesNature =  getSplitValue(strParameters,"Series Nature")
'    strSeriesFreq = getSplitValue(strParameters,"Series Freq")
'    strSourceUnit =  getSplitValue(strParameters,"Source Unit")
'    strUnitType = getSplitValue(strParameters,"Unit Type") 
'    strTimepoints = getSplitValue(strParameters,"Timepoints")
'  
'
'  
'
'  '  STPSheetName="D_1"
'  '  STP="Test Source 1"
'  '  strTestDataFile="YYY-Automation-Test Source 1"
'  '  strSeriesName="test-series"
'  '  strSourceSeriesName="test-series"
'  '  strSeriesSourceCode="test-series"
'  '  strSeriesStatus="T"
'  '  strSeriesType="Key"
'  '  strSeriousCountry="YYY"
'  '  strOutputUnit="NA"
'  '  strSeriesNature="R"
'  '  strSeriesFreq="D"
'  '  strSourceUnit="NA"
'  '  strUnitType="%"
'  '  strTimepoints="5"
'  '    
'    objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
'    For i=0 to ubound(objArray)
'      log.Message objArray(i).FullName
'      set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
'      If oSTP_ExcelObj.Exists = True Then
'        strAliasName=objArray(i).mappedname
'        strFileName=oSTP_ExcelObj.WndCaption
'        If instr(strFileName,"Microsoft Excel")>0 then
'          strFileName=GetFileName(strFileName,"Microsoft Excel")
'        Else
'          strFileName=GetFileNameExcel13(strFileName," - Excel")
'        End If
'        FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
'        FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
'        log.Message FilePath
'        Exit For
'      Else
'        log.Message "STP file not found in " & objArray(i).FullName
'      End If
'    Next
'  
'    Delay(2000)
'  
'    Set objSTPXls=GetObject(FilePath)
'    With objSTPXls
'      With .Sheets(STPSheetName).Select
'      End With
'
'      With .WorkSheets(STPSheetName)
'          inti=3
'          lastColumn=.UsedRange.Columns.Count
'         For inti = 3 to lastColumn
'            strText=.Cells(2,inti)
'            .Cells(intlastRow,inti).Select         
'             If isDate(strText)  then
'                strStartcolumn=inti
'                Exit For
'            End if 
'           Next 
'         
'      nd With 
'  End Sub 

'*****************************************************************************************************************************************8
Sub sCreateSeriesModified(strParameters)
'Sub sCreateSeriesModified()

  On Error Resume Next
  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile,strTimepoints
  
  Const xlFillDefault = 0
  strStartcolumn=0
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strForeCast= getSplitValue(strParameters,"ForeCast")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSeriesFreq = getSplitValue(strParameters,"Series Freq")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")
  strExcelNumber = getSplitValue(strParameters,"ExcelNumber")
  strAddTimepoint = getSplitValue(strParameters,"AddTimepoint")
  'strPendingSTP = getSplitValue(strParameters,"PendingSTP")
  
'  STPSheetName="A1_1"
'  STP="Test Source 1"
'  strTestDataFile="YYY-Automation-Test Source 1"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strForeCast="No"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
'  strSeriesFreq="A1"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="8"
'  strExcelNumber = "2"
'  strAddTimepoint = "Yes"
  
  
  strExcelNumber =Cint(strExcelNumber)
  
  
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  'FilePath = "C:\Users\rchethana\Documents\Edge\EdgeAddinStorage\2019-08-21\YYY-Automation-Test Source 1.xlsx"
  Delay(2000)
 
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
        For r = 1 To .UsedRange.Rows.Count
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
           intlastRow = r           
           Exit For
          End  If 
        Next   
         
        inti=3
        lastColumn=.UsedRange.Columns.Count 
        
       'Modify Name in Pending STP
       If  Ucase(Trim(strTestCase_no)) = Ucase(Trim("TC_PRT_11"))Then 
          Exit Sub          
       End If  
         
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          If UCASE(strText)=UCase("Series Name") then 
          .Cells(intlastRow,inti).Value=strSeriesName
          ElseIf UCASE(strText)=UCase("Source Series Name") then 
          .Cells(intlastRow,inti).Value=strSourceSeriesName
          ElseIf UCASE(strText)=UCase("Series Source Code") then 
          .Cells(intlastRow,inti).Value=strSeriesSourceCode
          ElseIf UCASE(strText)=UCase("ForeCast") then 
          .Cells(intlastRow,inti).Value=strForeCast 
          ElseIf UCASE(strText)=UCase("Series Status") then 
          .Cells(intlastRow,inti).Value=strSeriesStatus
          ElseIf UCASE(strText)=UCase("Series Type") then 
          .Cells(intlastRow,inti).Value=strSeriesType
          ElseIf UCASE(strText)=UCase("Series Country") then 
          .Cells(intlastRow,inti).Value=strSeriousCountry
          ElseIf UCASE(strText)=UCase("Output Unit") then 
          .Cells(intlastRow,inti).Value=strOutputUnit
          ElseIf UCASE(strText)=UCase("Series Nature") then 
          .Cells(intlastRow,inti).Value=strSeriesNature
          ElseIf UCASE(strText)=UCase("Series Freq") then
          .Cells(intlastRow,inti).Value=strSeriesFreq
          ElseIf UCASE(strText)=UCase("Source Unit") then 
          .Cells(intlastRow,inti).Value=strSourceUnit
          ElseIf UCASE(strText)=UCase("Unit Type") then 
              .Cells(intlastRow,inti).Value=strUnitType  
          ElseIf isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
       Next 
   
   Delay 5000 , "Creating a new series.."   
   
   'Mark Good 
   Call sClicKMarkGood(strExcelNumber,strTestDataFile) 
   Delay 5000, "Please wait"
   
   'Upload Series   
   Call sClickUpload(strExcelNumber,strTestDataFile)
   Delay 5000, "Please wait"
   strSeriesID = .Cells(intlastRow,1).Value 
  
   If strAddTimepoint = "Yes"then
      'Click no to file close
       Call sClickonInformation(strExcelNumber,"No")  
       Delay 2000
       'Click on Refresh
       Call sClickRefresh(strExcelNumber,strTestDataFile) 
       Delay 2000   
       Call sExcelFullHistory()
     
       'Add the required Timepoint
      With objSTPXls
      With .Sheets(STPSheetName).Select
      End With      
      With .WorkSheets(STPSheetName)
          intcount=0
          if strStartcolumn=0 then
          End if
          For intj= (strStartcolumn + 1) to lastColumn 
            If IsEmpty(.UsedRange.Cells(intlastRow, intj).Value) = True AND (.UsedRange.Cells(r, intj).Text) ="" Then
              if intcount<=5 then
                .Cells(intlastRow,intj).select
                .Cells(intlastRow,intj).Value=strTimepoints
                strTimepoints=strTimepoints + 1
              Else
                Exit For
              End if 
              intcount=intcount+1 
            End If  
          Next
      End With
      End With
    
     'Mark Good 
     Call sClicKMarkGood(strExcelNumber,strTestDataFile) 
     Delay 5000, "Please wait"
   
     'Upload Series   
     Call sClickUpload(strExcelNumber,strTestDataFile)
     Delay 5000, "Please wait" 
   
     'Click yes on Close window
     Call sClickonInformation(strExcelNumber,"No")  
     'Click on Refresh
     Delay 200
     Call sClickRefresh(strExcelNumber,strTestDataFile)
     Delay 2000               
     Call sExcelFullHistory     
   Else
    Call sClickonInformation(strExcelNumber,"Yes")   
    Delay 2000   
   End If
  End With 
  End With

  
End Sub

'*********************************************************************************************************************************
Sub sClicKMarkGood(ExcelNumber,strTestDataFile)
'Sub sClicKMarkGood()

  On Error Resume Next
  
  Dim NetUIHWND, strTemp
  'ExcelNumber = 2
  'strTestDataFile = "YYY-Automation-Test Source 1"

  Delay 2000
  Set wndXLMAIN = Aliases.EXCEL.wndXLMAIN
  wndXLMAIN.Activate
  Set NetUIHWND = Sys.Process("EXCEL", ExcelNumber).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", ExcelNumber).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
  Call NetUIHWND.Click(589, 42)
  Delay 200
  Call NetUIHWND.Click(41, 87)
  
  Sys.Keys "~Y"
  Sys.Keys "Y3"
  

  log.message "MarkGood button is clicked"
End Sub
'*********************************************************************************************************************************

Sub sClickUpload(ExcelNumber,strTestDataFile)
'Sub sClickUpload()
  On Error Resume Next
  
  Dim NetUIHWND, strTemp
  'ExcelNumber = 2
  'strTestDataFile = "YYY-Automation-Test Source 1"
  Delay 1000  
  Set wndXLMAIN = Aliases.EXCEL.wndXLMAIN
  wndXLMAIN.Activate

  Set NetUIHWND = Sys.Process("EXCEL", ExcelNumber).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", ExcelNumber).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
  Call NetUIHWND.Click(589, 42)
  Delay 200
  Call NetUIHWND.Click(139, 67)
  
  Sys.Keys "~Y"
  Sys.Keys "Y5"

  log.message "Upload button is clicked"
End Sub
'*********************************************************************************************************************************
Sub sClickRefresh(ExcelNumber,strTestDataFile)
'Sub sClickRefresh()
  On Error Resume Next
  
  Dim NetUIHWND, strTemp
  ''ExcelNumber = 2
 '' strTestDataFile= "YYY-Automation_STP2-BMT23"

  Delay 1000
  Set wndXLMAIN = Aliases.EXCEL.wndXLMAIN
  wndXLMAIN.Activate
  Set NetUIHWND = Sys.Process("EXCEL", ExcelNumber).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", ExcelNumber).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
  Call NetUIHWND.Click(589, 42)
  Call NetUIHWND.Click(589, 42)
  Delay 200
  Call NetUIHWND.Click(300, 66)
  
    
'  Sys.Keys "~Y"
'  Sys.Keys "YB"
'  
'
'  log.message "Refresh button is clicked"
End Sub

'******************************************************************************************************************************************8
Sub sClickonInformation(ExcelNumber,strFileClose)
  On Error Resume Next
  Delay 1000 
  
  'Click ok On Information Box
  Set File = Sys.Process("EXCEL", ExcelNumber).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)
  If File.Exists Then
    File.Click
    Set objOk = Sys.Process("EXCEL", ExcelNumber).WPFObject("HwndSource: CustomMessageBoxWindow", "Information").WPFObject("CustomMessageBoxWindow", "Information", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_OK"")",10000)
    objOk.Click
    log.message "ok button on Information window is clicked"
  End if
  
  Set File = Sys.Process("EXCEL", ExcelNumber).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",3000000)
  If File.Exists Then
    'Click on Yes/No to close file
    If strFileClose = "Yes" then
      Set objYes= Sys.Process("EXCEL", ExcelNumber).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_Yes"")",10000)
      objYes.Click
      log.message "Yes button on File close window is clicked"
    Else
       Set objNo = Sys.Process("EXCEL", ExcelNumber).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_No"")",10000)
       objNo.Click
       log.message "No Button File Close Window  is clicked"
    End If
  End IF    
  
End Sub

'****************************************************************************************************************************************
Sub sClickDeletValue(ExcelNumber,strTestDataFile)
'Sub sClickRefresh()
  On Error Resume Next
  
  Dim NetUIHWND, strTemp
 ' ExcelNumber = 2
  'strTestDataFile = "YYY-Automation-Test Source 1"
  
  Set wndXLMAIN = Aliases.EXCEL.wndXLMAIN
  wndXLMAIN.Activate
  
  Delay 10000
  Set NetUIHWND = Sys.Process("EXCEL", ExcelNumber).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", ExcelNumber).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
  Call NetUIHWND.Click(589, 42)
  Delay 200
  Call NetUIHWND.Click(247, 111)
  
'  Sys.Keys "~Y"
'  Sys.Keys "YA"
  

  log.message "DeletValue button is clicked"
End Sub
'********************************************************************************************************************************8


Sub sClickComputePlus(ExcelNumber,strTestDataFile)
  On Error Resume Next
  
  Dim NetUIHWND, strTemp
 ' ExcelNumber = 2
  'strTestDataFile = "YYY-Automation-Test Source 1"
  

  Delay 10000
  Set NetUIHWND = Sys.Process("EXCEL", ExcelNumber).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", ExcelNumber).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
  Call NetUIHWND.Click(589, 42)
  Delay 200
  Call NetUIHWND.Click(621, 120)
  
'  Sys.Keys "~Y"
'  Sys.Keys "YA"
  

  log.message "DeletValue button is clicked"
End Sub
'********************************************************************************************************************************8

Sub sUpdateSeries_Modified(strParameters)

  Dim strTemp, objTemp
  
  strTestDataFile1=getSplitValue(strParameters,"TestDataFile1") 
  strTestDataFile2=getSplitValue(strParameters,"TestDataFile2")
  strSheetName=getSplitValue(strParameters,"SheetName")
  
  Watchstr=""
  Watchstr1=""
  iTestCaseFirstRow = 0

  Set Watch = HISUtils.StopWatch
  Set Watch1 = HISUtils.StopWatch
  
  
  Time1=aqConvert.StrToDateTime("12/12/2012"& " "& "00:00:00")
  Time2=Time1
  new_time=Time1

  
  'Click on Upload for first excel
  Call sUpload_Click_Modified(strTestDataFile1,strSheetName)
  Watch.Start
  Log.Message("Start upload time for first excel file "  & now)
   
  Delay 5000
  
  'Click on Upload for Second excel
   Call sUpload_Click_Modified(strTestDataFile2,strSheetName)
   Watch1.Start
  Log.Message("Start  upload time for second excel file: "  & now) 
  
   Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)

  If File.Exists Then
        File.Click
        Set PicObj = Utils.Picture
        Set PicObj = Sys.Desktop.Picture
        PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
        picCount = picCount + 1 
        'Click on Oj button
        'SYS.Keys("O")
        Set objOk = Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Information").WPFObject("CustomMessageBoxWindow", "Information", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_OK"")",10000)
        objOk.Click
        Watch.Stop
        blnTimeRecorded = True
  End If
   Log.Message("End First file upload time: "  & now)
   Log.Message("First STP series finished. Execution time: " & Watch.Tostring)
   
   Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",3000000)

  If File.Exists Then    
    'File.Click
    'Click on No Button
    Set objNo = Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_No"")",10000)
    objNo.Click
'    Sys.Keys("N")
  End If
  
  
  'strTemp="WPFObject(""PART_ContainerContent"")"
  Set File = Sys.Process("EXCEL", 3)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",600000)
          
  
  If File.Exists Then
    File.Click
     Set PicObj = Utils.Picture
     Set PicObj = Sys.Desktop.Picture
     PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
     picCount = picCount + 1 
     'SYS.Keys("O")
     'Click on OK Buttom     
     Set objOk = Sys.Process("EXCEL", 3).WPFObject("HwndSource: CustomMessageBoxWindow", "Information").WPFObject("CustomMessageBoxWindow", "Information", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_OK"")",10000)
     objOk.Click
    Watch1.Stop
    blnTimeRecorded = True
    
  End If
  Log.Message("End Second Execution time: "  & now)
  Log.Message("Second STP finished. Execution time: " & Watch1.Tostring)
            
  ''Question Msgbox
  Set File = Sys.Process("EXCEL", 3)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",3000000)

  If File.Exists Then
    'File.Click
    'Sys.Keys("N")
    Set objNo = Sys.Process("EXCEL", 3).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_No"")",10000)
    objNo.Click
  End If
  

  dim intTotSec,aArrayTimes
  Watchstr=Watch.ToString
  Watchstr1=split(Watchstr,":")
         
  Watchstr=Round(aqconvert.StrToFloat(Watchstr1(1))*60,1) + round(aqconvert.StrToFloat(Watchstr1(2))) 
  Log.Message("Time taken for First STP : "  & Watchstr)      
  'strTCRemarks = strTCRemarks & " <br/> " & Watchstr
  
  strTCRemarks = strTCRemarks & "<br />" & "First STP  series Execution Time"
  strTCRemarks = strTCRemarks & "  " & Watch.Tostring & " - uploaded a STP successfully"
  
  Watchstr=Watch1.ToString
  Watchstr1=split(Watchstr,":")
         
  Watchstr=Round(aqconvert.StrToFloat(Watchstr1(1))*60,1) + round(aqconvert.StrToFloat(Watchstr1(2))) 
  Log.Message("Time taken for second STP : "  & Watchstr)      
  'strTCRemarks = strTCRemarks & " <br/> " & Watchstr
  
  strTCRemarks = strTCRemarks & "<br />" & "second STP series Execution Time"
  strTCRemarks = strTCRemarks & "  " & Watch1.Tostring & " - uploaded a STP successfully"  
  
  
End Sub


Sub sUpload_Click_Modified(strTestDataFile,strSheetName)

  On Error Resume Next
  

  
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
    For i=0 to ubound(objArray)
     log.Message objArray(i).FullName
     set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
     If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  Set objSTPXls=GetObject(FilePath)  
  
  objSTPXls.Sheets(strSheetName).Select
  Sys.Keys "~YY5" 
  
End Sub

'******************************************************************************************************************************
'BMT Sereis and Stress testing 

Sub sBMTStress(strParameters)
'Sub sBMTStress()
  On Error Resume Next
  
  Dim strTemp, objTemp, objGrid, objExcel, IntRowNumber(10), First_file_LastRow, Second_File_LastRow
  
  strLevel1Source1 =getSplitValue(strParameters,"Level2Source1")
  strLevel2Source1 =getSplitValue(strParameters,"Level2Source2")
  strLevel3Source1 =getSplitValue(strParameters,"Level3Source1")
  strLevel3Source2 =getSplitValue(strParameters,"Level3Source2")
  strTestDataFile1=getSplitValue(strParameters,"TestDataFile1")
  strTestDataFile2=getSplitValue(strParameters,"TestDataFile2")
  strCopyNumber=getSplitValue(strParameters,"CopyNumber")
  

  
  
'  strLevel1Source1 = "Test"
'  strLevel2Source1 = "Automation_STP2"
'  strLevel3Source1 = "BMT23"
'  strLevel3Source2 = "BMT24"
'  strTestDataFile1= "YYY-Automation_STP2-BMT23"
'  strTestDataFile2= "YYY-Automation_STP2-BMT24"
'  strCopyNumber = "2"
  
  'msgbox strCopyNumber

  
  
  'Open Source Module
   Call sHome_Source()
  'Select first Level3 source
  strTemp = "WPFObject(""SourceTreeListView"")"    
  IntRowNumber(0) = fGridone(strTemp,strLevel1Source1 )
  IntRowNumber(1) = fGridTwo(strTemp,strLevel2Source1 ,IntRowNumber(0))  
  IntRowNumber(2) = fGridThree(strTemp,strLevel3Source1 ,IntRowNumber(0), IntRowNumber(1))  
  Call sEdgeProcessor() 
  
  'Click on "Open global STP 
  strTemp= "WPFObject(""ContentControlEx"", ""Open Global STP"", 2)"
  Set objTemp = Sys.Process("EdgeClient").FindChild("Name",strTemp,50,True)
  
  If objTemp.Exists Then 
    objTemp.Click
    'Call sEdgeProcessor()
    log.message "Selected Object " + strTemp + " is Clicked"
  Else
    log.message "Selected Object " + strTemp + " doesnot exists"
  End If
  'Call sobjClick(strTemp)

 'Click on Excel Timpoint
  Call fTimpoint_range_selection(2)
  
  'Select second Level3 Source
  Delay 2000
  strTemp = "WPFObject(""SourceTreeListView"")" 
  IntRowNumber(3) = fGridThree(strTemp,strLevel3Source2 ,IntRowNumber(0), IntRowNumber(1))  
  Call sEdgeProcessor() 
  
  'Click on "Open global STP 
  strTemp= "WPFObject(""ContentControlEx"", ""Open Global STP"", 2)"
  Set objTemp = Sys.Process("EdgeClient").FindChild("Name",strTemp,50,True)
  
  If objTemp.Exists Then 
    objTemp.Click
    'Call sEdgeProcessor()
    log.message "Selected Object " + strTemp + " is Clicked"
  Else
    log.message "Selected Object " + strTemp + " doesnot exists"
  End If
  'Call sobjClick(strTemp)

 'Click on Excel Timpoint
  Call fTimpoint_range_selection(3)  
  
 'Select the Frequency and click ok on warning message
  Call fSelectFrequency(2)
  Delay 200
  Call fSelectFrequency(3)
  
   'Create Series for First File 
  First_file_LastRow = fSeries_Creation(strParameters, strTestDataFile1)
   
   Delay 200
  'Create Series for Second File
   Second_file_LastRow = fSeries_Creation(strParameters, strTestDataFile2)
  
  'Upload both file  
  Call sUploadBMTStree(strParameters,"Create Series Execution Time") 
  
  'click on Refresh Button for Both Excel
  Call fClickRefreshButton(strTestDataFile1,2)  
  Call fClickRefreshButton(strTestDataFile2,3)
 
   'Enter Timepoint for created Series for First Excel  
  Call fTimepoint_Creation(strParameters,strTestDataFile1,First_file_LastRow)
  Delay 2000
  
  'Enter Timepoint for created Series for Second Excel  
  strTestDataFile2=getSplitValue(strParameters,"TestDataFile2")
  Call fTimepoint_Creation(strParameters,strTestDataFile2,Second_file_LastRow)
  Delay 2000
  
  'Upload Timepoint
  Call sUploadBMTStree(strParameters, "Upload TimePoint Time") 
  
  'Close all Excelfiles
  Call  ExcelProcessKill()
  
End Sub

'*************************************************************************************************************************8

'fucntion to Select Timpoint range

Function fTimpoint_range_selection(strExcelNumber)
'Function fTimpoint_range_selection()

  on Error Resume Next
  
  Dim objTemp, strTemp
  'strExcelNumber = 2
  strTemp = "WinFormsObject(""TimeRangePickerForm"")"
  Set CreateSTP=Sys.Process("EXCEL",strExcelNumber).WaitChild(strTemp,120000)  
 
  If CreateSTP.Exists = True  Then
    PropArray = Array("WndCaption", "Visible")
    ValuesArray = Array("Full History", True)
    Set objTemp = CreateSTP.FindChild(PropArray, ValuesArray, 50)  
    If objTemp.Exists = True Then
     'Click on Full History
      objTemp.Click
      log.Message "Selected Full History Radio button"
    Else
      log.Message "Full History Radio button not found"
    End If    

    PropArray = Array("WndCaption", "Visible")
    ValuesArray = Array("Open", True)
     'Click on open Button
    Set objTemp = CreateSTP.FindChild(PropArray, ValuesArray, 10)
    If objTemp.Exists = True Then
      objTemp.Click
      log.Message "Open button is clicked"
      Else
      log.Message "Open button not found"
    End If    
  End If   
  
  Set CreateSTP=Nothing  
  Set objTemp=Nothing 
  
  
End Function

'***********************************************************************************************************************************

Function fSelectFrequency(strExcelNumber)

  On Error Resume Next
  Dim File, strTemp
  
 'Select frequency if required
  strTemp="WinFormsObject(""SelectFreqForm"")"      
  Set objTemp=Sys.Process("EXCEL",strExcelNumber).WaitChild(strTemp,10000) 
  If objTemp.Exists Then
    strTemp="WinFormsObject(""radButton1"")"
    Set objTemp=objTemp.FindChild("Name",strTemp,5)
    If objTemp.Exists = True then
      objTemp.Click
      log.message "Frequecny is Selected"
      Delay 10000,"Pls Wait..."
    End If
  End If
  
 Set File = Sys.Process("EXCEL", strExcelNumber).Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Warning"")",60000)       
 If (File.Exists) Then
   strTemp = "WPFObject(""Button_Yes"")"         
   Set objYes = File.FindChild("Name", strTemp,50, True)
   If objYes.Exists = True Then
       objYes.Click
       log.Message "ok button clicked on Warning message"
   End If
   Delay 10000,"Pls Wait..." 
 End If
 
 Set File = Nothing 
End Function

'******************************************************************************************************************************8
'Create a Series 
Function fSeries_Creation(strParameters, strTestDataFile)
'Function fSeries_Timepoint() 

On Error Resume Next
  Dim strTemp, objTemp
  
  STP= getSplitValue(strParameters,"STP")    
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strForeCast= getSplitValue(strParameters,"ForeCast")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")
  strCopyNumber = getSplitValue(strParameters,"CopyNumber")
  
' ' strExcelNumber = 2
'  STPSheetName="A1_1"
'  strCopyNumber="2"
'  STP="STP2"
'  'strTestDataFile="YYY-Automation_STP2-BMT23"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="2000"
'  strForeCast ="No"
''  strCopyNumber = "5" 

  FilePath=aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")+ "\"+strTestDataFile +".xlsx"
  Set objSTPXls=GetObject(FilePath)
  objSTPXls.Maximize()
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With
    
    With .WorkSheets(STPSheetName)
      Dim r
      r=1
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."        
         Do While (r < .UsedRange.Rows.Count)        
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then
            If IsEmpty(.UsedRange.Cells(r-1, 1).Value) = False AND (.UsedRange.Cells(r-1, 1).Text) <>"" Then 
               fSeries_Creation =  r
               intlastRow = r
               strStartRowSTP= r
             Exit Do
            Else
             r=r-1
            End If            
          Else          
           r = r+100   
          End  If
        Loop
        
      inti=3
      lastColumn=.UsedRange.Columns.Count  
      For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          If UCASE(strText)=UCase("Series Name") then 
          .Cells(intlastRow,inti).Value=strSeriesName
          ElseIf UCASE(strText)=UCase("Source Series Name") then 
          .Cells(intlastRow,inti).Value=strSourceSeriesName
          ElseIf UCASE(strText)=UCase("Series Source Code") then 
          .Cells(intlastRow,inti).Value=strSeriesSourceCode
           ElseIf UCASE(strText)=UCase("ForeCast") then 
          .Cells(intlastRow,inti).Value=strForeCast 
          ElseIf UCASE(strText)=UCase("Series Status") then 
          .Cells(intlastRow,inti).Value=strSeriesStatus
          ElseIf UCASE(strText)=UCase("Series Type") then 
          .Cells(intlastRow,inti).Value=strSeriesType
          ElseIf UCASE(strText)=UCase("Series Country") then 
          .Cells(intlastRow,inti).Value=strSeriousCountry
          ElseIf UCASE(strText)=UCase("Output Unit") then 
          .Cells(intlastRow,inti).Value=strOutputUnit
          ElseIf UCASE(strText)=UCase("Series Nature") then 
          .Cells(intlastRow,inti).Value=strSeriesNature
          ElseIf UCASE(strText)=UCase("Series Freq") then 
          .Cells(intlastRow,inti).Value=strSeriesFreq
          ElseIf UCASE(strText)=UCase("Source Unit") then 
          .Cells(intlastRow,inti).Value=strSourceUnit
          ElseIf UCASE(strText)=UCase("Unit Type") then 
              .Cells(intlastRow,inti).Value=strUnitType  
          ElseIf isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         Delay 5000 , "Creating a new series.."
         
         ''Copy the Series for 2000 Cells 
        strEndSeriesColumn=strStartcolumn-3
        strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
        Delay(5000)
        
        With objSTPXls
          With .Sheets(STPSheetName).Select
          End With      
          With .WorkSheets(STPSheetName)
             .Range("C" & intlastRow & ":" & strEndSeriesColumn & intlastRow ).Select               
               intTargetRow=intlastRow + Cint(strCopyNumber)
              .Range("C" & intlastRow & ":" &strEndSeriesColumn & intlastRow).AutoFill  .Range("C" & intlastRow & ":" & strEndSeriesColumn & intTargetRow), xlFillDefault
          End With
        END WITH  
        
        With objSTPXls
          With .Sheets(STPSheetName).Select
          End With      
          With .WorkSheets(STPSheetName) 
          'Click on Mark good
          Sys.Keys "~YY3" 
          End With
        END WITH               
        
      End With    
  End With  
          
End Function

'******************************************************************************************************************************************8
Sub sUploadBMTStree(strParameters, strText)
'Sub sUploadBMTStree()
  
  On Error Resume Next
  
  strTestDataFile1=getSplitValue(strParameters,"TestDataFile1")
  strTestDataFile2=getSplitValue(strParameters,"TestDataFile2")
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  
  Dim Watchstr1,Watchstr2
''  strTestDataFile1= "YYY-Automation_STP2-BMT23"
''  strTestDataFile2= "YYY-Automation_STP2-BMT24"
''  STPSheetName = "A1_1"
  

  
  Set Watch1 = HISUtils.StopWatch
  Set Watch2 = HISUtils.StopWatch
  
'  Time1="12/12/2012"& " "& "00:00:00"
'  Time1=aqConvert.StrToDateTime(Time1)
'  Time2=Time1
'  new_time=Time1
'  'msgbox new_time
'  Delay 10000
  
  'upload for first excel
  Call fClickUpload(strTestDataFile1,2)
  
  Watch1.Start
  Log.Message("Start Execution time: "  & now)
   
  'upload for Second excel 
  Call fClickUpload(strTestDataFile2,3)
  Watch2.Start
  Log.Message("Start Execution time: "  & now)  
 
  Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",3000000)

  If File.Exists Then
        Watch1.Stop
        File.Click
        Set PicObj = Utils.Picture
        Set PicObj = Sys.Desktop.Picture
        PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
        picCount = picCount + 1 
        'Click on OK button    
        Set objOk = Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Information").WPFObject("CustomMessageBoxWindow", "Information", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_OK"")",10000)
        objOk.Click        
        blnTimeRecorded = True
        Log.Message("Time taken for First STP : "  & Watch1.ToString)     
       strTCRemarks = strTCRemarks & "<br />" & "First "& strText
        strTCRemarks = strTCRemarks & "  " & Watch1.ToString & " - uploaded a STP successfully"
        strTestCaseResult = "PASS"
  Else
      log.message "Information Dialog Box did not appear for first STP file"
      strTCRemarks = strTCRemarks & "  " &"Waited for "& Watch1.ToString & " - uploaded a STP Not successfully"
      strTestCaseResult = "FAIL"
  End If
         
  
  
  Set File = Sys.Process("EXCEL", 3)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Information"")",3000000)
          
  
  If File.Exists Then
     Watch2.Stop
     File.Click
     Set PicObj = Utils.Picture
     Set PicObj = Sys.Desktop.Picture
     PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
     picCount = picCount + 1   
     'Click on OK Buttom     
     Set objOk = Sys.Process("EXCEL", 3).WPFObject("HwndSource: CustomMessageBoxWindow", "Information").WPFObject("CustomMessageBoxWindow", "Information", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_OK"")",10000)
     objOk.Click     
     blnTimeRecorded = True
     Log.Message("End Second Execution time: "  & now)
     Log.Message("Second STP finished. Execution time: " & Watch2.Tostring)         
      strTCRemarks = strTCRemarks & "<br />" & "Second "& strText
      strTCRemarks = strTCRemarks & "  " & Watch2.ToString & " - uploaded a STP successfully"
     strTestCaseResult = "PASS"
  Else
      log.message "Information Dialog Box did not appear for Second STP File"
      strTCRemarks = strTCRemarks & "  " &"Waited for "& Watch2.ToString & " - uploaded a STP Not successfully"  
      strTestCaseResult = "FAIL" 
  End If

  
  
  ''Question Msgbox
  Set File = Sys.Process("EXCEL", 2)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",60000)

  If File.Exists Then  
    'Click on No Button
    Set objNo = Sys.Process("EXCEL", 2).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_No"")",10000)
    objNo.Click
  End If
            
  ''Question Msgbox
  Set File = Sys.Process("EXCEL", 3)._
          Waitchild("WPFObject(""HwndSource: CustomMessageBoxWindow"", ""Question"")",60000)

  If File.Exists Then    
    Set objNo = Sys.Process("EXCEL", 3).WPFObject("HwndSource: CustomMessageBoxWindow", "Question").WPFObject("CustomMessageBoxWindow", "Question", 1).WPFObject("Grid", "", 1).WPFObject("Grid", "", 1).WPFObject("PART_ContentOffset").WPFObject("Grid", "", 1).WPFObject("PART_ContainerContent").WPFObject("Grid", "", 1).WPFObject("Grid", "", 2).WPFObject("DockPanel", "", 1).Waitchild("WPFObject(""Button_No"")",10000)
    objNo.Click
  End If
  

  
  
  

  
End Sub

'###################################################################################################################################
'Function fClickUpload(strTestDataFile,intExcelNumber)
Function fClickUpload()
   On Error Resume Next
   Dim NetUIHWND, wndXLMAIN
   
  strTestDataFile1= "YYY-Automation_STP2-BMT23"
'  strTestDataFile2= "YYY-Automation_STP2-BMT24"
'  STPSheetName= "A1_1"
'  
'  
'  FilePath=aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")+ "\"+strTestDataFile +".xlsx"
'  Set objSTPXls=GetObject(FilePath) 
'  With objSTPXls
'    With .Sheets(STPSheetName).Select
'    End With     
'    With .WorkSheets(STPSheetName)
'       Sys.Keys "~Y"
'       Sys.Keys "Y5" 
'    End With
'  End With

  intExcelNumber = 2
  If intExcelNumber=2 Then
      Set wndXLMAIN = Aliases.EXCEL.wndXLMAIN
      wndXLMAIN.Activate
    Else
       Set wndXLMAIN = Aliases.EXCEL2.wndXLMAIN
       wndXLMAIN.Activate    
    End If

' Set NetUIHWND = Sys.Process("EXCEL", intExcelNumber).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
' 
' Call NetUIHWND.Click(584, 37)
' Call NetUIHWND.Click(584, 37)
' Delay 200
' Call NetUIHWND.Click(125, 64) 
'
' Set NetUIHWND= Nothing


Set NetUIHWND = Sys.Process("EXCEL", intExcelNumber).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
strTemp = "MSAAObject(""btn_Upload"")"
Set objUpload = NetUIHWND.FindChild("Name", strTemp, 50, True)
Call objUpload.Click()
  
End Function

'**********************************************************************************************************************************8
'Click on Refresh Button
Function fClickRefreshButton(strTestDataFile,ExcelNumber)
  On Error Resume Next
  Dim NetUIHWND, wndXLMAIN

  If ExcelNumber=2 Then
      Set wndXLMAIN = Aliases.EXCEL.wndXLMAIN
      wndXLMAIN.Activate
    Else
       Set wndXLMAIN = Aliases.EXCEL2.wndXLMAIN
       wndXLMAIN.Activate    
    End If

  Set NetUIHWND = Sys.Process("EXCEL", ExcelNumber).Window("XLMAIN", strTestDataFile &"*", 1).Window("EXCEL2", "", 2).Window("MsoCommandBar", "Ribbon", 1).Window("MsoWorkPane", "Ribbon", 1).Window("NUIPane", "", 1).Window("NetUIHWND", "", 1)
 
   Call NetUIHWND.Click(584, 37)
   Call NetUIHWND.Click(584, 37)
   Delay 200
   'click on Refresh
  Call NetUIHWND.Click(300, 66)
 
  Set NetUIHWND= Nothing  
  
  'select the timepoint 
  Call fTimpoint_range_selection(ExcelNumber)
  'Select Frequency
  Call fSelectFrequency(ExcelNumber)
  
  
End Function

'***********************************************************************************************************************************8

'Create Timpoint for created Series
Function fTimepoint_Creation(strParameters,strTestDataFile,strRowNumber)
'Function fTimepoint_Creation()
On Error Resume Next
  Dim strTemp, objTemp 
  strTimepoints = getSplitValue(strParameters,"Timepoints")
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strCopyNumber = getSplitValue(strParameters,"CopyNumber")
  
'  msgbox strRowNumber
'  msgbox strStartRowSTP
'  msgbox strTestDataFile
  
'  strTimepoints="1"
'  STPSheetName="A1_1"
'  strCopyNumber="1"
'  'strTestDataFile= "YYY-Automation_STP2-BMT23"
  strStartRowSTP = strRowNumber
  
  
  FilePath=aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")+ "\"+strTestDataFile +".xlsx"
  Set objSTPXls=GetObject(FilePath) 
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(strStartRowSTP,inti).Select
          
          If isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
       Next 
       Delay 10000,"Please Wait"
       lastColumn=.UsedRange.Columns.Count
     

    With .Sheets(STPSheetName).Select
    End With      
    With .WorkSheets(STPSheetName)
        intcount=0
        if strStartcolumn=0 then
        End if
        intj= (strStartcolumn + 1)
        For intj= intj to lastColumn 
          If IsEmpty(.UsedRange.Cells(strStartRowSTP, intj).Value) = True AND (.UsedRange.Cells(strStartRowSTP, intj).Text) ="" Then
            if intcount<=9 then
              .Cells(strStartRowSTP,intj).Select
              .Cells(strStartRowSTP,intj).Text=strTimepoints
              .Cells(strStartRowSTP,intj).Value=strTimepoints
              strTimepoints=strTimepoints + 1
            Else
              Exit For
            End if 
            intcount=intcount+1 
          End If  
        Next
    End With    
     Dim strStartColumnName,StrEndColumnName
        strStartColumnName=strStartcolumn + 1
        strStartColumnName=GetColumnName(strStartColumnName)
        StrEndColumnName=GetColumnName(lastColumn)
        
        ''Copy the Series for 2000 Cells 
 
        With .Sheets(STPSheetName).Select
        End With
        With .WorkSheets(STPSheetName)
           .Range(strStartColumnName & strStartRowSTP & ":" & StrEndColumnName & strStartRowSTP ).Select                       
            intTargetRow=strStartRowSTP + Cint(strCopyNumber)
           .Range(strStartColumnName & strStartRowSTP & ":" & StrEndColumnName & strStartRowSTP).AutoFill  .Range(strStartColumnName & strStartRowSTP & ":" & StrEndColumnName & intTargetRow), xlFillDefault
        End With
  End With
  End With 
End Function

'******************************************************************************************************************************8
'Create_series for Complute Plus
Sub sCreateSeries_Compute(strParameters)
'Sub sCreateSeries_Compute()
On Error Resume Next

  Dim strSeriesName,strSourceSeriesName,strSeriesSourceCode,strSeriesStatus,strSeriesType,STPSheetName
  Dim strSeriousCountry,strOutputUnit,strSeriesNature,strSeriesFreq,strSourceUnit,strUnitType,strTestDataFile
  Dim strAliasName,strFileName,STP,strTimepoints,strText,strStartcolumn
  Dim i,FilePath,intcount,intj, intCol
  Dim objArray,oSTP_ExcelObj,objSTPXls,objActiveWB,netUIHWND,wndEXCEL7
  Dim intlastRow,lastColumn,inti,strTemp,objErrmsg,objOkClick,File
  
  Const xlFillDefault = 0
  strStartcolumn=0
  STP= getSplitValue(strParameters,"STP") 
  strTestDataFile=getSplitValue(strParameters,"TestDataFile") 
  STPSheetName= getSplitValue(strParameters,"STPSheetName")
  strSeriesName = getSplitValue(strParameters,"Series Name")
  strSourceSeriesName = getSplitValue(strParameters,"Source Series Name")
  strSeriesSourceCode=  getSplitValue(strParameters,"Series Source Code")
  strSeriesStatus =  getSplitValue(strParameters,"Series Status")
  strSeriesType =  getSplitValue(strParameters,"Series Type")
  strSeriousCountry = getSplitValue(strParameters,"Serious Country")
  strOutputUnit=  getSplitValue(strParameters,"Output Unit")
  strSeriesNature =  getSplitValue(strParameters,"Series Nature")
  strSeriesFreq = getSplitValue(strParameters,"Series Freq")
  strSourceUnit =  getSplitValue(strParameters,"Source Unit")
  strUnitType = getSplitValue(strParameters,"Unit Type") 
  strTimepoints = getSplitValue(strParameters,"Timepoints")
  strForeCast= getSplitValue(strParameters,"ForeCast")
  
  'For Unit testcase(PRT)
  If strUnitType="ZZZ" then
   strUnitType=strUnit
  End If
  

'  STPSheetName="D_1"
'  STP="Test Source 1"
'  strTestDataFile="YYY-Automation-Test Source 1"
'  strSeriesName="test-series"
'  strSourceSeriesName="test-series"
'  strSeriesSourceCode="test-series"
'  strSeriesStatus="T"
'  strSeriesType="Key"
'  strSeriousCountry="YYY"
'  strOutputUnit="NA"
'  strSeriesNature="R"
'  strSeriesFreq="D"
'  strSourceUnit="NA"
'  strUnitType="%"
'  strTimepoints="6"
'    
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 1,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*" & strTestDataFile & "*",1,True)
    If oSTP_ExcelObj.Exists = True Then
      strAliasName=objArray(i).mappedname
      strFileName=oSTP_ExcelObj.WndCaption
      If instr(strFileName,"Microsoft Excel")>0 then
        strFileName=GetFileName(strFileName,"Microsoft Excel")
      Else
        strFileName=GetFileNameExcel13(strFileName," - Excel")
      End If
      FilePath = aqEnvironment.GetEnvironmentVariable("USERPROFILE") & "\Documents\Edge\EdgeAddinStorage\" & aqConvert.DateTimeToFormatStr(aqDateTime.Today,"%Y-%m-%d")
      FilePath=FilePath & "\" & iif(instr(strFileName,"xlsx") > 0,strFileName,strFileName & ".xlsx")  
      log.Message FilePath
      Exit For
    Else
      log.Message "STP file not found in " & objArray(i).FullName
    End If
  Next
  
  Delay(2000)
  
  Set objSTPXls=GetObject(FilePath)
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With

    With .WorkSheets(STPSheetName)
      Dim r
        delay Status_Wait, "Finding last Row the Excel sheets.. Pls wait.."
        For r = 1 To .UsedRange.Rows.Count
          If IsEmpty(.UsedRange.Cells(r, 1).Value) = True AND (.UsedRange.Cells(r, 1).Text) ="" Then           
           intlastRow=r           
           Exit For
          End  If 
        Next
        inti=3
        lastColumn=.UsedRange.Columns.Count
       For inti = 3 to lastColumn
          strText=.Cells(2,inti)
          .Cells(intlastRow,inti).Select
          If UCASE(strText)=UCase("Series Name") then 
          .Cells(intlastRow,inti).Value=strSeriesName
          ElseIf UCASE(strText)=UCase("Source Series Name") then 
          .Cells(intlastRow,inti).Value=strSourceSeriesName
          ElseIf UCASE(strText)=UCase("Series Source Code") then 
          .Cells(intlastRow,inti).Value=strSeriesSourceCode
          ElseIf UCASE(strText)=UCase("Series Status") then 
          .Cells(intlastRow,inti).Value=strSeriesStatus
          ElseIf UCASE(strText)=UCase("ForeCast") then 
          .Cells(intlastRow,inti).Value=strForeCast
          ElseIf UCASE(strText)=UCase("Series Type") then 
          .Cells(intlastRow,inti).Value=strSeriesType
          ElseIf UCASE(strText)=UCase("Series Country") then 
          .Cells(intlastRow,inti).Value=strSeriousCountry
          ElseIf UCASE(strText)=UCase("Output Unit") then 
          .Cells(intlastRow,inti).Value=strOutputUnit
          ElseIf UCASE(strText)=UCase("Series Nature") then 
          .Cells(intlastRow,inti).Value=strSeriesNature
          ElseIf UCASE(strText)=UCase("Series Freq") then 
											intFreqColumn = inti														
          .Cells(intlastRow,inti).Value=strSeriesFreq
          ElseIf UCASE(strText)=UCase("Source Unit") then 
          .Cells(intlastRow,inti).Value=strSourceUnit
          ElseIf UCASE(strText)=UCase("Unit Type") then 
              .Cells(intlastRow,inti).Value=strUnitType  
          ElseIf isDate(strText)  then
              strStartcolumn=inti
              Exit For
          End if 
         Next 
         
          Delay 5000 , "Creating a new series.."
          
          strTimepoints = getSplitValue(strParameters,"Timepoints")
          strTimepoints= 6
          If strTimepoints=6 then
              ''Copy the Series for 1 row 
              strEndSeriesColumn=strStartcolumn-3
              strEndSeriesColumn=GetColumnName(strEndSeriesColumn)
              Delay(5000)
        
              With objSTPXls
                With .Sheets(STPSheetName).Select
                End With      
                With .WorkSheets(STPSheetName)
                   .Range("C" & intlastRow & ":" & strEndSeriesColumn & intlastRow ).Select
                    intTargetRow=intlastRow + 1
                    .Range("C" & intlastRow & ":" &strEndSeriesColumn & intlastRow).AutoFill  .Range("C" & intlastRow & ":" & strEndSeriesColumn & intTargetRow), xlFillDefault
																				.Cells(intlastRow+1,intFreqColumn).Select
																				.Cells(intlastRow+1,intFreqColumn).Value=strSeriesFreq																														       
                End With
              END WITH
          End If
          
         'Mark Good          
       Call sClicKMarkGood(2,strTestDataFile)
       
       'Click Upload
       Call sClickUpload(2,strTestDataFile)
       
       'Click Information message
       Call sClickonInformation(2,"No")
       
        
				'Click Refresh 
        Call sClickRefresh(2,strTestDataFile)
        Call sExcelFullHistory   
      

    End With
  End With 
  log.Message  "New Series Created"
  strTCRemarks =  "Created Series for STP" 
  strTestCaseResult="PASS"
  
  
  
  With objSTPXls
    With .Sheets(STPSheetName).Select
    End With      
    With .WorkSheets(STPSheetName)
        intcount=0
        if strStartcolumn=0 then
        End if
        For intj= (strStartcolumn + 1) to lastColumn 
          If IsEmpty(.UsedRange.Cells(intlastRow, intj).Value) = True AND (.UsedRange.Cells(r, intj).Text) ="" Then
            if intcount<=5 then
              .Cells(intlastRow,intj).select
              .Cells(intlastRow,intj).Value=strTimepoints
              strTimepoints=strTimepoints + 1
            Else
              Exit For
            End if 
            intcount=intcount+1 
          End If  
        Next
        
        
     'Mark Good          
       Call sClicKMarkGood(2,strTestDataFile)
       
       'Click Upload
       Call sClickUpload(2,strTestDataFile)
       
       'Click Information message
       Call sClickonInformation(2,"No")
       
        
              
        'Refresh Series
        With objSTPXls
          With .WorkSheets(STPSheetName)                 
                'Set wndEXCEL7 = Aliases.EXCEL.wndXLMAIN.XLDESK.wndEXCEL72
                .Cells(intlastRow,1).Select
                ' Call wndEXCEL7.Keys("^c")
               strSeriesID=.Cells(intlastRow,1).Value															
               strSeriesID=.Cells(intlastRow,1).text															
              .Cells(intlastRow,lastColumn).Select
          End With
        End With
         strTCRemarks =  "Created New Series for STP - "&strSeriesID 
    End With
  End With 
'  objSTPXls.Close
'  Delay(10000)
  objArray = Sys.FindAllChildren("ProcessName","EXCEL", 5,True)
  For i=0 to ubound(objArray)
    log.Message objArray(i).FullName
    set oSTP_ExcelObj = objArray(i).FindChild("WndCaption", "*RUN*",1,True)
    If oSTP_ExcelObj.Exists = True Then
    Else
      objArray(i).Close
    End If
  Next
  Delay(5000)
  Call SClosesource()
End Sub 