'USEUNIT DM
'USEUNIT File_Repository
'USEUNIT HTML
'USEUNIT Layout
'USEUNIT Master_Maintanance
'USEUNIT PRT_BMT
'USEUNIT Release_Schedule
'USEUNIT Series_Search
'USEUNIT Source
'USEUNIT SourceSchedule
'USEUNIT STP
'USEUNIT To_Do_Panel

Option Explicit

' **** Code Base - 2.5.12.7 ****
Sub sVerifyResultinGrid(sVerifyResult,SelectAll)
                                                       
dim intI,intJ, aArray, aArray1, blnSidFound, strSeriesSuffix 
blnSidFound = False
On Error Resume Next
Log.Message " strTestCaseResult : " & strTestCaseResult 
If strTestCaseResult <> "PASS" Then
  Exit Sub
End If


Log.Message "Inside sVerifyResultinGrid()"
Set objTemp = Sys.Process("ISI.CeicDataManager.Startup").Find("Name","WinFormsObject(""GridEX_Series"")",6,True)
If objTemp.Exists = True Then
  ' Uncheck all rows
  For intI = 0 to objTemp.RowCount - 1
    objTemp.row = intI
    ObjTemp.CurrentRow.set_CheckState(1)
  Next
  ObjTemp.Refresh
  aArray = Split(sVerifyResult,";")
  For intJ = 0 to UBound(aArray)
      strSeriesSuffix = ""
      If aArray(intJ) <> "" Then
          Log.Message "Looking for " & aArray(intJ) 
          aArray1 = Split(aArray(intJ),":")
            strTemp = Trim(aArray1(0))
          If UBound(aArray1) > 0 Then  
            If aArray1(1) <> "" Then
              strSeriesSuffix = Trim(aArray1(1))
              Log.Message "StrSeriessuffix value: " & strseriessuffix   
            End If 
          End If
      End If 
    blnSidFound = False
    'Series ID
    If strTemp <> "" Then
    Log.Message "Looking for Series ID value : " & strTemp 
        If strSeriesSuffix <> "" Then
        'Series ID/Name
         For intI = 0 to objTemp.RowCount - 1
          objTemp.row = intI
          Log.Message "Inside If Condition - sVerifyResultinGrid() "
          Log.Message "Function returns :" & aqString.Find(Ucase(objTemp.CurrentRow.Cells.Item(6).Text),strSeriesSuffix)
          Log.Message "Series name in Grid-" & Ucase(objTemp.CurrentRow.Cells.Item(6).Text) 
          If objTemp.CurrentRow.Cells.Item(17).Text = strTemp And _
              aqString.Find(Ucase(objTemp.CurrentRow.Cells.Item(6).Text),strSeriesSuffix)<> -1 Then
                  Log.Message("Series ID : " & objTemp.CurrentRow.Cells.Item(17).Text) & " found in row number " & intI
                  Log.Message "True for the Series Name - " & objTemp.CurrentRow.Cells.Item(6).Text 
                  blnSidFound = True
                  Exit For 
          End If 
         Next   
        ElseIf strSeriesSuffix = ""  Then
         For intI = 0 to objTemp.RowCount - 1
          objTemp.row = intI
         'Series ID
          Log.Message "Inside Else Condition- sVerifyResultinGrid() "  
          If objTemp.CurrentRow.Cells.Item(17).Text = strTemp Then
                Log.Message("Series ID : " & objTemp.CurrentRow.Cells.Item(17).Text & " found in row number " & intI) 
                Log.Message "True for the Series Name - " & objTemp.CurrentRow.Cells.Item(6).Text
                blnSidFound = True
                Exit For 
          End IF
         Next  
        End If
        If blnSidFound = False Then
          strTCRemarks = "Series ID(s) - " & aArray(intJ) & " not found in the Grid"
          strTestCaseResult = "FAIL"
          Exit Sub
        End If  
        ObjTemp.Refresh
     End IF
  Next
  
  strTCRemarks = "Math functions applied successfully in the Grid"
  Log.Message strTCRemarks  
  If SelectAll = True then  
  For intI = 0 to objTemp.RowCount - 1
      objTemp.row = intI
      ObjTemp.CurrentRow.set_CheckState(0)
  Next
  Else
      objTemp.row = 1
      ObjTemp.CurrentRow.set_CheckState(0)
  end if   
Else
  strTCRemarks = "Problem in verifying Math functions in Grid."
  strTestCaseResult = "FAIL"
End IF

If Err.Number <> 0 Then
  Log.Warning "Error in 'sVerifyResultinGrid' - " & Err.Description
  Err.Clear
End IF

End Sub 

Sub sVerifyWorkspace(sData1)
On Error Resume Next 
dim oTemp, aArray1, aArray2, blnContinue
dim intI, intJ, intK,sselect
dim intSeriesID, intSeriesName
dim strSeriesSuffix, aArray, blnSidFound
blnContinue = False  
dim sColumns, sRow, selRow, sWorkspaceName, sPreviewText
sWorkspaceName=getSplitValue(sData1,"NAME")
sselect=getSplitValue(sData1,"Select")
intSeriesID = ""
intSeriesName = ""

sWorkspaceName=getSplitValue(sData1,"NAME")
sRow=getSplitValue(sData1 ,"ROW")
sColumns=getSplitValue(sData1 ,"VERIFYCOLUMNS")
sPreviewText=getSplitValue(sData1 ,"PREVIEWTEXT")

'-------------------------------------------------------------------------
Call sKeyboard_ShortCut_MDI("MYCDM")    
Set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form")._
                         WinFormsObject("uiPanel_Tree").WinFormsObject("uiPanel_TreeContainer")._
                         WinFormsObject("WorkspaceClassification1").WinFormsObject("ExplorerBar_SearchWks")._
                         WinFormsObject("ExplorerBarContainerControl2").Waitchild("WinFormsObject(""TreeView_Workspace"")",10000)
              
If objTemp.Exists = True Then
    Sys.keys "[Home]"
    Delay(2000)
    objTemp.clickItem("|My Workspaces|" & sWorkspaceName)
    Sys.keys "[Esc]"
    objTemp.SelectItem("|My Workspaces|" & sWorkspaceName)     
    Delay(2000)
    Log.Message(sWorkspaceName & " found in the workspace") 
Else
  strTestCaseResult="FAIL"
  strTCRemarks= "Workspace Treeview not loaded"
  Log.Message(strTCRemarks)
  Exit Sub 
End IF
'---------------------------------------------------------------------------
set oTemp = objCDM_MDI.WinFormsObject("MdiClient", ""). _
                    WinFormsObject("WorkspaceSeries_Form"). _
                    WinFormsObject("SplitContainer_Workspace"). _
                    WinFormsObject("SplitterPanel", "",2). _
                    WinFormsObject("GridEX_Series") 
'-----------------------------------------------------------------------------
'Getting Series ID and Series Name index from Grid
      oTemp.row = 0
     'Series ID
      For intK = 0 to oTemp.CurrentTable.Columns.Count - 1
          If Trim(Ucase(oTemp.CurrentRow.Cells.Item(intK).Column.Caption)) = "SERIES ID" Then
              intSeriesID = intK
          End If 
          If Trim(Ucase(oTemp.CurrentRow.Cells.Item(intK).Column.Caption)) = "SERIES NAME" Then
              intSeriesName = intK
          End If 
      Next
'---------------------------------------------------------------------------                    
strSeriesSuffix = ""
aArray = Split(sRow,":")
strTemp = Trim(aArray(0))
If UBound(aArray) > 0 Then  
      If aArray(1) <> "" Then
        strSeriesSuffix = Trim(aArray(1))
        Log.Message "StrSeriessuffix value: " & strseriessuffix   
      End If 
End If 
blnSidFound = False                   
If strTemp <> "" Then
   Log.Message "Looking for Series ID value : " & strTemp 
    If strSeriesSuffix <> "" Then
    'Series ID/Name
     For intI = 0 to oTemp.RowCount - 1
      oTemp.row = intI
      If oTemp.CurrentRow.Cells.Item(intSeriesID).Text = strTemp And _
          aqString.Find(oTemp.CurrentRow.Cells.Item(intSeriesName).Text,strSeriesSuffix)<> -1 Then
              Log.Message("Series ID : " & oTemp.CurrentRow.Cells.Item(intSeriesID).Text) & " found in row number " & intI
              selRow = intI               
              blnSidFound = True
              Exit For 
      End If 
     Next   
    ElseIf strSeriesSuffix = ""  Then
     For intI = 0 to oTemp.RowCount - 1
      oTemp.row = intI

      If oTemp.CurrentRow.Cells.Item(intSeriesID).Text = strTemp Then
            Log.Message("Series ID : " & oTemp.CurrentRow.Cells.Item(intSeriesID).Text) & " found in row number " & intI     
            selRow = intI 
            blnSidFound = True
            Exit For 
      End IF
     Next  
    End If
    If blnSidFound = False Then
      strTCRemarks = "Series ID(s) - " & sRow & " not found in the Grid"
      Log.Message(strTCRemarks)
      strTestCaseResult = "FAIL"
      Exit Sub
    End If  
End IF
'---------------------------------------------------------------------------                    
aArray1 = Split(Trim(UCASE(sColumns)),";")
For intI = 0 to UBound(aArray1) 
    If aArray1(intI) <> "" Then
    blnContinue = False 
        aArray2 = Split(aArray1(intI),":",2)
            oTemp.row = selRow 
            For intK = 0 to oTemp.CurrentTable.Columns.Count - 1
                If Ucase(Trim(oTemp.CurrentRow.Cells.Item(intK).Column.Caption)) = Trim(aArray2(0)) Then
                    blnContinue = True 
                     If blnContinue Then
                      Exit For                                     
                     Else
                        strTestCaseResult = "FAIL"
                        strTCRemarks = aArray2(1) & " value not found in the workspace created"
                        Log.Message(strTCRemarks)
                        Exit Sub   
                     End If                     
                End If 
            Next
            If sPreviewText <> "" Then
              If sPreviewText = oTemp.CurrentRow.PreviewRowText Then
                  strTCRemarks = "Preview text verified in the workspace"
                  Log.Message(strTCRemarks)
              Else
                  strTCRemarks = "Preview text not matched in the imported workspace"
                  strTestCaseResult="FAIL"
                  Log.Message(strTCRemarks)
                  Exit Sub 
              End If  
            End If 
            If blnContinue = False Then
                  strTestCaseResult = "FAIL"
                  strTCRemarks = aArray2(0) & " column not found in the workspace created"
                  Log.Message(strTCRemarks)
                  Exit Sub  
            End If           
    End If          
Next   
If blnContinue = True Then
    strTCRemarks = "All the given values are verified in the workspace."
    Log.Message(strTCRemarks)
    if sselect="ALL" then
        otemp.checkallrecords
    end If
End If 

If Err.Number <> 0 Then
  Log.Warning("Err.Number" & Err.Number)
  Log.Warning("Error occurred in 'sVerifyWorkspace' - " & Err.Description)
  Err.Clear
End IF
End Sub 

Sub sVerifyMathFunction(sSeriesIds,PreviewText,SelectAll)
dim intI,intJ, aArray, blnSidFound 

blnSidFound = False

On Error Resume Next

If strTestCaseResult <> "PASS" Then
  Exit Sub
End IF
Set objTemp = Sys.Process("ISI.CeicDataManager.Startup").Find("Name","WinFormsObject(""GridEX_Series"")",6,True)
If objTemp.Exists = True Then
  For intI = 0 to objTemp.RowCount - 1
    objTemp.row = intI
    ObjTemp.CurrentRow.set_CheckState(1)
  Next
  ObjTemp.Refresh
  aArray = Split(sSeriesIds,";")
  Log.Message("Number of series ids to be verified in workspace grid is : " & UBound(aArray))
  For intJ = 0 to UBound(aArray)
  strTemp = aArray(intJ)
  Log.Message " looking for series ID :" & strTemp
    blnSidFound = False
    If strTemp <> "" Then
    Log.Message("Number of rows to be searched - " & objTemp.RowCount)
      For intI = 0 to objTemp.RowCount - 1
        objTemp.row = intI
        if objTemp.CurrentRow.Cells.Item(17).Text = strTemp Then
          Log.Message("Series ID : " & objTemp.CurrentRow.Cells.Item(17).Text) & " found in row number " & intI 
          Log.Message "Preview Text in Grid:" & objTemp.CurrentRow.PreviewRowText
          If objTemp.CurrentRow.PreviewRowText = PreviewText Then
            ObjTemp.CurrentRow.set_CheckState(0)
            blnSidFound = True
            Exit For 
          End IF
          If SelectAll = True Then
            ObjTemp.CurrentRow.set_CheckState(0)
          End IF
        End IF
      Next
      ObjTemp.Refresh
       If blnSidFound = True Then
         Exit For
       End If 
    End IF
  Next
   If blnSidFound = False Then
          strTCRemarks = "Series ID(s) - '" & strTemp & "' with function description '"& PreviewText & "' not found in workspace created"
          strTestCaseResult = "FAIL"
          Exit Sub
   End IF
  strTCRemarks = "Math function verification completed successfully"
Else
  strTCRemarks = "Math functions verification failed."
  strTestCaseResult = "FAIL"
End IF

If Err.Number <> 0 Then
  Log.Warning "Error in 'sVerifyMathFunction' - " & Err.Description
  Err.Clear
End IF

End Sub 

Sub sSelect_MyCDM_Series(sSeriesIds, SelectAll)
dim intI,intJ, aArray, blnSidFound, strSeriesSuffix, aArray1  
blnSidFound = False
strSeriesSuffix=""
On Error Resume Next

If strTestCaseResult <> "PASS" Then
  Exit Sub                  
End IF

Set objTemp = Sys.Process("ISI.CeicDataManager.Startup").Find("Name","WinFormsObject(""GridEX_Series"")",6,True)
If objTemp.Exists = True Then
'  For intI = 0 to objTemp.RowCount - 1
'    objTemp.row = intI
'    ObjTemp.CurrentRow.set_CheckState(1)
'  Next
  objTemp.UncheckAllRecords
  ObjTemp.Refresh        
  
  If Ucase(sSeriesIds="ALL")Then 
    objTemp.CheckAllRecords
    Log.Message("All Series Selected")
    Exit Sub
  End If
  
  aArray = Split(sSeriesIds,";")
  For intJ = 0 to UBound(aArray)
  If aArray(intJ) <> "" Then
    aArray1 = Split(aArray(intJ),":")
    strTemp = aArray1(0)
  If UBound(aArray1) > 0 Then  
  If aArray1(1) <> "" Then
    strSeriesSuffix = aArray1(1)
  End If 
  End If   
  Log.Message " looking for series ID :" & strTemp
    blnSidFound = False
    If strTemp <> "" Then
    Log.Message("Number of rows to be searched - " & objTemp.RowCount)
      For intI = 0 to objTemp.RowCount - 1
        objTemp.row = intI        
        If strSeriesSuffix <> "" Then
          If objTemp.CurrentRow.Cells.Item(17).Text = strTemp And _
              aqString.Find(objTemp.CurrentRow.Cells.Item(6).Text,strSeriesSuffix)<> -1 Then
                Log.Message("Series ID : " & objTemp.CurrentRow.Cells.Item(17).Text) & " found in row number " & intI
                Log.Message("Series Name : " & objTemp.CurrentRow.Cells.Item(6).Text) 
                  ObjTemp.CurrentRow.set_CheckState(0)
                  blnSidFound = True
                   If SelectAll <> "ALL" Then
                    Exit For
                  End IF
          End If 
        ElseIf strSeriesSuffix = ""  Then
              If objTemp.CurrentRow.Cells.Item(17).Text = strTemp Then
                Log.Message("Series ID : " & objTemp.CurrentRow.Cells.Item(17).Text & " found in row number " & intI) 
                ObjTemp.CurrentRow.set_CheckState(0)
                blnSidFound = True
                 If SelectAll <> "ALL" Then
                    Exit For
                  End If        
          End IF
        End If 
      Next
      ObjTemp.Refresh
      If blnSidFound = False Then
          strTCRemarks = "Series ID(s) - '" & strTemp & "' not found in workspace created"
          strTestCaseResult = "FAIL"
          Exit Sub
        End IF
    End IF
  End IF 
  Next
  strTCRemarks = "Series ID - " & sSeriesIds & " found in the workspace created" 
Else
  strTCRemarks = "Problem in verifying SeriesID  -" & strTemp  
  strTestCaseResult = "FAIL"
End IF

If Err.Number <> 0 Then
  Log.Warning "Error in 'sSelect_MyCDM_Series' - " & Err.Description
  Err.Clear
End IF
End Sub 

' This procedure will open MyCDM and select given workspace in the workspace tree.
Sub sSelectWorkspace(sWorkspace_Name)
On Error Resume Next
 
' Invoke MyCDM
Call sKeyboard_ShortCut_MDI("MyCDM")
Set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "")._
                  WinFormsObject("WorkspaceSeries_Form").WinFormsObject("uiPanel_Tree")._
                  WinFormsObject("uiPanel_TreeContainer").WinFormsObject("WorkspaceClassification1")._
                  WinFormsObject("ExplorerBar_SearchWks").WinFormsObject("ExplorerBarContainerControl2")._
                  WinFormsObject("TreeView_Workspace")
            
strTemp = "|My Workspaces|" & sWorkspace_Name & ""
If objTemp.Exists = True Then

  Call objTemp.clickItem(strTemp) 
  Sys.keys "[Esc]"
   Delay 2000, "Please wait while the workspace get loaded"
  ' objTemp.clickItem(objTemp.wItem(1))
  
  Sys.keys "[Esc]"
  Delay 2000, "Please wait while the workspace get loaded"
   Set objTemp =objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form").WinFormsObject("SplitContainer_Workspace")._
                 WinFormsObject("SplitterPanel", "").WaitChild("WinFormsObject(""GridEX_Series"")", 5000)
   if  objTemp.exists = false then
           set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form").WinFormsObject("SplitContainer_Workspace").WinFormsObject("SplitterPanel", "", 2).WinFormsObject("GridEX_Series")
        end if
   objTemp.row=0 
   objTemp.CurrentRow.set_isChecked(True)
Else
  strTestCaseResult = "FAIL"
  strTCRemarks = "Error while loading workspace in MyCDM"
  Exit sub
End IF
If Err.Number <> 0 Then
  Log.Warning "Error in 'sCloseTabs' - " & Err.Description
  Err.Clear
End IF
End Sub

' This procedure will close all active tabs except Start.  
' Used for clearing extra tabs in right pane - kind of clearing cDM before executing testcases.
Sub sCloseTabs
' Author - Guru
' Start Date - 18-10-2009
' Last updated - 18-10-2009
Err.Clear
Dim intTabs
Err.Clear
On Error resume Next
set objTemp = Nothing
Set objTemp = objCDM_MDI.WaitChild("WinFormsObject(""UIMdiTabGroup"", """", 2)",5000) 
  If objTemp.Exists = True Then
    intTabs = objTemp.get_tabCount() 
    If  intTabs > 1 Then   
      Do until objTemp.TabCount = 1
        objTemp.MdiTabs.System_Collections_IList_Item(intTabs - 1).Form.Activate
        objTemp.MdiTabs.System_Collections_IList_Item(intTabs - 1 ).Form.Close
        intTabs = intTabs - 1 
        If Err Then
          Log.Warning "Error in 'sCloseTabs' - " & Err.Description
          Err.Clear
          Break
        End IF        
      Loop                        
    End IF 
  End IF
If Err.Number <> 0 Then
  Log.Warning "Error in 'sCloseTabs' - " & Err.Description
  Err.Clear
End IF
End Sub

'This function will split keyword parameters and return parameter set for given input value

Function getSplitValue(CellText,Value)
' Author - Guru
' Start Date - 19-10-2009
' Last updated - 19-10-2009

Dim aArray,aArray1, intI
On Error resume Next

'msgbox CellText
'msgbox Value
getSplitValue = ""
Log.Message " Text - " & CellText & " and looking for " & Value

aArray = split(cellText,chr(10))
For intI = 0 to ubound(aArray)
  If aArray(intI) <> "" Then
     aArray1 = Split(aArray(intI),"=",2)           
    If ucase(Trim(aArray1(0))) = Ucase(Value) Then
       getSplitValue = Trim(cStr(aArray1(1)))
       ' msgbox Trim(cStr(aArray1(1)))
       Exit For 
    End IF
  End IF
Next

If getSplitValue = "" Then
  Log.Message("No value found for '" & Value & "' in '" & CellText & "'")
End IF

If Err.Number <> 0 Then
  Log.Warning "Error in 'getSplitValue' - " & Err.Description
  Err.Clear
End IF
End Function

Function getSplitValuewithoutTrim(CellText,Value)
' Author - Guru
' Start Date - 19-10-2009
' Last updated - 15-01-2011

dim aArray,aArray1, intI
On Error resume Next

getSplitValuewithoutTrim = ""
Log.Message " Text - " & CellText & " and looking for " & Value

aArray = split(cellText,chr(10))
For intI = 0 to ubound(aArray)
  If aArray(intI) <> "" Then
     aArray1 = Split(aArray(intI),"=",2)           
    If ucase(Trim(aArray1(0))) = Ucase(Value) Then
       getSplitValuewithoutTrim = aArray1(1)
       Exit For 
    End If
  End If
Next

If getSplitValuewithoutTrim = "" Then
  Log.Message("No value found for '" & Value & "' in '" & CellText & "'")
End IF

If Err.Number <> 0 Then
  Log.Warning "Error in 'getSplitValuewithoutTrim' - " & Err.Description
  Err.Clear
End IF
End Function

' Just log and click on OK button
Function sLookFor_ErrorMsg
Dim oTemp
dim PicObj

ON Error Resume Next
sLookFor_ErrorMsg = False

If fCDM_Process_Running = True Then
strTemp = "WinFormsObject(""InfoMsgBox_Form"")"   
Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").WaitChild(strTemp, 15)  ' reset to 60 seconds in final version
If oTemp.Exists = True Then
  Log.Picture Sys.Desktop.ActiveWindow(),"CDM Error", "CDM Error appeared while executing TC - "  & strTestCase_No, pmHighest
  Set PicObj = Utils.Picture
  Set PicObj = Sys.Desktop.ActiveWindow.Picture()
  PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
  picCount = picCount + 1
   strTCRemarks = "CDM error message : '" & oTemp.WinFormsObject("Label_Information").WndCaption & "' appeared "
  '----------------------------------------------------------------
  If oTemp.WinFormsObject("Label_Information").WndCaption = "Login session expired" Then
    strTestCaseResult = "ABORT" 
    strTCRemarks = "'Login session expired' message appeared"
    sLookFor_ErrorMsg = True
    oTemp.WinFormsObject("Button_OK").Click 
    Log.Message(strTCRemarks)
    LogOutCDM()
    Exit Function
  End If   
  '-----------------------------------------------------------------
  If strTestCaseResult <> "FAIL"  Then
    strTestCaseResult = "ABORT"
    Log.Warning(strTCRemarks)
  Else
    Log.Message(strTCRemarks)
  End If
  sLookFor_ErrorMsg = True
  oTemp.WinFormsObject("Button_OK").Click 
  Exit Function
End If
 
Set oTemp = Sys.WaitProcess("ISI.CeicDataManager.Startup",50,-1)    ' reset to 60 seconds in final version
If oTemp.Exists = True Then 
     strTemp = "WinFormsObject(""SeriesListErrorInfo_Form"")"  
    Set otemp=Sys.Process("ISI.CeicDataManager.Startup").WaitChild(strTemp, 15)
    If oTemp.Exists = True Then 
    strTCRemarks = "CDM error message : '" & oTemp.WinFormsObject("SplitContainer_List"). _
                            WinFormsObject("SplitterPanel", ""). _
                            WinFormsObject("Label_Message").Text & "' appeared "
    strTestCaseResult = "FAIL"
    Log.Message(strTCRemarks)
    sLookFor_ErrorMsg = True
    oTemp.WinFormsObject("Panel1").WinFormsObject("TableLayoutPanel1").WinFormsObject("UiButton_OK").Click   
    Exit Function 
   End If
End If  

set otemp=Sys.WaitProcess("ISI.CeicDataManager.Startup",50,-1)
If oTemp.Exists = True Then 
strTemp = "WinFormsObject(""Subscribe_Form"")"   
Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").WaitChild(strTemp, 15)  ' reset to 60 seconds in final version
If oTemp.Exists = True Then 
    strTCRemarks = "CDM error message : '" & oTemp.WinFormsObject("Label2").Text & "' appeared "
    strTestCaseResult = "FAIL"
    Log.Message(strTCRemarks)
    sLookFor_ErrorMsg = True
    oTemp.WinFormsObject("UiButton_Cancel").Click   
    Exit Function 
End If 
End if

Set oTemp = Sys.WaitProcess("ISI.CeicDataManager.Startup",50,-1)  ' reset to 60 seconds in final version
If oTemp.Exists = True Then
  strTemp = "Window(""#32770"", ""CEIC Data Manager"", 1)"
  Set oTemp= Sys.Process("ISI.CeicDataManager.Startup").Find("Name",strTemp,3, True)
  If oTemp.Exists = True Then
  strTCRemarks = "CDM error message : 'Problem Connecting to our server.  " & _
                    "Please review your internet connection and try again.' appeared "

  Set PicObj = Utils.Picture
  Set PicObj = Sys.Desktop.ActiveWindow.Picture()
  PicObj.SavetoFile(strLogFolder & "Screenshots\" & strTestCase_No &  "_" & picCount & ".jpg")
  picCount = picCount + 1                      
  If strTestCaseResult <> "FAIL"  Then
    strTestCaseResult = "ABORT"
    Log.Warning(strTCRemarks)
  Else
    Log.Message(strTCRemarks)
  End If
  set otemp=otemp.waitwindow("Button", "OK", 1,50)
  If otemp.exists=True Then
  oTemp.Click
      delay(500)
      
      If otemp.exists=True Then
        otemp.close
        End If
  
  End If
  
  sLookFor_ErrorMsg = True
End IF
End If
End IF
If Err.Number <> 0 Then
  Log.Warning "Error in 'sLookFor_ErrorMsg' - " & Err.Description
  Err.Clear
End IF

End Function

' Cancel Login window if exists
Sub sCancel_Login

Dim oTemp

strTemp = "WinFormsObject(""Login_Dialog"")"   
Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").WaitChild(strTemp, 3000)  ' reset to 60 seconds in final version
If oTemp.Exists = True Then
  Log.Message("Cancelling login window after error")
  oTemp.WinFormsObject("Button_Cancel").Click
  blnCDM_Login = False
End IF
End Sub

Function fCDM_Already_Exists
Dim oTemp
  fCDM_Already_Exists = False
  If fCDM_MDI_Loaded = True Then
    strTemp = "WinFormsObject(""CDMMain_MDIParent"")" 
    set objTemp = Sys.Process("ISI.CeicDataManager.Startup").Waitchild(strTemp,10000)
    If objTemp.Exists = False   then    
      Set objTemp = Sys.Process("ISI.CeicDataManager.Startup").Window("WindowsForms10.Window.8.app.0.9585cb", "CEIC Data Manager", 1)
    End If  
    strTemp = "WinFormsObject(""Layout_Form"")"
    set oTemp = objTemp.WinFormsObject("MdiClient", "").Waitchild(strTemp,3000)
    

    
    If oTemp.Exists = True Then  
      Delay Status_Wait, "CDM Main Grid Found"  
      fCDM_Already_Exists = True         
    Else
      fCDM_Already_Exists = False
      Delay Status_Wait, "CDM Grid NOT loaded"
    End IF
  Else
    fCDM_Already_Exists = False
    Delay Status_Wait, "CDM MDI not loaded"
  End If

End Function

Sub sDeleteAllWorkspaces(keyword, sdata1, sdata2)
On Error Resume Next
Dim oTemp, intI 
intI = 0 
' Invoke MyCDM
CAll sKeyboard_ShortCut_MDI("MyCDM")
Delay 500, "Please wait while we clear workspace"

Set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form")._
                         WinFormsObject("uiPanel_Tree").WinFormsObject("uiPanel_TreeContainer")._
                         WinFormsObject("WorkspaceClassification1").WinFormsObject("ExplorerBar_SearchWks")._
                         WinFormsObject("ExplorerBarContainerControl2").Waitchild("WinFormsObject(""TreeView_Workspace"")",10000)
 
If objTemp.Exists = True Then
  objTemp.set_SelectedNode(objTemp.Nodes.Item(0)) 
  intI = objTemp.wItemCount
  Do Until intI <= 1 
    intI = intI - 1
    Log.Message "Deleting .. " & objTemp.wSelection  
      Delay 2000, "Please wait while the workspace get loaded"
    objTemp.clickItem(objTemp.wItem(1))
    Sys.keys "[Esc]"
      Delay 2000, "Please wait while the workspace get loaded"
    Sys.keys "[Del]"    
    strTemp = "WinFormsObject(""frm_DeleteWorkspace"")"   
    Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").WaitChild(strTemp, 3000)  ' reset to 60 seconds in final version
    If oTemp.Exists = True Then
      oTemp.WinFormsObject("UiButton1").Click()
    Else
    End IF    
  Delay(1000)
  while objtemp.Exists=False 
    delay 100
  wend  
  Loop    
Else
End IF
   
 


  objTemp.set_SelectedNode(objTemp.Nodes.Item(0))  
  If objTemp.wItemCount > 1 Then
    Log.Warning("Delete all workspaces didn't perform as expected")
  End IF

If Err.Number <> 0 Then
  Log.Warning("Error in 'sDeleteWorkspace' function - " & Err.Description)
  Err.Clear
End IF
End Sub

' This function will wait till 'Download Complete' window appears during data download.
Function sCDM_Download_Complete
dim oTemp 
sCDM_Download_Complete = False

    strTemp = "WinFormsObject(""CDMYesNoDialog"")"
    Set oTemp =Sys.Process("Excel").WaitChild(strTemp, 20)  ' reset to 60 seconds in final version

    If oTemp.Exists = True Then
           if sExStop="DOWNCONF" then
                Watch.stop
                blnTimeRecorded = True
           end if
           strTemp = "WinFormsObject(""TableLayoutPanel1"")"
           Set oTemp =Sys.Process("Excel").WinFormsObject("CDMYesNoDialog").WaitChild(strTemp, 60)  ' reset to 60 seconds in final version

            strTCRemarks = "CDM Data download completed successfully"
            oTemp.WinFormsObject("UiButton_Yes").Click          
            sCDM_Download_Complete = True
            Exit Function
      Else     
        sCDM_Download_Complete = False
      End If
  
End Function

' This function will wait till 'Download Complete' window appears during data download.
Function sCDM_Export_Complete
dim oTemp 
Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").Find("Name","WinFormsObject(""frm_AlertMessages"")",6,True) 
If oTemp.Exists = True Then
    strTCRemarks = "Alert message '" & oTemp.WinFormsObject("AlertMessages1"). _
                      WinFormsObject("RichTextBox_AlertText").wText & "' appeared"
    oTemp.WinFormsObject("Panel1").WinFormsObject("UiButton_OK").Click 
End If 

sCDM_Export_Complete = False

strTemp = "WinFormsObject(""TableLayoutPanel1"")"
Set oTemp =Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("CDMYesNoDialog").WaitChild(strTemp, 8000)
  ' reset to 60 seconds in final version

If oTemp.Exists = True Then
  strTCRemarks = "CDM Data Export completed successfully"
  oTemp.WinFormsObject("UiButton_Yes").Click          
  sCDM_Export_Complete = True
  Exit Function
Else     
  sCDM_Export_Complete = False
End If
End Function

'Sub Log.Message(strLog)
'blnDebug = True
'  If blnDebug = False Then
'      strLog = strLog & vbCrlf 
'      blnWrite= aqFile.WriteToTextFile(strLogfile,strLog & vbCrlf,aqFile.ctANSI,False)
'  ElseIf blnDebug = True Then
'      Log.Message strLog 
'  End If       
'  blnDebug = True
'End Sub   

Sub sSelect_Start_DB(sData1)

On Error Resume Next 
dim sParent, sDatabase, oTemp, blnFound 
blnFound = False
sParent = getSplitValue(sData1,"PARENT") 
sDatabase = getSplitValue(sData1,"DATABASE")
Call sKeyboard_ShortCut_MDI("START")
strTemp = sParent & sDatabase & "|"  
'Invoke Start Tab



Set oTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("Layout_Form")._
                       WinFormsObject("uiPanel_DBTree").WinFormsObject("uiPanel_DBTreeContainer")._
                       WinFormsObject("TreeViewDatabase1").WinFormsObject("TreeV_Database")
If otemp.exists=False then       
    Set oTemp=objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("Layout_Form")._
       Window("WindowsForms10.Window.8.app.0.3ce0bb8", "Start", 2).WinFormsObject("uiPanel_DBTreeContainer")._
          WinFormsObject("TreeViewDatabase1").WinFormsObject("TreeV_Database")
End If
If oTemp.Exists = True Then   
delay(200)
oTemp.ClickItem(strTemp)

If sLookFor_ErrorMsg = True Then
  Log.Warning("Unexpected error occured in selecting database - " & sDatabase)
  Exit Sub
End If       
Set oTemp = objCDM_MDI.WaitChild("WinFormsObject(""UIMdiTabGroup"", """", 2)",5000) 
    If oTemp.SelectedTab.Text= "Start (" & sDatabase & ")" Then
      blnFound = True
    Else
      blnFound = False 
    End If 
Else 
   strTestCaseResult = "FAIL"
   strTCRemarks =  "Object doesn't exists"
   Exit Sub 
End If 
If blnFound = False Then
   strTestCaseResult = "FAIL"
   strTCRemarks =  "Tree view not displayed for the database - '" & sDatabase & "'"
Else
   strTCRemarks =  "Tree view displayed for the database - '" & sDatabase & "'"
End If 
If Err.Number <> 0 Then
  Log.Warning("Error in 'sSelect_Start_DB' function - " & Err.Description)
  Err.Clear
End IF 
End Sub   


Sub sSelectNSeries_Start(sData1)
	Dim  oTemp1, oTemp2, oTemp3, intI, intRecCount, intCount, intValue, intCurrRow, intStart, sFirstvalue
  Dim  selCount,sseries,gridex,i,sSeries_ID, sAction, sWorkSpace, sTopic, sSection, sTable, sTreeFlag,sNewWorkspace,intRow, intCol

 Err.Clear
 On error Resume Next
        
	blnSuccess = False 
	sFirstvalue = getSplitValue(sData1,"STARTFROM") 	
  sseries =getSplitValue(UCase(sData1),"SERIES")
	sSeries_ID=getSplitValue(UCase(sData1),"SERIES_ID")
	sAction = Trim(getSplitValue(UCase(sData1),"ACTION"))
  sWorkSpace = Trim(getSplitValue(UCase(sData1),"WORKSPACE"))  
  sTopic = Trim(getSplitValue(UCase(sData1),"DBTOPIC"))
  sNewWorkspace= Trim(getSplitValue(UCase(sData1),"NEWWORKSPACE"))
  selCount = CInt(getSplitValue(sData1,"SELECT"))  
  intRecCount = CInt(getSplitValue(sData1,"COUNT"))
  
 
  Log.Message(selCount)
	Log.Message(sFirstvalue) 
  sTreeFlag = "StartTree" 
  
  Sys.keys("~a")
	Call sCloseTabs
	
	Set gridEx = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("Layout_Form").WinFormsObject("Panel_Rebar")._
	WaitChild("WinFormsObject(""GridEX_Tree"")",10000)  
	
	If gridEx.Exists = True Then 
		
    Set Otemp1=	ObjCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("Layout_Form").WinFormsObject("Panel_Top")._
                WinFormsObject("grpLabels").WinFormsObject("flowMainPanel").WinFormsObject("lblClearAllDb")
    If otemp1.Visible=True Then
    Otemp1.Click
    
    End If
    'gridEx.UnCheckAllRecords()
    'gridEx.CollapseRecords()
    If sTopic <> "" Then
       Call  sExpandDBTree(sData1, sTreeFlag)
      
        If (selCount = 0 And sAction = "") Then
              Exit Sub
        End If

		else
    If sFirstValue <> "" Then
        intCount = 0
		
        For intI = 0 To gridEx.RowCount
    			gridEx.Row = intI 
			
    			If aqString.Find(gridEx.CurrentRow.Cells.Item(4).Text,sFirstValue)<>-1  Then
    	       Exit For 
          End If 
    		Next 
    End If
    End If
    
    If selCount <> 0 Then
		intValue=1
    intStart = gridEx.Row 
		For intI = intStart To 1000
			gridEx.Row = intI       
			gridEx.CurrentRow.set_Expanded(True)     
			If gridEx.CurrentRow.ChildrenLoaded = False Then 				
				intCurrRow = gridEx.Row               
				If sseries_ID<>"" Then
          If intValue = 1 Then
  					gridEx.Col = 24
  					gridEx.ClickM
            gridEx.set_Row(intCurrRow)
				  End If 
					If gridEx.CurrentRow.Cells.Item(27).Text=sSeries_ID Then  
						If sseries="" Then      
							Call sys.keys(" ") 
							
						ElseIf sseries="HIGHLIGHT" Then
							If intcount=0 Then
							Else 
								For i=1 To intcount
									gridEx.Keys("![Up]")
								Next 
							End If      
						End If
						intCount = intCount + 1
					End If 
					
				Else                 
					If sseries="" Then
						If intValue = 1 Then
							gridEx.Col = 24
							gridEx.ClickM
              gridEx.set_Row(intCurrRow) 
						End If      
						'gridEx.CurrentRow.IsChecked = True
						Call sys.keys(" ")  
						
					ElseIf sseries="HIGHLIGHT" Then
						If intcount=0 Then
						Else 
							For i=1 To intcount
								gridEx.Keys("![Up]")
							Next 
						End If                  
					End If
					intCount = intCount + 1
				End If   				
				If intCount = selCount Then
					blnSuccess = True  
					Exit For 
				End If  
				intValue = intValue+1
			End If			
		Next  
    
		If blnSuccess = True Then
			strTCRemarks = selCount & " series selected successfully"
		Else 
			strTestCaseResult = "FAIL"
			strTCRemarks = selCount & " series not selected"
		End If 
    End If
	Else
		strTestCaseResult = "FAIL"
		strTCRemarks = "Grid object doesn't exists"
	End If 
  
  If sAction = "INSERTTOWORKSPACE" Then
    'Call Add to My Series through short cut
    Sys.Keys("~k")     
    set oTemp1 = Sys.Process("ISI.CeicDataManager.Startup").WaitChild("WinFormsObject(""WorkspaceSelector_Form2"")",10000)
    If oTemp1.Exists = True Then
      oTemp1.Click
      Set oTemp2 = oTemp1.WinFormsObject("Panel1").WinFormsObject("TreeView_Workspace")
      if sWorkSpace<>"" then
          For intI = 0 to oTemp2.wItems.Item(0).Items.Count
          If UCase(oTemp2.wItems.Item(0).Items.Item(intI).Text) = sWorkSpace Then 
             oTemp2.wItems.Item(0).Items.Item(intI).Click 'Click and select the workspace
             Exit For
          else
             Otemp2.ClickItem(Otemp2.WItems.Item(0))   
          End If
          Next
      else
       otemp1.WinFormsObject("Panel2").WinFormsObject("EditBox_SaveTo").WinFormsObject("TextBox", "").wtext=sNewWorkspace
      sWorkSpace=sNewWorkspace
      end if      
      If UCase(oTemp1.WinFormsObject("Panel2").WinFormsObject("EditBox_SaveTo").Text) = sWorkSpace Then
        If sExStart = "ADDSERIES" Then
                         
          If blnTimeRecorded = False Then
            Watch.Start
          End IF				

          oTemp1.WinFormsObject("Panel2").WinFormsObject("UiButton_OK").Click
          
        End If
      Else        
        strTestCaseResult = "FAIL"
        oTemp1.Close
        Log.Message("Workspace not found")
        Exit Sub
      End If   
    
    If sExStop = "ADDCONF" Then  
      set oTemp3=ObjCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form")._
                WinFormsObject("SplitContainer_Workspace").WinFormsObject("SplitterPanel", "")._
                WaitChild("WinFormsObject(""GridEX_Series"")",2000)     
         If oTemp3.Exists = True Then
        
              If oTemp3.RecordCount = intRecCount+selCount Then 'Verify addition
                Watch.Stop
                blnTimeRecorded = True
              End If
         End If
     Else
        strTestCaseResult = "FAIL"
        Log.Message("Series Addition Failed")  
        Exit Sub
     End If
     End If   
  End If   
   If sAction = "POPULATE METADATA" Then
   intRow = CInt(gridEx.Row)
   intCol = 3
   Set oTemp2 = gridEx.GetCellBounds_2(intRow,intCol)   
   If sExStart = "GENERATEMETADATA" Then
     Call gridEX.Click(oTemp2.Left + oTemp2.Width/2, oTemp2.Top + oTemp2.Height/2) 
        If blnTimeRecorded = False Then
          Watch.Start
        End IF				
   End If
     If sExStop = "METAAPPEARED" Then
        Set oTemp2 = Sys.Process("ISI.CeicDataManager.Startup").WaitChild("WinFormsObject(""ExtRemarks_Form"")",8000)
        If oTemp2.VisibleOnScreen = True Then
          Watch.Stop
          blnTimeRecorded = True
          oTemp2.Close
          Log.Message("Metadata Appeared")
        Else
          strTestCaseResult = "FAIL"
          Log.Message("Metadata could not be generated")
          Exit Sub      
        End If
     End If 
  End If     
  
  If sAction = "EXPAND ALL TOPICS" Then
    intCount = gridEx.RecordCount
    Set oTemp2 = Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("CDMMain_MDIParent")._
    WinFormsObject("MdiClient", "").WinFormsObject("Layout_Form").WinFormsObject("Panel_Rebar")._
    WinFormsObject("TopRebar1").WinFormsObject("LayoutCommandBar")
    
    Set oTemp3 = oTemp2.Bounds        
    If sExStart = "EXPANDALL" Then
        If blnTimeRecorded = False Then
          Watch.Start
        End IF				
      Call oTemp2.Click(oTemp3.Width/9, oTemp3.Height/2)
      While gridEx.RecordCount<intCount
      Wend         
    End If
    If sExStop = "TOPICSEXPANDED" Then       
      Watch.Stop
      blnTimeRecorded = True
      Log.Message("All Topics Expanded")
    End If
  End If     
  
  If sAction = "EXPAND ALL SECTIONS" Then
    intCount = gridEx.RecordCount
    Set oTemp2 = Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("CDMMain_MDIParent")._
    WinFormsObject("MdiClient", "").WinFormsObject("Layout_Form").WinFormsObject("Panel_Rebar")._
    WinFormsObject("TopRebar1").WinFormsObject("LayoutCommandBar")
    
    Set oTemp3 = oTemp2.Bounds     
    If sExStart = "EXPANDALL" Then
        If blnTimeRecorded = False Then
          Watch.Start
        End IF				
      Call oTemp2.Click(oTemp3.Width/3.5, oTemp3.Height/2)
      While gridEx.RecordCount<intCount
      Wend         
    End If
    If sExStop = "SECTIONSEXPANDED" Then      
      Watch.Stop
      blnTimeRecorded = True
      Log.Message("All Sections Expanded")
      Exit Sub
    End If
  End If  

	
 
 
 
 If Err.Number <> 0 Then
		Log.Warning("Error in 'sSelectNSeries_Start' function - " & Err.Description)
		Err.Clear
	End If 
End Sub


' Just log and click on OK button
Function sLookFor_InfoMsg
Dim oTemp, strRemarks 
ON Error Resume Next

If fCDM_Process_Running = True Then
  sLookFor_InfoMsg = False  
  strTemp = "WinFormsObject(""InfoMsgBox_Form"")"   
  Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").Find("Name","WinFormsObject(""InfoMsgBox_Form"")",6,True)  
  If oTemp.Exists = True Then
    sLookFor_InfoMsg = True 
    strTCRemarks = "CDM message : '" & oTemp.WinFormsObject("Label_Information").WndCaption & "' appeared "
    Log.Message(strTCRemarks)
    oTemp.WinFormsObject("Button_OK").Click 
    Exit Function
  End If
 Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").Find("Name","WinFormsObject(""SeriesListErrorInfo_Form"")",6,True)  
  If oTemp.Exists = True Then 
      strTCRemarks = "CDM message : '" & oTemp.WinFormsObject("SplitContainer_List"). _
                              WinFormsObject("SplitterPanel", ""). _
                              WinFormsObject("Label_Message").Text & "' appeared "
      Log.Message(strTCRemarks)
      sLookFor_InfoMsg = True
      oTemp.WinFormsObject("Panel1").WinFormsObject("UiButton_OK").Click   
      Exit Function 
  End If  
End IF

If Err.Number <> 0 Then
  Log.Warning "Error in 'sLookFor_InfoMsg' - " & Err.Description
  Err.Clear
End IF
End Function
 
Sub sDeleteWorkspace(showconfirm,Name)
On Error Resume Next
Dim oTemp  
Call Sys.Keys("~m")   
Set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form")._
                         WinFormsObject("uiPanel_Tree").WinFormsObject("uiPanel_TreeContainer")._
                         WinFormsObject("WorkspaceClassification1").WinFormsObject("ExplorerBar_SearchWks")._
                         WinFormsObject("ExplorerBarContainerControl2").Waitchild("WinFormsObject(""TreeView_Workspace"")",40000)
If objTemp.Exists = True Then
           if objTemp.wSelection&"|" =  Name then
            objTemp.clickItem(Name)
            objTemp.keys "[Esc]"
           else
            objTemp.clickItem(Name)
            objTemp.keys "[Esc]"
            Delay 2000, "Please wait while the workspace get loaded"
            objTemp.selectitem(Name)
            end if
    If Err.Number <> 0 Then
        If blnStrMsg = True Then 
             strTCRemarks = Name & " not found in the My CDM Tree view "
             Log.Message(strTCRemarks)
        End If 
        strTestCaseResult="FAIL"
        Exit Sub 
    End If 
    objTemp.keys "[Del]"
    If showConfirm = "CHECKED" Then 
        If s_Del_Workspace = True Then
            If blnStrMsg = True Then 
              strTCRemarks ="Confirm message appeared successfully"
              Log.Message(strTCRemarks)
            End If    
        ElseIf s_Del_Workspace = False Then
           strTestCaseResult="FAIL" 
            If blnStrMsg = True Then 
              strTCRemarks ="Confirm message not appeared"
              Log.Message(strTCRemarks)        
            End If 
        End If    
    ElseIf showConfirm = "UNCHECKED" Then 
        If s_Del_Workspace = False Then
           If blnStrMsg = True Then 
             strTCRemarks ="Confirm message not appeared "
             Log.Message(strTCRemarks)   
           End If   
        ElseIf s_Del_Workspace = False Then
           strTestCaseResult="FAIL"
           If blnStrMsg = True Then 
              strTCRemarks ="Confirm message appeared"
              Log.Message(strTCRemarks)
           End If           
        End If  
    End If 
Else
  strTestCaseResult="FAIL"
  strTCRemarks="Workspace Treeview not loaded"
  Log.Message(strTCRemarks)
  Exit Sub 
End IF
If Err.Number <> 0 Then
  Log.Warning("Error in 'sDeleteWorkspace' function - " & Err.Description)
  Err.Clear
End IF
End Sub

Function s_Del_Workspace
dim oTemp 
s_Del_Workspace = False
strTemp = "WinFormsObject(""frm_DeleteWorkspace"")" 
Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").WaitChild(strTemp, 3000)   
If oTemp.Exists = True Then
  oTemp.WinFormsObject("UiButton1").Click          
  s_Del_Workspace = True
Else     
  s_Del_Workspace = False  
End If
End Function      
    
Sub sRightclick_MyCDM(sData1)
On Error Resume Next
Dim oTemp, sName, sAction,edit
sName=getSplitValue(sData1,"NAME")
sAction=getSplitValue(UCase(sData1),"ACTION")
Call sKeyboard_ShortCut_MDI("MyCDM")

Set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form")._
                         WinFormsObject("uiPanel_Tree").WinFormsObject("uiPanel_TreeContainer")._
                         WinFormsObject("WorkspaceClassification1").WinFormsObject("ExplorerBar_SearchWks")._
                         WinFormsObject("ExplorerBarContainerControl2").Find("Name","WinFormsObject(""TreeView_Workspace"")",6, True)
                      
If objTemp.Exists = True Then
  Sys.keys "[Home]" 
  If sAction = "NEWFOLDER" Then
    objTemp.ClickItemR("|My Workspaces")
       Delay(2000)
      objTemp.keys ("[Down][Enter]")
       Delay(2000)
    Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").WaitChild("WinFormsObject(""NewWorkspaceFolder_Form"")",5000) 
    If oTemp.Exists=True Then
        oTemp.WinFormsObject("EditBox_ClassName").WinFormsObject("TextBox", "").Text = sName
        Call oTemp.WinFormsObject("UiButton_OK").Click      
        strTCRemarks = "New Workspace Folder created successfully"
        Log.Message(strTCRemarks)
    Else
        strTestCaseResult="FAIL"
        strTCRemarks = "New Workspace Folder form not loaded"
        Log.Message(strTCRemarks)
        Exit Sub 
    End If     
  ElseIf sAction = "NEWWORKSPACE"  or sAction = "NEWGRAPH" Then
    Call objTemp.ClickItemR("|My Workspaces")
     Delay(2000)
      If sAction = "NEWWORKSPACE" Then
        objTemp.keys ("[Down][Down][Enter]")
      ElseIf sAction = "NEWGRAPH" Then
        objTemp.keys ("[Down][Down][Down][Enter]")      
      End If 
      delay(2000)
    Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").WaitChild("WinFormsObject(""NewWorkspaceItem_Form"")",5000) 
    If oTemp.Exists=True Then
        oTemp.WinFormsObject("EditBox_NewItem").WinFormsObject("TextBox", "").Text = sName
        Call oTemp.WinFormsObject("UiButton_OK").Click  
        strTCRemarks = sName & " - Workspace created successfully"
        Log.Message(strTCRemarks)
    Else
        strTestCaseResult="FAIL"
        strTCRemarks = "New Workspace form not loaded"
        Log.Message(strTCRemarks)
        Exit Sub 
    End If     
   ElseIf saction="RENAME" then
          objTemp.ClickItemR("|My Workspaces|310902101|")
          delay(1000)
          Set edit = Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("JNSO", "")
          delay(2000)   
          objTemp.keys ("[Up][Up][Up][Enter]")
          Call objTemp.Keys("New[Enter]")
   ElseIf saction="CLONE" then
          objTemp.ClickItemR("|My Workspaces|310902101|")
          delay(2000)  
          objTemp.keys ("[Up][Up][Enter]")         
   ElseIf saction="DELETE" then
          objTemp.ClickItemR("|My Workspaces|310902101|")
          delay(2000)  
          objTemp.keys ("[Up][Enter]")
          Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("frm_DeleteWorkspace").WinFormsObject("UiButton1")
          Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("frm_DeleteWorkspace").WinFormsObject("UiButton1").Click   
  End If   
  Sys.keys "[Home]" 
      Delay(2000)
  Call  objTemp.ClickItem("|My Workspaces|" & sName & "|")
  delay(2000)  
  If Err.Number = 0 Then     
        strTCRemarks = sAction & " Action completed successfully"
        Log.Message(strTCRemarks)
  Elseif saction="Delete" then  
        strTCRemarks = sAction & " Action completed successfully"
        Log.Message(strTCRemarks)
  Else
        strTestCaseResult="FAIL"
        strTCRemarks = sAction & " action failed"
        Log.Message(strTCRemarks)
     End If  
Else
  strTestCaseResult="FAIL"
  strTCRemarks="Workspace Treeview not loaded"
  Log.Message(strTCRemarks)
  Exit Sub 
End IF
If Err.Number <> 0 Then
  Log.Warning("Error in 'sRightclick_MyCDM' function - " & Err.Description)
  Err.Clear
End IF
End Sub

Sub sPrepare_Del_workspace(sData1)
dim sName, sConfirm, sRemarks 
sName=getSplitValue(sData1,"NAME") 
sConfirm=getSplitValue(UCase(sData1),"CONFIRM")
sRemarks=getSplitValue(UCase(sData1),"REMARKS")
If sRemarks = "" Then 
    blnStrMsg = True
Else
    blnStrMsg = False 
End If
If sConfirm = "" Then sConfirm = "CHECKED"
Call sDeleteWorkspace(sConfirm, sName)
If Err.Number <> 0 Then
  Log.Warning("Error in 'sPrepare_Del_workspace' function - " & Err.Description)
  Err.Clear
End IF
End Sub

' Launch CDM Application & Make sure Login is loaded.

' Author - Guru
' Start Date - 16-02-2011
' Last updated - 16-02-2011

Sub sLaunch_CDM
' Open CDM MDI

Err.clear
On Error Resume Next

Dim wshShell, poProcess, intI
' If not already running - start CDM 
delay Status_wait, "Launching for CDM Application.. Please wait"
set objTemp = Sys.WaitProcess("ISI.CeicDataManager.Startup",2000)
 
If objTemp.exists = False then
  Set wshShell = CreateObject ("WSCript.shell")
  IF sExStart="INVOKE" then
    dtTCStartTime = aqDateTime.Now
    Watch.Start
  End if
  If blnx86Folder = True Then 
    Set poProcess = wshShell.Exec("""C:\Program Files (x86)\ISI Emerging Markets\CEIC Data Manager\ISI.CeicDataManager.Startup.exe""")
  Else  
    Set poProcess = wshShell.Exec("""C:\Program Files\ISI Emerging Markets\CEIC Data Manager\ISI.CeicDataManager.Startup.exe""")
  End IF
    
  Set objTemp = Sys.WaitProcess("ISI.CeicDataManager.Startup",120000)
    If objTemp.exists = True then    
    while fCDM_MDI_Loaded = False    
    wend  
    
    End IF
Else
End IF
If Err.Number <> 0 Then
  Log.Warning("Error in 'sLaunch_CDM' procedure - " & Err.Description)
  Err.Clear
End If

End Sub
' Check if CDM MDI is loaded & not Logged in. 

' Author - Guru
' Start Date - 16-02-2011
' Last updated - 16-02-2011

Function fCDM_MDI_Loaded

Err.clear
On Error Resume Next

dim strTemp,objCDM_MDI,blnTimeRecorded,blnCDM_MDI

fCDM_MDI_Loaded = False
If fCDM_Process_Running = True Then
  strTemp = "WinFormsObject(""CDMMain_MDIParent"")"
 
  Set objCDM_MDI = Sys.Process("ISI.CeicDataManager.Startup").Waitchild(strTemp,40000)  ' Wait for two whole minutes.
  If objCDM_MDI.Exists = True Then
    
    IF sExStop="LOGIN" then
    
    Watch.Stop
    blnTimeRecorded = True
    end if
    
    fCDM_MDI_Loaded = True
    blnCDM_MDI = True
    Delay Status_Wait, "CDM MDI Found!"
  End If
Else
  ' CDM Not open
End IF

If Err.Number <> 0 Then
  Log.Warning("Error in 'fCDM_MDI_Loaded' function - " & Err.Description)
  Err.Clear
End If
End Function

' Check if CDM MDI is loaded & not Logged in. 

' Author - Guru
' Start Date - 16-02-2011
' Last updated - 16-02-2011

Function fIs_Login_Loaded
  dim otemp,objTemp 
  fIs_Login_Loaded = False

  delay Status_wait, "Looking for login form.. "
      
  strTemp = "WinFormsObject(""Login_Dialog"")"
  set objTemp = Sys.Process("ISI.CeicDataManager.Startup").WaitChild(strTemp,3000)              
  if objTemp.exists = false Then
     call Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("CDMMain_MDIParent").activate
     set otemp=Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("CDMMain_MDIParent").WinFormsObject("TopRebar1").waitchild("WinFormsObject(""UiCommandBar1"")",5000)
      if otemp.Commands.Item(0).IsVisible = true then
       Sys.keys("~l")
      end if
   end if    
  if objTemp.exists = True then
    fIs_Login_Loaded = True  
    delay Status_wait, "Login form found!"
  Else
    ' Login not loaded
  End IF

  If Err.Number <> 0 Then
    Log.Warning("Error in 'fIs_Login_Loaded' function - " & Err.Description)
    Err.Clear
  End If
End Function

' Check if CDM MDI is loaded & not Logged in. 

' Author - Guru
' Start Date - 16-02-2011
' Last updated - 16-02-2011

Function fCDM_Process_Running
  Dim wshShell, poProcess, intI
  fCDM_Process_Running = False
   delay Status_wait, "Checking if CDM is already started up.. Please wait"
   set objTemp = Sys.WaitProcess("ISI.CeicDataManager.Startup",25000)
   If objTemp.exists = True then
    fCDM_Process_Running = True
  Else
    fCDM_Process_Running = False
  End IF
End Function

Sub sSelect_Database(sData1)
  Dim sdatabase,otemp,otemp1,otemp2, otemp3,intI, intJ, blnItemFound, sDBAction, sseries
  blnItemFound = False
  sdatabase=getSplitValue(sdata1,"Database")
  sseries=getSplitValue(sdata1,"Select")    
  Log.Message(sdatabase)
  sDBAction = getSplitValue(Trim(Ucase(sdata1)),"DBAction")
  strTemp= "WinFormsObject(""TableLayoutPanel4"")"   
  Set otemp2= Sys.Process("EXCEL").WinFormsObject("EditdownloadOptions_Form").WaitChild(strTemp, 40000)
  If otemp2.exists=True Then                                                                                     
    Call otemp2.WinFormsObject("TableLayoutPanel5").WinFormsObject("UiGroupBox_Series").WinFormsObject("SeriesDownloaded")._
    WinFormsObject("TopRebar1").WinFormsObject("UiCommandBar1").Click(26, 16)
    Delay Status_Wait, "Loading Insert Series sheet..."
    strTemp = "WinFormsObject(""InsertSeriestoDownload_Form"")"
    Set otemp= Sys.Process("EXCEL").WaitChild(strTemp, 40000)
    If otemp.exists=True Then
      If sdatabase<>"" Then
        otemp.WinFormsObject("UiTabSearchDownload").Controls.Item(1).Selected=True
        Set otemp1=otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1")._
        WinFormsObject("SearchSeriestoDownload").WinFormsObject("UiGroupBox1").WinFormsObject("UiGroupBox2")._
        WinFormsObject("UiComboBox_Databases")
        If otemp1.exists=True Then
          For intI = 0 To otemp1.Items.get_Count-1
            If otemp1.Items.Item(intI).Text.ToString = sdatabase Then
              otemp1.set_SelectedIndex(intI)
              blnItemFound = True
              Delay(3000)
              Exit For                               
            End If
          Next          
          If blnItemFound = True Then
            Set otemp3 = otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1")._
            WinFormsObject("SearchSeriestoDownload").WinFormsObject("UiGroupBox1").WinFormsObject("GridEX_Tree")                                
            If otemp3.get_RecordCount>0 Then
              strTCRemarks=sdatabase & " is present in Tree Display-List"
              Log.Message(strTCRemarks)
            End If                               
          ElseIf blnItemFound = False Then 
            strTCRemarks=sdatabase & " is not present in Tree Display-List"
            Log.Message(strTCRemarks)             
            strTestCaseResult="FAIL"
            oTemp.Close            
          End If
        End If        
      End If
      If sDBAction = "" Then
        Delay Status_Wait, "Closing Insert Series sheet..."         
        otemp.Close
      End If
      If sDBAction<>"" Then
      Call sPerform_DBActions(sData1, otemp3)
      End If       
    End If
  End If
End Sub

Sub sPerform_DBActions(sData1,odbTree)
	Dim objInsertSeries, oTemp, sAction, sDBSeries, sDBTable, aArray, aArray1, sTreeFlag,ObjTemp
	Dim intCount, intSelCount, intRowIndex, intI, intJ, blnVerified, blnSidFound 
	
	sAction = getSplitValue(Trim(UCase(sdata1)), "DBAction") 
	sDBTable = getSplitValue(Trim(sdata1), "DBTable")
	sDBSeries = getSplitValue(Trim(sdata1), "DBSeries")
	sTreeFlag = "EditDownload"
	blnVerified = False
	blnSidFound = False 
	
	Set objInsertSeries = Sys.Process("EXCEL").WinFormsObject("InsertSeriestoDownload_Form")
	
	If objInsertSeries.Visible = True Then
		If odbTree.Visible = True Then
			
			If sAction = "VERIFY COUNT DISPLAY" Then 'VERIFY DISPLAY OF SERIES COUNT FOR AN INTERNAL ACCOUNT
				Call sExpandDBTree(sData1, sTreeFlag)
				intRowIndex = odbTree.Row
				odbTree.set_Row(intRowIndex-1)
				If (aqString.Find(odbTree.CurrentRow.Cells.Item(2).Text,"(")<>-1 And _ 
					aqString.Find(odbTree.CurrentRow.Cells.Item(2).Text,")")<>-1) Then
					If (aqString.Find(odbTree.CurrentRow.Parent.Cells.Item(1).Text,"(")<>-1 And _ 
						aqString.Find(odbTree.CurrentRow.Parent.Cells.Item(1).Text,")")<>-1) Then
						If (aqString.Find(odbTree.CurrentRow.Parent.Parent.Cells.Item(1).Text,"(")<>-1 And _ 
							aqString.Find(odbTree.CurrentRow.Parent.Parent.Cells.Item(1).Text,")")<>-1) Then
							blnVerified = True       
						End If      
					End If    
				End If
				If blnVerified = True Then
					strTCRemarks =" Series Count display verified for internal account"
					Log.Message(strTCRemarks)
					objInsertSeries.Close
				Else
					strTCRemarks ="Series Count NOT displayed for internal account!!"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close
					Exit Sub     
				End If
			End If
			
			If sAction = "VERIFY NO COUNT DISPLAY" Then 'VERIFY NON-DISPLAY OF SERIES COUNT FOR AN EXTERNAL ACCOUNT
				Call sExpandDBTree(sData1, sTreeFlag)
				intRowIndex = odbTree.Row
				odbTree.set_Row(intRowIndex-1)
				If (aqString.Find(odbTree.CurrentRow.Cells.Item(2).Text,"(")=-1 And _ 
					aqString.Find(odbTree.CurrentRow.Cells.Item(2).Text,")")=-1) Then
					If (aqString.Find(odbTree.CurrentRow.Parent.Cells.Item(1).Text,"(")=-1 And _ 
						aqString.Find(odbTree.CurrentRow.Cells.Item(1).Text,")")=-1) Then
						If (aqString.Find(odbTree.CurrentRow.Parent.Parent.Cells.Item(1).Text,"(")=-1 And _ 
							aqString.Find(odbTree.CurrentRow.Cells.Item(1).Text,")")=-1) Then
							blnVerified = True        
						End If      
					End If          
				End If
				If blnVerified = True Then
					strTCRemarks =" Series Count not displayed for external account"
					Log.Message(strTCRemarks)
					objInsertSeries.Close
				Else
					strTCRemarks ="SERIES COUNT DISPLAYED FOR EXTERNAL ACCOUNT!!"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close
					Exit Sub     
				End If
			End If  
			
			If sAction = "VERIFY DEVELOPMENT IN RED" Then 'VERIFY RED FONT COLOUR FOR SERIES UNDER DEVELOPMENT
				Call sExpandDBTree(sData1, sTreeFlag)
				aArray = Split(sDBSeries,";")
				intRowIndex = odbTree.Row
				intCount = odbTree.CurrentRow.Parent.get_Children-1
				For intI = 0 To UBound(aArray)
					For intJ = intRowIndex To intRowIndex+intCount
						odbTree.set_Row(intJ)
						If aArray(intI) = odbTree.CurrentRow.DataRow.Row.SR_SeriesId.ToString Then            
							If (UCase(odbTree.CurrentRow.DataRow.Row.SR_ProductStatus.ToString) = "DEVELOPMENT" And _ 
								UCase(odbTree.CurrentRow.Table.FormatConditions.Item(2).FormatStyle.ForeColor.Name.ToString) = "RED") Or _
								(odbTree.CurrentRow.DataRow.Row.SR_LayoutStatus.ToString = "I" And _ 
								odbTree.CurrentRow.Table.FormatConditions.Item(1).FormatStyle.ForeColor.Name.ToString = "ffff8000") Then         
								blnVerified = True                
							Else
								blnVerified = False
							End If
						End If         
					Next 
				Next 
				If blnVerified = True Then        
					strTCRemarks = "Given series displayed in red/flush orange"
					Log.Message(strTCRemarks)
					objInsertSeries.Close
				Else 
					strTCRemarks = "Given series NOT displayed in red/flush orange"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close     
					Exit Sub
				End If 
			End If
			
			If sAction = "VERIFY DISCONTINUED IN ITALICS" Then 'VERIFY DISCONTINUED SERIES IN ITALIC FONT         
				Call sExpandDBTree(sData1, sTreeFlag)
				aArray = Split(sDBSeries,";")
				intRowIndex = odbTree.Row
				intCount = odbTree.CurrentRow.Parent.get_Children-1
				For intI = 0 To UBound(aArray)
					For intJ = intRowIndex To intRowIndex+intCount
						odbTree.set_Row(intJ)
						If aArray(intI) = odbTree.CurrentRow.DataRow.Row.SR_SeriesId.ToString Then
							If (UCase(odbTree.CurrentRow.DataRow.Row.SR_SeriesStatusDescription.ToString) = "DISCONTINUED" And _
								odbTree.CurrentRow.Table.FormatConditions.Item(3).FormatStyle.FontItalic.oleValue = "True") Then  
								blnVerified = True              
							Else
								blnVerified = False
							End If   
						End If   
					Next 
				Next 
				If blnVerified = True Then        
					strTCRemarks = "Given series displayed in Italic font"
					Log.Message(strTCRemarks)
					objInsertSeries.Close
				Else 
					strTCRemarks = "Given series NOT displayed in Italic font"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close     
					Exit Sub
				End If 
			End If       
			
			If sAction = "VERIFY REBASED IN ITALICS" Then 'VERIFY REBASED SERIES IN ITALIC FONT 
				Call sExpandDBTree(sData1, sTreeFlag)
				aArray = Split(sDBSeries,";")
				intRowIndex = odbTree.Row
				intCount = odbTree.CurrentRow.Parent.get_Children-1
				For intI = 0 To UBound(aArray)
					For intJ = intRowIndex To intRowIndex+intCount
						odbTree.set_Row(intJ)
						If aArray(intI) = odbTree.CurrentRow.DataRow.Row.SR_SeriesId.ToString Then
							If (UCase(odbTree.CurrentRow.DataRow.Row.SR_SeriesStatusDescription.ToString) = "REBASED" And _
								odbTree.CurrentRow.Table.FormatConditions.Item(4).FormatStyle.FontItalic.oleValue = "True") Then                
								blnVerified = True               
							Else
								blnVerified = False
							End If 
						End If      
					Next 
				Next 
				If blnVerified = True Then        
					strTCRemarks = "Given series displayed in Italic font"
					Log.Message(strTCRemarks)
					objInsertSeries.Close
				Else 
					strTCRemarks = "Given series NOT displayed in Italic font"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close     
					Exit Sub
				End If 
			End If       
			
			If sAction = "VERIFY UNSUBSCRIBED IN SILVER" Then 'VERIFY DISPLAY OF UNSUBSCRIBED SERIES IN SILVER FONT
				Call sExpandDBTree(sData1, sTreeFlag)
				intRowIndex = odbTree.Row
				intCount = odbTree.CurrentRow.Parent.get_Children-1
				For intI = intRowIndex To intRowIndex+intCount
					odbTree.set_Row(intI)
					If (odbTree.CurrentRow.DataRow.Row.SR_Subscribed.ToString = "N" And _
						UCase(odbTree.CurrentRow.Table.FormatConditions.Item(0).FormatStyle.ForeColor._
						Name.ToString) = "SILVER") Then
						'Do nothing
					Else 
						blnVerified = False
						strTCRemarks = "Unsubscribed Series not displayed in Silver font"
						Log.Message(strTCRemarks)
						Exit Sub
					End If
				Next 				
				If ((odbTree.CurrentRow.Parent.DataRow.Row.TB_Subscribed.ToString) = "N" And _ 
					(UCase(odbTree.CurrentRow.Parent.Table.FormatConditions.Item(0).FormatStyle._
					ForeColor.Name.ToString) = "SILVER")) Then
					If ((odbTree.CurrentRow.Parent.Parent.DataRow.Row.SC_Subscribed.ToString) = "N" And _ 
						(UCase(odbTree.CurrentRow.Parent.Parent.Table.FormatConditions.Item(0).FormatStyle._
						ForeColor.Name.ToString) = "SILVER")) Then
						If ((odbTree.CurrentRow.Parent.Parent.Parent.DataRow.Row.TP_Subscribed.ToString) = "N" And _ 
							(UCase(odbTree.CurrentRow.Parent.Parent.Parent.Table.FormatConditions.Item(0).FormatStyle._
							ForeColor.Name.ToString) = "SILVER")) Then
							blnVerified = True       
						End If      
					End If    
				End If
				If blnVerified = True Then
					strTCRemarks ="Unsubscribed Topic, Section, Table and Series displayed in Silver Font "
					Log.Message(strTCRemarks)
					objInsertSeries.Close
				Else
					strTCRemarks ="Unsubscribed Topic/Section/Table and Series not in Silver Font!!"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close
					Exit Sub     
				End If
			End If
			
			If sAction = "ADD SERIES" Then 'ADD SERIES TO EDIT DOWNLOAD FORM FROM DATABASE TREE
				Call sExpandDBTree(sData1, sTreeFlag)
				aArray = Split(sDBSeries,";")
				intRowIndex = odbTree.Row
				intCount = odbTree.CurrentRow.Parent.get_Children-1
				intSelCount = 0
				For intI = 0 To UBound(aArray)
					For intJ = intRowIndex To intRowIndex+intCount
						odbTree.set_Row(intJ)
						If aArray(intI) = odbTree.CurrentRow.DataRow.Row.SR_SeriesId.ToString Then              
							odbTree.CurrentRow.set_IsChecked(True)              
							intSelCount = intSelCount+1            					
						End If
					Next
				Next   	
				If intSelCount = UBound(aArray)+1 Then
					'Do nothing
				Else
					strTCRemarks = "Series not Found under the given Table"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close
					Exit Sub           
				End If
				Set oTemp = objInsertSeries.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1")._
				WinFormsObject("SearchSeriestoDownload")
				oTemp.WinFormsObject("UiButton_OK").set_Enabled(True) 
				oTemp.WinFormsObject("UiButton_OK").Click
				
				If aqString.Find(oTemp.WinFormsObject("UiStatusBar_Footer").Panels.Item(0).Text,intSelCount)<>-1 Then
					Delay(10000)
          oTemp.WinFormsObject("UiButton_Cancel").Click                         
				Else
					strTCRemarks = "Selected Series Count Display not proper"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close              
					Exit Sub
				End If
				
				Set oTemp = Sys.Process("EXCEL").WinFormsObject("EditDownloadOptions_Form")._
				WinFormsObject("TableLayoutPanel4").WinFormsObject("TableLayoutPanel5")._
				WinFormsObject("UiGroupBox_Series").WinFormsObject("SeriesDownloaded")._
				WinFormsObject("GridEX_Series")
				intCount = UBound(aArray)+1
				If oTemp.Exists = True   Then
					If oTemp.Visible = True  Then
						If oTemp.RecordCount>intCount Then
							blnVerified = True                      
						End If
					End If
				End If
				If blnVerified = True Then
					strTCRemarks ="Series added successfully from Browse Database Tree "
					Log.Message(strTCRemarks)					
				Else
					strTCRemarks ="Series addition failed from Browse Database Tree"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close
					Exit Sub   
				End If                  
			End If 
			
			If sAction = "ADD TABLE" Then 'ADD ENTIRE TABLE TO EDIT DOWNLOAD FORM FROM DATABASE TREE
				Call sExpandDBTree(sData1, sTreeFlag)
				intRowIndex = odbTree.Row
				intSelCount = odbTree.CurrentRow.Parent.get_Children	
        Set oBjTemp = Sys.Process("EXCEL").WinFormsObject("EditDownloadOptions_Form")._
          				WinFormsObject("TableLayoutPanel4").WinFormsObject("TableLayoutPanel5")._
          				WinFormsObject("UiGroupBox_Series").WinFormsObject("SeriesDownloaded")._
          				WinFormsObject("GridEX_Series")         
        intCount=ObjTemp.RecordCount      			
				Set oTemp = objInsertSeries.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1")._
				WinFormsObject("SearchSeriestoDownload")
        If odbTree.CurrentRow.Parent.Table.Key.ToString = "Section_Table" Then					
          If (aqString.Find(odbTree.CurrentRow.Parent.DataRow.Row.TB_WSValue_Name.ToString,sDBTable)<>-1)  Then
						odbTree.set_Row(intRowIndex-1)
            odbTree.SetFocus
            Call Sys.Keys(" ")	
            if sExStart="INSERTSERIES"	then
              If blnTimeRecorded = False Then
                Watch.Start
              End IF				
             end If			 
						oTemp.WinFormsObject("UiButton_OK").Click            
            			If objTemp.Exists = True   Then  
                     While objTemp.RecordCount<>(intSelCount+IntCount) 
                     Wend
                     If sExStop="SERIESINSERTED"   Then
                      Watch.stop
                      blnTimeRecorded = True
                     End If
                  End If
          
          Else
            strTCRemarks = "Table not found"
            Log.Message(strTCRemarks)
            strTestCaseResult = "FAIL"
            objInsertSeries.Close
            Exit Sub
					End If 
				End If
				
				If aqString.Find(oTemp.WinFormsObject("UiStatusBar_Footer").Panels.Item(0).Text,intSelCount)=0 Then
					Delay(15000)
          oTemp.WinFormsObject("UiButton_Cancel").Click                        
				Else
					strTCRemarks = "Selected Series Count Display not proper"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close              
					Exit Sub
				End If
				
				Set oTemp = Sys.Process("EXCEL").WinFormsObject("EditDownloadOptions_Form")._
				WinFormsObject("TableLayoutPanel4").WinFormsObject("TableLayoutPanel5")._
				WinFormsObject("UiGroupBox_Series").WinFormsObject("SeriesDownloaded")._
				WinFormsObject("GridEX_Series")         
				If oTemp.Exists = True   Then
					If oTemp.Visible = True  Then
						If oTemp.RecordCount>intSelCount Then
							blnVerified = True                      
						End If
					End If
				End If
				If blnVerified = True Then
					strTCRemarks ="Table added successfully from Browse Database Tree "
					Log.Message(strTCRemarks)					
				Else
					strTCRemarks ="Table addition failed from Browse Database Tree"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close
					Exit Sub   
				End If  
			End If
      
      If sAction = "CANCEL WITHOUT ADDING" Then  'CANCEL WITHOUT ADDING SERIES / TABLE
        Call sExpandDBTree(sData1, sTreeFlag)
        Set oTemp = objInsertSeries.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1")._
				WinFormsObject("SearchSeriestoDownload")
        oTemp.WinFormsObject("UiButton_Cancel").Click
        If oTemp.Visible = False Then
          blnVerified = True 
        End If
        If blnVerified = True Then
					strTCRemarks ="Series addition successfully cancelled"
					Log.Message(strTCRemarks)					
				Else
					strTCRemarks ="Series addition cancellation failed"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					objInsertSeries.Close
					Exit Sub   
				End If  
      End If
			
      If sAction = "VALIDATE UNSUBSCRIBED ADDITION" Then  'VALIDATE THE ERROR MESSAGE WHILE ADDING UNSUBSCRIBED SERIE
        Dim oTemp1
        Call  sExpandDBTree(sData1, sTreeFlag)
        intRowIndex = odbTree.Row
				intSelCount = odbTree.CurrentRow.Parent.get_Children				
				Set oTemp = objInsertSeries.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1")._
				WinFormsObject("SearchSeriestoDownload")
          If odbTree.CurrentRow.Parent.Table.Key.ToString = "Section_Table" Then					
          	odbTree.set_Row(intRowIndex-1)
            odbTree.SetFocus
            Call Sys.Keys(" ")					 
						oTemp.WinFormsObject("UiButton_OK").Click            
            strTemp = "WinFormsObject(""Subscribe_Form"")"
            set oTemp1 = Sys.Process("EXCEL").Waitchild(strTemp,2000)
            If oTemp1.Exists = True Then
              If oTemp.Visible = True Then              
                strTCRemarks ="Subscribe Form appeared. Validation Successful"
  					    Log.Message(strTCRemarks)
                oTemp1.WinFormsObject("UiButton_Cancel").Click
                objInsertSeries.Close
              Else
      					strTCRemarks ="Validation failed!!"
      					Log.Message(strTCRemarks)
      					strTestCaseResult = "FAIL"
      					objInsertSeries.Close
      					Exit Sub 
              End If              
            End If
          Else
            strTCRemarks = "Table not found"
            Log.Message(strTCRemarks)
            strTestCaseResult = "FAIL"
            objInsertSeries.Close
            Exit Sub
					End If         
      End If
      
		End If
	End If
	
End Sub

Sub sExpandDBTree(sData1, sTreeFlag)
  
  ' Author: Raghunandan
  ' Start Date : 15 - 07 - 2013
  '*************************************************************************************************
  'This procedure expands the: 
  'A. Start Tree in CDM;
  'B. DataBase Tree in Edit Download-> Insert Series-> Browse Database;
  'C. Database Tree in My Series -> Insert Series-> Browse Database, or
  'D. Database Tree in Chart -> Insert Series-> Browse Database -
  '   based on a Tree Origin Flag, Topic Name, Section Name and  Table Name mentioned in Run.xls. 
  '   This procedure DOES NOT SELECT (SET CHECKED)any table / series;  if no 
  '   Section and Table are specified in Run.xls, it expands the first table under 
  '   the first section in the given Topic. This procedure SHOULD NOT be called without a Topic Name. 
  '   This procedure assumes that a database been selected previously.  
  '*************************************************************************************************
  
  Err.Clear
  On Error Resume Next
  Dim dbTree, sTopic, sSection, sTable, intI, intJ, intK, intRowIndex, intCount, blnTableFound
  
  sTopic = getSplitValue(Trim(sData1), "DBTopic")
  sSection = getSplitValue(Trim(sData1), "DBSection")
  sTable = getSplitValue(Trim(sData1), "DBTable")
  
  If sTreeFlag = "EditDownload" Then
    Set dbTree = Sys.Process("EXCEL").WinFormsObject("InsertSeriestoDownload_Form").WinFormsObject("UiTabSearchDownload")._
    WinFormsObject("UiTabPage1").WinFormsObject("SearchSeriestoDownload").WinFormsObject("UiGroupBox1")._
    WinFormsObject("GridEX_Tree")
  ElseIf sTreeFlag = "StartTree" Then 
    Set dbTree = Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("CDMMain_MDIParent")._
    WinFormsObject("MdiClient", "").WinFormsObject("Layout_Form").WinFormsObject("Panel_Rebar")._
    WinFormsObject("GridEX_Tree")
  ElseIf (sTreeFlag = "MySeries" Or sTreeFlag = "Chart" )Then
    Set dbTree = Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("InsertSeriestoDownload_Form")._
    WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1").WinFormsObject("SearchSeriestoDownload")._
    WinFormsObject("UiGroupBox1").WinFormsObject("GridEX_Tree")
  End If 
    
  If dbTree.Exists = True Then
    If dbTree.Visible = True Then
      If (sSection <> "" And sTable <> "") Then 'IF A SECTION AND TABLE IS GIVEN IN RUN.XLS..
        For intI = 0 To dbTree.RowCount-1
          dbTree.set_Row(intI)
          If (sTopic = dbTree.CurrentRow.DataRow.Row.TP_WSValue_Name.ToString And _
            dbTree.CurrentRow.Table.Key.ToString = "Topic") Then       
            dbTree.CurrentRow.set_Expanded(True) 'FIND THE TOPIC AND EXPAND IT            
            '  If it is just expand topic why continue here?            
            intRowIndex = dbTree.Row
            intCount = dbTree.CurrentRow.get_Children
            If dbTree.CurrentRow.get_ChildrenLoaded = True Then 
              For intJ = intRowIndex+1 To intRowIndex+intCount
                dbTree.set_Row(intJ)        
                If (sSection = dbTree.CurrentRow.DataRow.Row.SC_WSValue_Name.ToString And _
                  dbTree.CurrentRow.Table.Caption.ToString = "Section") Then  'FIND THE SECTION AND EXPAND IT            
                  dbTree.CurrentRow.set_Expanded(True)
                  
                  intRowIndex = dbTree.Row
                  intCount = dbTree.CurrentRow.get_Children
                  If dbTree.CurrentRow.get_ChildrenLoaded = True Then
                    For intK = intRowIndex+1 To intRowIndex+intCount
                      dbTree.set_Row(intK)
                      If ((aqString.Find(dbTree.CurrentRow.DataRow.Row.TB_WSValue_Name.ToString,sTable)<>-1) And _
                        (dbTree.CurrentRow.Table.Caption.ToString = "Table"))Then                
                        dbTree.CurrentRow.set_Expanded(True) 'FIND THE TABLE AND EXPAND IT             
                        dbTree.set_Row(intK+1)             
                        blnTableFound = True
                        Exit For
                      End If
                    Next
                  End If
                End If
                If blnTableFound = True Then
                  Exit For
                End If
              Next
            End If   
          End If
          If blnTableFound = True Then
            Exit For
          End If
        Next 
      End If      
      If (sSection = "" Or sTable = "") Then 'IF NO SECTION OR TABLE IS GIVEN IN RUN.XLS..
        For intI = 0 To dbTree.RowCount-1
          dbTree.set_Row(intI)
          If ((sTopic = dbTree.CurrentRow.DataRow.Row.TP_WSValue_Name.ToString) And _
            (dbTree.CurrentRow.Table.Key.ToString = "Topic")) Then            
            If sExStart = "EXPANDTOPIC" Then
              If blnTimeRecorded = False Then
                Watch.Start
              End IF				
            End If               
            dbTree.CurrentRow.set_Expanded(True) 'EXPAND THE GIVEN TOPIC             
            If sExStop = "TOPICEXPANDED" Then
              While (dbTree.CurrentRow.Expanded = False)
              Wend
              Watch.Stop
              blnTimeRecorded = True
              Log.Message(sTopic & "Expanded")
              Exit Sub
            End If
            intRowIndex = dbTree.Row
            If dbTree.CurrentRow.get_ChildrenLoaded = True Then
              dbTree.set_Row(intRowIndex+1)'SELECT THE FIRST SECTION UNDER THE TOPIC
            Else
              strTCRemarks = "Sections not listed under the given topic"
              Log.Message(strTCRemarks)
              Exit Sub             
            End If
            If (dbTree.CurrentRow.Table.Caption.ToString = "Section") Then
              intRowIndex = dbTree.Row
              If sExStart = "EXPANDSECTION" Then
                If blnTimeRecorded = False Then
                  Watch.Start
                End IF				
              End If
              dbTree.CurrentRow.set_Expanded(True) 'EXPAND THE FIRST SECTION               
              If sExStop = "SECTIONEXPANDED" Then
                While (dbTree.CurrentRow.Expanded = False)
                Wend
                Watch.Stop
                blnTimeRecorded = True
                Log.Message(sSection & "Expanded")
                Exit Sub
              End If
              If dbTree.CurrentRow.get_ChildrenLoaded = True Then
                dbTree.set_Row(intRowIndex+1)'SELECT THE FIRST SECTION UNDER THE TOPIC
              Else
                strTCRemarks = "Tables not listed under the first section"
                Log.Message(strTCRemarks) 
                Exit Sub
              End If          	
              If (dbTree.CurrentRow.Table.Caption.Tostring = "Table") Then
                If sExStart = "EXPANDTABLE" Then
                  If blnTimeRecorded = False Then
                    Watch.Start
                  End IF				
                End If
                dbTree.CurrentRow.Set_Expanded(True)                
                If sExStop = "TABLEEXPANDED" Then
                  While (dbTree.CurrentRow.Expanded = False)
                  Wend
                  Watch.Stop
                  blnTimeRecorded = True
                  Log.Message(sTopic & "is Expanded")
                  Exit Sub
                End If
                intRowIndex = dbTree.Row
                dbTree.Set_Row(intRowIndex+1)'SELECT THE FIRST SERIES UNDER THE CURRENT TABLE
                strTCRemarks = "Topic / Section/ Table found" 
                blnTableFound = True
              End If 
            End If
            If blnTableFound = True Then
              Exit For 
            End If
          End If	
        Next        
      End If       
    End If
  End If
  If blnTableFound = False Then
    strTCRemarks = "Topic / Section / Table not found under the database"
    Log.Message(strTCRemarks)
    strTestCaseResult = "Fail"
    Exit Sub
  ElseIf blnTableFound = True Then 
    strTCRemarks = "Topic / Section / Table found under the database"
    Log.Message(strTCRemarks)
  End If
  
  If Err.Number <> 0 Then
    Log.Warning("Error in sExpandDBTRee() - " & Err.Description)
    Err.Clear
  End If   
End Sub

sub sSearch_series(sData1) 
  dim sselect,otemp,otemp1,otemp2,ssearch,i,sfunction,sparameters, sReplaceOriginalSeries
  sselect=getSplitValue(sdata1,"Select")
  ssearch=getSplitValue(sdata1,"Search")
  sfunction=getSplitValue(sdata1,"Function")
  sReplaceOriginalSeries=Ucase(getSplitValue(sData1,"Replaceoriginalseries"))  
  Log.Message(sfunction)
  sParameters=getSplitValue(sdata1,"Parameters")
  Log.Message(sParameters)  
  strTemp = "WinFormsObject(""EditDownloadOptions_Form"")"
  Set otemp2 = Sys.Process("EXCEL").WaitChild(strTemp, 20000)
  if otemp2.exists=True Then   
                                                                                    
       Call otemp2.WinFormsObject("TableLayoutPanel4").WinFormsObject("TableLayoutPanel5").WinFormsObject("UiGroupBox_Series")._
            WinFormsObject("SeriesDownloaded").WinFormsObject("TopRebar1").WinFormsObject("UiCommandBar1").Click(46, 11)
        Delay Status_Wait, "Loading Insert Series Sheet..."
        strTemp = "WinFormsObject(""InsertSeriestoDownload_Form"")"
        Set otemp= Sys.Process("EXCEL").WaitChild(strTemp, 40000)
               if otemp.exists=True Then
                   if ssearch<>"" then
                       
                       delay 1000
                       Sys.Process("EXCEL").WinFormsObject("InsertSeriestoDownload_Form").WinFormsObject("UiTabSearchDownload")._
                           WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiGroupBox1").WinFormsObject("UiGroupBox3").WinFormsObject("txtKeyword").WinFormsObject("TextBox", "").Text=ssearch
 Sys.Process("EXCEL").WinFormsObject("InsertSeriestoDownload_Form").WinFormsObject("UiTabSearchDownload")._
                           WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiGroupBox1").WinFormsObject("UiGroupBox3").WinFormsObject("txtKeyword").WinFormsObject("TextBox", "").click
                       'delay 500
                      ' otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiGroupBox1").WinFormsObject("UiGroupBox3").WinFormsObject("UiButton_Search").click
                       Sys.Process("EXCEL").WinFormsObject("InsertSeriestoDownload_Form").WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1")._
                           WinFormsObject("UiGroupBox1").WinFormsObject("UiGroupBox3").WinFormsObject("UiButton_Search").Click
                      
                       if sselect<>"" then
                         for i=0 to sselect-1
                           otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiGroupBox1").WinFormsObject("pnlResultGrid").WinFormsObject("GridEX_SeriesSearched").row=I
                           otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiGroupBox1").WinFormsObject("pnlResultGrid").WinFormsObject("GridEX_SeriesSearched").currentrow.set_ischecked(True)
                           otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiButton_OK").set_enabled(True)
                           otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiGroupBox_Function").WinFormsObject("UiButton_Function").set_Enabled(True)
                         next
                       end If                  
                    end if
                    If sfunction<>"" then
                         otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiGroupBox_Function").WinFormsObject("UiButton_Function").click
                         call sApplyMathFunction(sfunction,sparameters,"","","","","",sReplaceOriginalSeries,"","")
                    End If                       
                       If otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiButton_OK").enabled=True Then
                         otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiButton_OK").click
                       End If
                         Delay Status_Wait, "Closing Insert Series sheet..."         
                         otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage2").WinFormsObject("SearchbyCodeDownload1").WinFormsObject("UiButton_Cancel").click
                         Delay Status_Wait, "Closing Insert Series sheet..."                       
                   Else
                          strTCRemarks="Could not open Insert Series Form"
                          Log.Message(strTCRemarks)             
                          strTestCaseResult="FAIL"                       
                  END IF              
                   
   end If        
end sub

Sub sDelete_Watchlist(sTestdata1)
dim otemp, objtemp

Call sKeyboard_ShortCut_MDI("MYCDM")    
              
Set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form")._
                        WinFormsObject("uiPanel_Tree").WinFormsObject("uiPanel_TreeContainer")._
                        WinFormsObject("WorkspaceClassification1").WinFormsObject("ExplorerBar_SearchWks")._
                        WinFormsObject("ExplorerBarContainerControl2").Waitchild("WinFormsObject(""TreeView_Workspace"")",3000)
If objTemp.Exists = True Then
    Sys.keys "[Home]"
    objTemp.clickItem("|My Workspaces|My Watchlist")
    Sys.keys "[Esc]"
    Log.Message("My Watchlist Selected")
Else
  strTestCaseResult="FAIL"
  strTCRemarks= "MyCDM Treeview not loaded"
  Log.Message(strTCRemarks)
  Exit Sub 
End IF 
                     
  
set otemp=objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form").WinFormsObject("SplitContainer_Workspace").WinFormsObject("SplitterPanel", "").WinFormsObject("GridEX_Series")  
  if  otemp.exists = false then
    set otemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form").WinFormsObject("SplitContainer_Workspace").WinFormsObject("SplitterPanel", "", 2).WinFormsObject("GridEX_Series") 
  end if
    If otemp.RowCount>0 then
      While otemp.RowCount>0
          otemp.row=0
          otemp.CurrentRow.delete
          Delay(300)
     Wend
      if otemp.RowCount=0 Then
            strTCRemarks = " All Series Deleted from Watchlist succesfully"
      Else
            strTCRemarks = " Fail to Delete Old Series from Watchlist"  
            strTestCaseResult="FAIL"
      End if     
  End IF    
End Sub

'''***********  Search Result Verification  ***************
''
''' Date          : 29-04-2013 (Guru)
''' Search verification logic
''' If ID/Tag search is specified - search string should present in ID/Tag column
''' If ID/Tag search is NOT specified - search string should be present series name & source & location.
''
''Sub Verify_Search(Keyword,sdata1,sdata2)
''
''dim sFirstWord, sSecondWord, sThirdWord, sFourthWord, sFifthWord   
''dim aArray1, aArray2, intI, intJ, intK, intL 
''dim blnGotResults, blnSort, blnKeyWordNotFound
''dim strTemp, strTemp1, strTemp2
''dim sProvider,sSearchString,sUserSearchString,sDataBase,sSearchIn,sTopic, sUnit, sFrequency,sSources
''dim sIDSearch,sID_Tag,sVerifykey, sNoResult 
''dim blnActiveSeries, blnSubscribed, blnSeriesName, blnFound
''
''blnGotResults = False
''blnKeyWordNotFound = False
''
''strTemp = ""
''sProvider = "CEIC"
''sSearchString = ""
''sUserSearchString= ""
''sDataBase = ""
''sSearchIn = ""
''sTopic = ""
''sUnit = ""
''sFrequency = ""
''sSources = ""
''
''sIDSearch = "YES"
''sID_Tag = "ID"
''sVerifykey = ""
''sNoResult = "" 
''
''blnActiveSeries = False
''blnSubscribed = False
''blnSeriesName = False              
''
''On Error Resume Next
''
''sProvider = Ucase(getSplitValue(sData1,"Provider"))
''sSearchString = Ucase(getSplitValue(sData1,"Keyword"))
''sUserSearchString = getSplitValue(sData1,"Keyword")
''sDatabase = Ucase(getSplitValue(sData1,"Database"))
''sSearchIn = Ucase(getSplitValue(sData1,"SearchIn"))
''sTopic = Ucase(getSplitValue(sData1,"Topic"))
''sUnit = Ucase(getSplitValue(sData1,"Unit"))
''sFrequency = Ucase(getSplitValue(sData1,"Frequency"))
''sSources = Ucase(getSplitValue(sData1,"Sources"))
''
''sID_Tag = Ucase(getSplitValue(sData1,"Id_Tag"))
''sIDSearch = Ucase(getSplitValue(sData1,"IdSearch"))
''sNoResult = Ucase(getSplitValue(sData1,"Noresult")) 
''sVerifykey = Ucase(getSplitValue(sData1,"VerifyKey"))
''
''If sDataBase = "ALL DATABASES" Then
''  sDataBase = "" 'by default search is in all database
''End If
''
''
''Log.Message ("Inside No Result option " & sNoResult) 
''Set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("KeywordSearchForm")._
''  WinFormsObject("Panel_Right").WinFormsObject("TableLayoutPanel1").WinFormsObject("SearchResultsControl1")._
''  WinFormsObject("TableLayoutPanel1").WinFormsObject("Panel1").WaitChild("WinFormsObject(""Label_Results"")",5000)
''
'''Checking for No results panel display
''
''If objTemp.Exists=True Then
''  If Ucase(objTemp.Text) = "NO RESULTS FOUND" Then
''    If sNoResult <> "" Then
''      strTCRemarks = "No search results found page is displayed as expected."
''      Exit Sub   
''    Else 
''      'Search is not giving any results for positive case
''      strTestCaseResult="FAIL"          
''      strTCRemarks = "No results found '" & sSearchString & "' in '" & sDatabase & "'." & _
''        "Please check the keyword and other parameters provided"
''      Exit Sub 
''    End IF
''  End IF
''Else ' Look for Search results grid 
''           
''End If
''
''Set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("KeywordSearchForm")._
''              WinFormsObject("Panel_Right").WinFormsObject("TableLayoutPanel1").WinFormsObject("SearchResultsControl1")._
''              WinFormsObject("TableLayoutPanel1").Waitchild("WinFormsObject(""GridEX"")",5000)
''
''If objTemp.Exists = True Then
''  If sSearchIn <> "" then       ' Select the three checkboxes if specified.
''    aArray1=Split(sSearchIn,";")
''    intJ = uBound(aArray1) ' how many items specified. 
''    For intI =0 to UBound(aArray1)
''      If Ucase(aArray1(intI))="SERIES" then
''        blnActiveSeries = True
''      Elseif Ucase(aArray1(intI))="SUBSCRIBED" then
''        blnSubscribed = True
''      Elseif Ucase(aArray1(intI))="SERIESNAME" then
''        blnSeriesName = True
''      End If
''    Next    
''  End If
''   
''  '**** Verify if search results have only the specified Active, Subscribed, Unit, Frequncy, Topic and Database.
''  ' If search should be done in subscribed series only, make sure all results are subscribed.
''    If blnActiveSeries = True then
''      For intI = 0 to objTemp.RowCount - 1 ' Search in the results grid
''        objTemp.row = intI
''        If objTemp.CurrentRow.Cells.Item(35).Text <> "Active" Then
''          strTestCaseResult = "FAIL"
''          strTCRemarks = "Search result verification for 'Active' series faild at row - " & intI
''          Exit Sub
''        End IF
''      Next
''    End IF
''    ' If search should be done in Active series only, make sure all results are Active.
''    If blnSubscribed = True then
''      For intI = 0 to objTemp.RowCount - 1 ' Search in the results grid
''        objTemp.row = intI
''        If objTemp.CurrentRow.Cells.Item(33).Text <> "Y" Then
''          strTestCaseResult = "FAIL"
''          strTCRemarks = "Search result verification for 'Subscribed' series faild at row - " & intI
''          Exit Sub
''        End IF
''      Next
''    End IF
''    ' If search should be done in Active series only, make sure all results are Active.
''    If sUnit <> "" then
''      For intI = 0 to objTemp.RowCount - 1 ' Search in the results grid
''        objTemp.row = intI
''        If aqstring.StrMatches(Ucase(sUnit),Ucase(objTemp.CurrentRow.Cells.Item(9).Text )) = False Then
''          strTestCaseResult = "FAIL"
''          strTCRemarks = "Search results verification for 'Unit' value is faild at row - " & intI
''          Exit Sub
''        End IF
''      Next
''    End IF
''
''       ' See if the search results are from 'Frequency' Specified.
''    If sFrequency <> "" Then
''      aArray2 = Split(sFrequency,";") 
''      For intI = 0 to objTemp.RowCount - 1
''        blnFound = False
''        strTemp = objTemp.CurrentRow.Cells.Item(7).Text  ' Frequency column is 7
''        For intJ = 0 to ubound(aArray2)
''          If ucase(aArray2(intJ)) = Ucase(strTemp) Then
''            ' Frequency matched & go to next next row
''            blnFound = True
''            Exit For
''          End IF
''        Next
''        If blnFound = False Then
''          strTestCaseResult = "FAIL"
''          strTCRemarks = "Search for specified Frequency(s) -'" & sFrequency & "' failed at row - " & intJ
''          Exit Sub
''        End IF
''      Next
''    End IF     
''    
''
''       ' See if the search results are from 'Topic' Specified.
''    If sTopic <> "" Then
''      aArray2 = Split(sTopic,";") 
''      
''      For intI = 0 to objTemp.RowCount - 1
''      
''        blnFound = False
''        strTemp = objTemp.CurrentRow.Cells.Item(17).Text  ' Topic column is 17
''
''        For intJ = 0 to ubound(aArray2)
''        strTemp=Trim(Ucase(strTemp))
''          If aArray2(intJ) = strTemp Then
''            ' Topic matched & go to next next row
''            blnFound = True
''            Exit For
''          End IF
''        Next
''        If blnFound = False Then
''          strTestCaseResult = "FAIL"
''          strTCRemarks = "Search for specified Topic(s) -'" &sTopic&"-str variable"&strTemp&"' failed at row - " & intJ
''          Exit Sub
''        End IF
''      Next
''    End IF     
'' 
''   ' See if the search results are from 'Databases' Specified.
''    If sDatabase <> "" Then
''      aArray2 = Split(sDataBase,";") 
''      For intI = 0 to objTemp.RowCount - 1
''        blnFound = False
''        strTemp = objTemp.CurrentRow.Cells.Item(29).Text  ' DB column is 29
''        For intJ = 0 to ubound(aArray2)
''          If ucase(aArray2(intJ)) = Ucase(strTemp) Then
''            ' Database matched & go to next next row
''            blnFound = True
''            Exit For
''          End IF
''        Next
''        If blnFound = False Then
''          strTestCaseResult = "FAIL"
''          strTCRemarks = "Search for specified Database -'" & sDatabase & "' failed at row - " & intJ
''          Exit Sub
''        End IF
''      Next
''    End IF     
''  '**** End of Active, Subscribed, Unit, Frequncy, Topic and Database verification.
''  
''  If sIDSearch = "YES" Then
''    If sVerifykey = "" and sID_Tag = "ID" then 
''      aArray1 = Split(sSearchString,";")
''      
''    ElseIf sVerifykey <> "" and sID_Tag ="TAG" then 
''      aArray1 = Split(sVerifykey,";")
''
''    ElseIf sVerifykey ="" and sID_Tag="TAG" then
''      Log.Message ("Search Verification for TAG - " & sSearchString & " failed. Verifykey was not found." )
''      strTCRemarks = "Search Verification for TAG - " & sSearchString & " failed. Verifykey was not found."
''      strTestCaseResult = "FAIL"
''      Exit Sub 
''    End If
''
''       
''    ' Complete the ID search verification.
''    For intJ = 0 to UBound(aArray1) ' For each series id  
''      strTemp = aArray1(intJ)   
''      blnGotResults = False
''      For intI = 0 to objTemp.RowCount - 1 ' Search in the results grid
''        objTemp.row = intI
''        If objTemp.CurrentRow.Cells.Item(18).Text = strTemp then
''          ObjTemp.CurrentRow.set_CheckState(0)
''          blnGotResults = True
''          Exit For
''        End IF
''      Next
''       'Search result message included in the array loop
''      If blnGotResults = False Then
''        strTestCaseResult = "FAIL"
''        strTCRemarks = "Search result verification for Series ID/TAG: " & StrTemp & " failed"
''        Exit Sub
''      End IF
''    Next   ' Next for aArray1
''    If sDatabase = "" Then
''      sDatabase = "All Databases" 'by default search is in all database
''    End If
''
''    strTCRemarks = "Search for '" & sSearchString & "' in '" & sDatabase & "' was successfully completed."
''    
''    If sDatabase <> "" Then
''      aArray2 = split (sDatabase, ";")
''      If Ubound(aArray2) > 0 Then ' confirm the DB provided 
''        strTCRemarks = strTCRemarks & "  No use of giving more than one DB while searching for Series ID/Tag. Invalid TestCase."
''      End IF  
''    End IF
''    Log.Message (strTCRemarks)
''  Else ' Search using string 
''  
''    If ((sID_Tag = "ACRONYM") OR (sID_Tag = "Acronym") OR (sID_Tag = "acronym")) Then
''
''    ' Search for Acronym string
''    ' Search in Series Name (5), Unit (9), Source (11), Location (36).
''       Dim MyArray
''       Dim sVerifykey_one,sVerifykey_two,sUserVerifykey
''       
''       sVerifykey = aqstring.Replace(sVerifykey, "&", "AND")
''       sVerifykey = aqstring.Replace(sVerifykey, "-", " ")
''       
''
''       MyArray = split(sVerifykey, ":", -1, 1)
''       
''       If uBound(MyArray) > 0 Then
''         sVerifykey_one = MyArray(0) 
''         sVerifykey_two = MyArray(1)
''       Else
''          sVerifykey_one = sVerifykey
''          sVerifykey_two = sVerifykey
''       End IF
''       
'''       if (MyArray = split( sVerifykey, ":", -1, 1)) Then
'''          sVerifykey_one = MyArray(0) 
'''          sVerifykey_two = MyArray(1)
'''       end if
'''       if(sVerifykey_two = "") Then
'''          sVerifykey_one = sVerifykey
'''          sVerifykey_two = sVerifykey
'''       end if           	
''
''       For intJ = 0 to objTemp.RowCount - 1
''          objTemp.row = intJ
''          strSearchResultText = objTemp.CurrentRow.Cells.Item(5).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(9).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(10).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(11).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(12).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(24).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(43).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(44).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(36).Text
''                              
''            strSearchResultText = aqstring.Replace(strSearchResultText, "-", " ")
''            strSearchResultText = aqstring.Replace(strSearchResultText, "&", "AND")
''            strSearchResultText = aqstring.Replace(strSearchResultText, ":", "")
''            strSearchResultText = aqstring.Replace(strSearchResultText, ",", "")
''            sSearchString = aqstring.Replace(sSearchString, "-", " ")
''            sSearchString = aqstring.Replace(sSearchString, "&", "AND")
''                                          
''            if(strSearchResultText = aqstring.Replace(strSearchResultText, "-", " ")) Then
''            end if	                                
''            If aqstring.Find(strSearchResultText,sVerifykey,0,false) <> -1 OR aqstring.Find(strSearchResultText,sSearchString,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey_one,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey_two,0,false) <> -1 Then      ' Expected Result found in the current row
''            
''	          'If aqstring.Find(strSearchResultText,sVerifykey,0,false) <> -1 OR aqstring.Find(strSearchResultText,sSearchString,0,false) <> -1 Then      ' Expected Result found in the current row    
''                ObjTemp.CurrentRow.set_CheckState(0)
''                strTCRemarks = "Search result verification for keyword " & sVerifykey  & " is successful."
''	  
''          	' Expect result not found'              
''      	    else
''                strTestCaseResult = "FAIL" 
''                strTCRemarks = "'" & sVerifykey &" and "& sUserSearchString &"' not found in '" & strSearchResultText &  "' at row number - '" & intJ
''
''                Exit Sub
''            End if
''  
''        Next
''      Exit Sub   
''    End if       
''    
'''-------------------------------------------------------------------
''
''' We should find the searh string in each of 40 rows.
'''Need to add AND/OR/NOT operator code here.
''
'''-------------------------------------------------------------------
''IF sID_Tag = "OPERATOR" Then
''
''  Dim MyString,My_Array_String,i,sVerifykey1,sVerifykey2,sVerifykey3,sVerifykey4
''  Dim Search_pattern_1,Search_pattern_2
''  Dim Andopt,Oropt,Notopt,AND_firstflag,OR_firstflag,NOT_firstflag,AND_secflag,OR_secflag,NOT_secflag
''  
''  strSearchResultText = objTemp.CurrentRow.Cells.Item(5).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(9).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(10).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(11).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(12).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(24).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(43).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(44).Text & " " & _
''                              objTemp.CurrentRow.Cells.Item(36).Text
''  
''  Andopt=0
''  Oropt=0
''  Notopt=0
''
''  sSearchString = aqString.Replace(sSearchString, ";"," OR ")
''  My_Array_String = Split(sSearchString, " ", -1, 1)
''
''  For i = 0 to UBound(My_Array_String)
''
''    IF ((ucase(My_Array_String(i))) = "AND") AND (Andopt=1) Then
''	  	AND_secflag = i
''	  end if
''  
''	  IF ((ucase(My_Array_String(i))) = "AND") AND (Andopt=0) Then
''		  AND_firstflag = i
''		  Andopt=1
''	  end if
''
''  	if((ucase(My_Array_String(i))) = "OR") AND (Oropt=1) Then
''	  	OR_secflag=i
''	  end if
''
''  	if((ucase(My_Array_String(i))) = "OR") AND (Oropt=0) Then
''	  	OR_firstflag=i
''		  Oropt=1
''	  end if
''
''  	if((ucase(My_Array_String(i))) = "NOT") AND (Notopt=1) Then
''	  	NOT_secflag=i
''	  end if
''
''  	if((ucase(My_Array_String(i))) = "NOT") AND (Notopt=0) Then
''	  	NOT_firstflag=i
''		  Notopt=1
''	  end if
''
''  Next
''
''	'FOR DOUBLE OPERATORS :  ..AND... AND.. '
''
''	IF(AND_firstflag <> "") AND (AND_secflag <> "") AND (OR_firstflag = "") AND (NOT_firstflag = "")Then
''
''		sVerifykey1 = My_Array_String(AND_firstflag-1)
''		sVerifykey2 = My_Array_String(AND_firstflag+1)' Equal to My_Array_String(OR_firstflag-1)
''		sVerifykey3 = My_Array_String(AND_secflag+1)
'' 
'' 		For intJ = 0 to objTemp.RowCount - 1
''			objTemp.row = intJ
''
''			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then
''
''				ObjTemp.CurrentRow.set_CheckState(0)
''				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''			else
''        strTestCaseResult = "FAIL"
''				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed."  &  "' at row number - '" & intJ
''				Exit For
''			End if
''		Next
''	End if
''
''	'FOR ... OR ...OR'
''	if(OR_firstflag <> "") AND (OR_secflag <> "") AND (AND_firstflag = "") AND (NOT_firstflag = "") Then ' Expect result not found
''			sVerifykey1 = My_Array_String(OR_firstflag-1)
''			sVerifykey2 = My_Array_String(OR_firstflag+1) 
''			sVerifykey3 = My_Array_String(OR_secflag+1)
''
''			For intJ = 0 to objTemp.RowCount - 1
''				objTemp.row = intJ
''
''				if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then
''
''					ObjTemp.CurrentRow.set_CheckState(0)
''					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''				else
''          strTestCaseResult = "FAIL"
''					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''					Exit For
''				End if
''			Next
''	End if
''
''	'FOR...NOT...NOT...'
''	if(NOT_firstflag <> "") AND (NOT_secflag <> "") AND (AND_firstflag = "") AND (OR_firstflag = "") Then ' Expect result not found
''		sVerifykey1 = My_Array_String(NOT_firstflag-1)
''		sVerifykey2 = My_Array_String(NOT_firstflag+1) 
''		sVerifykey3 = My_Array_String(NOT_secflag+1)
''
''		For intJ = 0 to objTemp.RowCount - 1
''			objTemp.row = intJ
''			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 Then
''				if aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey,0,false) <> -1 Then
''           strTestCaseResult = "FAIL" 
''					 strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''					 Exit For
''				else
''					ObjTemp.CurrentRow.set_CheckState(0)
''					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''				End if
''			Else
''        strTestCaseResult = "FAIL"
''				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''				 Exit For
''			End if
''		Next
''	End if
''
'' 
''	IF(AND_secflag = "") AND (OR_secflag = "") AND (NOT_secflag = "")Then
''
''		'..AND...OR..' 
''		
''		IF(AND_firstflag <> "") AND (OR_firstflag <> "") Then
''			if(AND_firstflag < OR_firstflag) AND (NOT_firstflag = "") AND (AND_secflag = "")Then
''
''				sVerifykey1 = My_Array_String(AND_firstflag-1)
''				sVerifykey2 = My_Array_String(AND_firstflag+1)' Equal to My_Array_String(OR_firstflag-1)
''				sVerifykey3 = My_Array_String(OR_firstflag+1)
'' 
''				For intJ = 0 to objTemp.RowCount - 1
''					objTemp.row = intJ
''					
''					if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then
''
''						ObjTemp.CurrentRow.set_CheckState(0)
''						strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''					else
''            strTestCaseResult = "FAIL"
''						strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''						Exit For
''					End if
''				Next
''			End if
''		End if
''
''		'...AND...NOT...'
''		IF(AND_firstflag <> "") AND (NOT_firstflag <> "") Then 
''			if(AND_firstflag < NOT_firstflag) AND (OR_firstflag = "") Then
''
''				sVerifykey1 = My_Array_String(AND_firstflag-1)
''				sVerifykey2 = My_Array_String(AND_firstflag+1)' Equal to My_Array_String(OR_firstflag-1)
''				sVerifykey3 = My_Array_String(NOT_firstflag+1)
''
''				For intJ = 0 to objTemp.RowCount - 1
''					objTemp.row = intJ
''
''					if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1Then
''						if aqstring.Find(strSearchResultText,sVerifykey3,0,false)<> -1 Then
'' 							strTestCaseResult = "FAIL"
''							strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''							Exit For
''						else
''							ObjTemp.CurrentRow.set_CheckState(0)
''							strTCRemarks = "Search result verification for keyword " & sUserSearchString & "is successful."
''						End if
''					Else
''						strTestCaseResult = "FAIL"
''						strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''						Exit For
''					End if
''				Next
''			End if
''		End if
''
''		'...OR...AND...' 
''    if(OR_firstflag <> "")AND (AND_firstflag <> "") Then
''		  if(OR_firstflag < AND_firstflag) AND (NOT_firstflag = "") Then
''
''  			sVerifykey1 = My_Array_String(OR_firstflag-1)
''	  		sVerifykey2 = My_Array_String(OR_firstflag+1)' Equal to My_Array_String(OR_firstflag-1)
''		  	sVerifykey3 = My_Array_String(AND_firstflag+1)
''
''  			For intJ = 0 to objTemp.RowCount - 1
''	  			objTemp.row = intJ
''		  		
''	   			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then
''
''  					ObjTemp.CurrentRow.set_CheckState(0)
''	  				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''		  		else
''            strTestCaseResult = "FAIL"
''				  	strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''					  Exit For 
''  				End if
''	  		Next
''		  End if
''    End if
''    
''		'...OR...NOT..'
''		IF(OR_firstflag <> "") AND (NOT_firstflag <> "") Then
''			if(OR_firstflag < NOT_firstflag) AND (AND_firstflag = "") Then
''
''				sVerifykey1 = My_Array_String(OR_firstflag-1)
''				sVerifykey2 = My_Array_String(OR_firstflag+1)' Equal to My_Array_String(OR_firstflag-1)
''				sVerifykey3 = My_Array_String(NOT_firstflag+1)
''
''				For intJ = 0 to objTemp.RowCount - 1
''					objTemp.row = intJ
''					
''					if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then
''						if aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then
''              strTestCaseResult = "FAIL"
''							strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''							Exit For 
''						else
''							ObjTemp.CurrentRow.set_CheckState(0)
''							strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''						End if
''					Else
''            strTestCaseResult = "FAIL"
''						strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''					End if
''				Next
''			End if
''		End if
''
''		'...NOT...AND...'
''    if(NOT_firstflag <> "") AND  (AND_firstflag <> "") Then
''  		if(NOT_firstflag < AND_firstflag) AND (OR_firstflag = "") Then
''
''  			sVerifykey1 = My_Array_String(NOT_firstflag-1)
''	  		sVerifykey2 = My_Array_String(AND_firstflag-1)' Equal to My_Array_String(OR_firstflag-1)
''		  	sVerifykey3 = My_Array_String(AND_firstflag+1)
'' 
''  			For intJ = 0 to objTemp.RowCount - 1
''	  			objTemp.row = intJ
''		  		
''  				if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1Then
''	  				if aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then
''              strTestCaseResult = "FAIL"
''			  			strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ 
''				  		Exit For
''					  else
''  						ObjTemp.CurrentRow.set_CheckState(0)
''	  					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''		  			End if
''			  	Else
''            strTestCaseResult = "FAIL"
''					  strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''					  Exit For
''  				End if
''	  		Next
''		  End if
''    End IF
''           
''
''		'...NOT...OR...'
''    IF(OR_firstflag <> "") AND (NOT_firstflag <> "") Then
''		  if(NOT_firstflag < OR_firstflag) AND (AND_firstflag = "") Then
''
''  			sVerifykey1 = My_Array_String(NOT_firstflag-1)
''	  		sVerifykey2 = My_Array_String(OR_firstflag-1)' Equal to My_Array_String(OR_firstflag-1)
''		  	sVerifykey3 = My_Array_String(OR_firstflag+1)
''
''  			For intJ = 0 to objTemp.RowCount - 1
''	  			objTemp.row = intJ
''		  		
''  				if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then
''	  				if aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then
''              strTestCaseResult = "FAIL"
''		  				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''			  			Exit For 
''				  	else
''					  	ObjTemp.CurrentRow.set_CheckState(0)
''						  strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''					  End if
''				  else
''            strTestCaseResult = "FAIL"
''					  strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''					  Exit For
''				  End if
''			  Next
''  		End if
''    End if
'' 'FOR SINGLE OPERATOR' 
''  ' FOR "AND"  '
''  
''	if(AND_firstflag <> "") AND (OR_firstflag = "") AND (NOT_firstflag = "") Then ' Expect result not found
''		sVerifykey1 = My_Array_String(AND_firstflag-1)
''		sVerifykey2 = My_Array_String(AND_firstflag+1)
''
''		For intJ = 0 to objTemp.RowCount - 1
''			objTemp.row = intJ
''			 
''			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then
''
''				ObjTemp.CurrentRow.set_CheckState(0)
''				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''			else
''        strTestCaseResult = "FAIL"
''				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''				Exit For
''			End if
''		Next
''	End if
''
''    ' FOR "OR" '
''    
''	if(OR_firstflag <> "") AND (AND_firstflag = "") AND (NOT_firstflag = "") Then ' Expect result not found
''		sVerifykey1 = My_Array_String(OR_firstflag-1)
''		sVerifykey2 = My_Array_String(OR_firstflag+1)
''
''		For intJ = 0 to objTemp.RowCount - 1
''			objTemp.row = intJ
''			 
''			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then
''
''				ObjTemp.CurrentRow.set_CheckState(0)
''				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''			else
''        strTestCaseResult = "FAIL"
''				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''				Exit for
''			End if
''		Next
''	End if
''
''  ' FOR "NOT" '
''  
''	if(NOT_firstflag <> "") AND (AND_firstflag = "") AND (OR_firstflag = "") Then ' Expect result not found
''		sVerifykey1 = My_Array_String(NOT_firstflag-1)
''		sVerifykey2 = My_Array_String(NOT_firstflag+1) 
''
''		For intJ = 0 to objTemp.RowCount - 1
''			objTemp.row = intJ
''			
''			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 Then
''				if aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then
''          strTestCaseResult = "FAIL"
''					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ 
''					Exit For
''				else
''					ObjTemp.CurrentRow.set_CheckState(0)
''					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
''				End if
''			Else
''        strTestCaseResult = "FAIL"
''				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
''				Exit For 
''			End if
''		Next
''  End if
''  Exit Sub
''  End if
''     
''  'END OF OPERATOR Function'    
''  
''ElseIf((sID_Tag <> "ACRONYM") OR (sID_Tag <> "Acronym") OR (sID_Tag <> "acronym") OR (sID_Tag <> "OPERATOR")) Then
''      
''      dim strSearchResultText  
''     ' See if the search got space in between.
''      aArray1 = split(sSearchString, " ")
''    
''      For intJ = 0 to objTemp.RowCount - 1
''        objTemp.row = intJ
''        ' Search in Series Name (5), Location (36) & Source (11).
''        strSearchResultText = objTemp.CurrentRow.Cells.Item(5).Text & " " & objTemp.CurrentRow.Cells.Item(11).Text & " " & objTemp.CurrentRow.Cells.Item(36).Text
''      
''        If blnSeriesName = True Then ' Search in series name only
''          strSearchResultText = objTemp.CurrentRow.Cells.Item(5).Text      
''        End IF
''        ' If Quote  (exact string search)
''
''     
''              
''        If Ubound(aArray1) = 0 Then ' single word search
''          sFirstWord = aArray1(0)
''          IF aqstring.Find(strSearchResultText,sFirstWord,0,false) <> -1  Then 'if not found - fail search
''            ObjTemp.CurrentRow.set_CheckState(0)
''            strTCRemarks = "Search result verification for keyword " & sFirstWord  & " is successful."
''          Else 
''            strTestCaseResult = "FAIL"
''            strTCRemarks = "Search result verification for keyword " & sFirstWord  & " failed at row number - " & intJ
''            Exit For         
''          End IF
''        Else ' multi word search.
''          If Ubound(aArray1) = 1 then
''            sFirstWord = aArray1(0)
''            sSecondWord = aArray1(1)  
''            IF aqstring.Find(strSearchResultText,sFirstWord,0,false) <> -1 OR aqstring.Find(strSearchResultText,sSecondWord,0,false) <> -1 Then 'if not found - fail search
''              ObjTemp.CurrentRow.set_CheckState(0)
''              strTCRemarks = "Search result verification for keywords '" & sFirstWord  & "' AND '" & sSecondWord & "' is successful."
''            Else
''              strTestCaseResult = "FAIL"
''              strTCRemarks = "Search result verification for keywords '" & sFirstWord  & "' AND '" & sSecondWord & "' is failed at row number - " & intJ
''              Exit For          
''            End IF
''          ElseIf Ubound(aArray1) = 2 then
''              strTestCaseResult = "ABORT"
''              strTCRemarks = "Search result verification for keyword having three strings is not handled."
''              Exit For
''      
''          Else ' not handled
''              strTestCaseResult = "ABORT"
''              strTCRemarks = "Search result verification for keyword having multiple strings is not handled."
''              Exit For
''          End IF 
''              
''          
''        End IF
''      Next
''    End if     
''End if       
''          
'''-------------------------------------------------------------------
'''-------------------------------------------------------------------
''
''Else  ' Grid not found
''  strTestCaseResult = "FAIL"
''  strTCRemarks = "Search result grid not found."
''End IF   
''  
'''  If stopic<>"" then 
'''  IF aqstring.Find(objTemp.CurrentRow.Cells.Item(36).Text,stopic,0,false)<>-1  Then '36
'''  strTCRemarks = "Search for '" & Search_String & "' in '" & DataBase & "' was successfully completed"
'''  Log.Message (strTCRemarks) 
'''  Else
'''  strTestCaseResult = "FAIL"
'''  strTCRemarks = "Search results verification failed"
'''  End IF
'''  elseif Search_String<>"" then 
'''                                         
'''  IF aqstring.Find(objTemp.CurrentRow.Cells.Item(36).Text,Search_String,0,false)<>-1 or aqstring.Find(objTemp.CurrentRow.Cells.Item(5).Text,Search_String,0,false)<>-1  Then '36
'''  strTCRemarks = "Search for '" & Search_String & "' in '" & DataBase & "' was successfully completed"
'''  Log.Message (strTCRemarks) 
'''  strTestCaseResult = "PASS"
'''  Else
'''  strTestCaseResult = "FAIL"
'''  strTCRemarks = "Search results verification failed"
'''  End IF
'''                                         
'''        
'''  Else
'''  strTestCaseResult = "FAIL"
'''  strTCRemarks = "Search results verification failed"
'''  End IF  
'''  End IF
''
''If Err.Number > 0 Then
''  strTestCaseResult = "FAIL"
''  strTCRemarks = "Error in 'Verify_Search()' - " & Err.Description
''  Err.Clear
''End IF 
''
''End Sub 

'***********  Search Result Verification  ***************

' Date          : 29-04-2013 (Guru)
' Search verification logic
' If ID/Tag search is specified - search string should present in ID/Tag column
' If ID/Tag search is NOT specified - search string should be present series name & source & location.

Sub Verify_Search(Keyword,sdata1,sdata2)

dim sFirstWord, sSecondWord, sThirdWord, sFourthWord, sFifthWord   
dim aArray1, aArray2, intI, intJ, intK, intL 
dim blnGotResults, blnSort, blnKeyWordNotFound
dim strTemp, strTemp1, strTemp2
dim sProvider,sSearchString,sUserSearchString,sDataBase,sSearchIn,sTopic, sUnit, sFrequency,sSources
dim sIDSearch,sID_Tag,sVerifykey, sNoResult 
dim blnActiveSeries, blnSubscribed, blnSeriesName, blnFound

blnGotResults = False
blnKeyWordNotFound = False

strTemp = ""
sProvider = "CEIC"
sSearchString = ""
sUserSearchString= ""
sDataBase = ""
sSearchIn = ""
sTopic = ""
sUnit = ""
sFrequency = ""
sSources = ""

sIDSearch = "YES"
sID_Tag = "ID"
sVerifykey = ""
sNoResult = "" 

blnActiveSeries = False
blnSubscribed = False
blnSeriesName = False              

On Error Resume Next

sProvider = Ucase(getSplitValue(sData1,"Provider"))
sSearchString = Ucase(getSplitValue(sData1,"Keyword"))
sUserSearchString = getSplitValue(sData1,"Keyword")
sDatabase = Ucase(getSplitValue(sData1,"Database"))
sSearchIn = Ucase(getSplitValue(sData1,"SearchIn"))
sTopic = Ucase(getSplitValue(sData1,"Topic"))
sUnit = Ucase(getSplitValue(sData1,"Unit"))
sFrequency = Ucase(getSplitValue(sData1,"Frequency"))
sSources = Ucase(getSplitValue(sData1,"Sources"))

sID_Tag = Ucase(getSplitValue(sData1,"Id_Tag"))
sIDSearch = Ucase(getSplitValue(sData1,"IdSearch"))
sNoResult = Ucase(getSplitValue(sData1,"Noresult")) 
sVerifykey = Ucase(getSplitValue(sData1,"VerifyKey"))

If sDataBase = "ALL DATABASES" Then
  sDataBase = "" 'by default search is in all database
End If


Log.Message ("Inside No Result option " & sNoResult) 
Set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("KeywordSearchForm")._
  WinFormsObject("Panel_Right").WinFormsObject("TableLayoutPanel1").WinFormsObject("SearchResultsControl1")._
  WinFormsObject("TableLayoutPanel1").WinFormsObject("Panel1").WaitChild("WinFormsObject(""Label_Results"")",5000)

'Checking for No results panel display

If objTemp.Exists=True Then
  If Ucase(objTemp.Text) = "NO RESULTS FOUND" Then
    If sNoResult <> "" Then
      strTCRemarks = "No search results found page is displayed as expected."
      Exit Sub   
    Else 
      'Search is not giving any results for positive case
      strTestCaseResult="FAIL"          
      strTCRemarks = "No results found '" & sSearchString & "' in '" & sDatabase & "'." & _
        "Please check the keyword and other parameters provided"
      Exit Sub 
    End IF
  End IF
Else ' Look for Search results grid 
           
End If

Set objTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("KeywordSearchForm")._
              WinFormsObject("Panel_Right").WinFormsObject("TableLayoutPanel1").WinFormsObject("SearchResultsControl1")._
              WinFormsObject("TableLayoutPanel1").Waitchild("WinFormsObject(""GridEX"")",5000)

If objTemp.Exists = True Then
  If sSearchIn <> "" then       ' Select the three checkboxes if specified.
    aArray1=Split(sSearchIn,";")
    intJ = uBound(aArray1) ' how many items specified. 
    For intI =0 to UBound(aArray1)
      If Ucase(aArray1(intI))="SERIES" then
        blnActiveSeries = True
      Elseif Ucase(aArray1(intI))="SUBSCRIBED" then
        blnSubscribed = True
      Elseif Ucase(aArray1(intI))="SERIESNAME" then
        blnSeriesName = True
      End If
    Next    
  End If
   
  '**** Verify if search results have only the specified Active, Subscribed, Unit, Frequncy, Topic and Database.
  ' If search should be done in subscribed series only, make sure all results are subscribed.
    If blnActiveSeries = True then
      For intI = 0 to objTemp.RowCount - 1 ' Search in the results grid
        objTemp.row = intI
        If objTemp.CurrentRow.Cells.Item(35).Text <> "Active" Then
          strTestCaseResult = "FAIL"
          strTCRemarks = "Search result verification for 'Active' series faild at row - " & intI
          Exit Sub
        End IF
      Next
    End IF
    ' If search should be done in Active series only, make sure all results are Active.
    If blnSubscribed = True then
      For intI = 0 to objTemp.RowCount - 1 ' Search in the results grid
        objTemp.row = intI
        If objTemp.CurrentRow.Cells.Item(33).Text <> "Y" Then
          strTestCaseResult = "FAIL"
          strTCRemarks = "Search result verification for 'Subscribed' series faild at row - " & intI
          Exit Sub
        End IF
      Next
    End IF
    ' If search should be done in Active series only, make sure all results are Active.
    If sUnit <> "" then
      For intI = 0 to objTemp.RowCount - 1 ' Search in the results grid
        objTemp.row = intI
        If aqstring.StrMatches(Ucase(sUnit),Ucase(objTemp.CurrentRow.Cells.Item(15).Text )) = False Then
          strTestCaseResult = "FAIL"
          strTCRemarks = "Search results verification for 'Unit' value is faild at row - " & intI
          Exit Sub
        End IF
      Next
    End IF

       ' See if the search results are from 'Frequency' Specified.
    If sFrequency <> "" Then
      aArray2 = Split(sFrequency,";") 
      For intI = 0 to objTemp.RowCount - 1
        blnFound = False
        strTemp = objTemp.CurrentRow.Cells.Item(11).Text  ' Frequency column is 7
        For intJ = 0 to ubound(aArray2)
          If ucase(aArray2(intJ)) = Ucase(strTemp) Then
            ' Frequency matched & go to next next row
            blnFound = True
            Exit For
          End IF
        Next
        If blnFound = False Then
          strTestCaseResult = "FAIL"
          strTCRemarks = "Search for specified Frequency(s) -'" & sFrequency & "' failed at row - " & intJ
          Exit Sub
        End IF
      Next
    End IF     
    

       ' See if the search results are from 'Topic' Specified.
    If sTopic <> "" Then
      aArray2 = Split(sTopic,";") 
      
      For intI = 0 to objTemp.RowCount - 1
      
        blnFound = False
        strTemp = objTemp.CurrentRow.Cells.Item(17).Text  ' Topic column is 17

        For intJ = 0 to ubound(aArray2)
        strTemp=Trim(Ucase(strTemp))
          If aArray2(intJ) = strTemp Then
            ' Topic matched & go to next next row
            blnFound = True
            Exit For
          End IF
        Next
        If blnFound = False Then
          strTestCaseResult = "FAIL"
          strTCRemarks = "Search for specified Topic(s) -'" &sTopic&"-str variable"&strTemp&"' failed at row - " & intJ
          Exit Sub
        End IF
      Next
    End IF     
 
   ' See if the search results are from 'Databases' Specified.
    If sDatabase <> "" Then
      aArray2 = Split(sDataBase,";") 
      For intI = 0 to objTemp.RowCount - 1
        blnFound = False
        strTemp = objTemp.CurrentRow.Cells.Item(37).Text  ' DB column is 29
        For intJ = 0 to ubound(aArray2)
          If ucase(aArray2(intJ)) = Ucase(strTemp) Then
            ' Database matched & go to next next row
            blnFound = True
            Exit For
          End IF
        Next
        If blnFound = False Then
          strTestCaseResult = "FAIL"
          strTCRemarks = "Search for specified Database -'" & sDatabase & "' failed at row - " & intJ
          Exit Sub
        End IF
      Next
    End IF     
  '**** End of Active, Subscribed, Unit, Frequncy, Topic and Database verification.
  
  If sIDSearch = "YES" Then
    If sVerifykey = "" and sID_Tag = "ID" then 
      aArray1 = Split(sSearchString,";")
      
    ElseIf sVerifykey <> "" and sID_Tag ="TAG" then 
      aArray1 = Split(sVerifykey,";")

    ElseIf sVerifykey ="" and sID_Tag="TAG" then
      Log.Message ("Search Verification for TAG - " & sSearchString & " failed. Verifykey was not found." )
      strTCRemarks = "Search Verification for TAG - " & sSearchString & " failed. Verifykey was not found."
      strTestCaseResult = "FAIL"
      Exit Sub 
    End If

       
    ' Complete the ID search verification.
    For intJ = 0 to UBound(aArray1) ' For each series id  
      strTemp = aArray1(intJ)   
      blnGotResults = False
      For intI = 0 to objTemp.RowCount - 1 ' Search in the results grid
        objTemp.row = intI
        If objTemp.CurrentRow.Cells.Item(18).Text = strTemp then
          ObjTemp.CurrentRow.set_CheckState(0)
          blnGotResults = True
          Exit For
        End IF
      Next
       'Search result message included in the array loop
      If blnGotResults = False Then
        strTestCaseResult = "FAIL"
        strTCRemarks = "Search result verification for Series ID/TAG: " & StrTemp & " failed"
        Exit Sub
      End IF
    Next   ' Next for aArray1
    If sDatabase = "" Then
      sDatabase = "All Databases" 'by default search is in all database
    End If

    strTCRemarks = "Search for '" & sSearchString & "' in '" & sDatabase & "' was successfully completed."
    
    If sDatabase <> "" Then
      aArray2 = split (sDatabase, ";")
      If Ubound(aArray2) > 0 Then ' confirm the DB provided 
        strTCRemarks = strTCRemarks & "  No use of giving more than one DB while searching for Series ID/Tag. Invalid TestCase."
      End IF  
    End IF
    Log.Message (strTCRemarks)
  Else ' Search using string 
  
    If ((sID_Tag = "ACRONYM") OR (sID_Tag = "Acronym") OR (sID_Tag = "acronym")) Then

    ' Search for Acronym string
    ' Search in Series Name (5), Unit (9), Source (11), Location (36).
       Dim MyArray
       Dim sVerifykey_one,sVerifykey_two,sUserVerifykey
       
       sVerifykey = aqstring.Replace(sVerifykey, "&", "AND")
       sVerifykey = aqstring.Replace(sVerifykey, "-", " ")
       

       MyArray = split(sVerifykey, ":", -1, 1)
       
       If uBound(MyArray) > 0 Then
         sVerifykey_one = MyArray(0) 
         sVerifykey_two = MyArray(1)
       Else
          sVerifykey_one = sVerifykey
          sVerifykey_two = sVerifykey
       End IF
       
'       if (MyArray = split( sVerifykey, ":", -1, 1)) Then
'          sVerifykey_one = MyArray(0) 
'          sVerifykey_two = MyArray(1)
'       end if
'       if(sVerifykey_two = "") Then
'          sVerifykey_one = sVerifykey
'          sVerifykey_two = sVerifykey
'       end if           	

       For intJ = 0 to objTemp.RowCount - 1
          objTemp.row = intJ
          strSearchResultText = objTemp.CurrentRow.Cells.Item(5).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(9).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(10).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(11).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(12).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(24).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(43).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(44).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(36).Text
                              
            strSearchResultText = aqstring.Replace(strSearchResultText, "-", " ")
            strSearchResultText = aqstring.Replace(strSearchResultText, "&", "AND")
            strSearchResultText = aqstring.Replace(strSearchResultText, ":", "")
            strSearchResultText = aqstring.Replace(strSearchResultText, ",", "")
            sSearchString = aqstring.Replace(sSearchString, "-", " ")
            sSearchString = aqstring.Replace(sSearchString, "&", "AND")
                                          
            if(strSearchResultText = aqstring.Replace(strSearchResultText, "-", " ")) Then
            end if	                                
            If aqstring.Find(strSearchResultText,sVerifykey,0,false) <> -1 OR aqstring.Find(strSearchResultText,sSearchString,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey_one,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey_two,0,false) <> -1 Then      ' Expected Result found in the current row
            
	          'If aqstring.Find(strSearchResultText,sVerifykey,0,false) <> -1 OR aqstring.Find(strSearchResultText,sSearchString,0,false) <> -1 Then      ' Expected Result found in the current row    
                ObjTemp.CurrentRow.set_CheckState(0)
                strTCRemarks = "Search result verification for keyword " & sVerifykey  & " is successful."
	  
          	' Expect result not found'              
      	    else
                strTestCaseResult = "FAIL" 
                strTCRemarks = "'" & sVerifykey &" and "& sUserSearchString &"' not found in '" & strSearchResultText &  "' at row number - '" & intJ

                Exit Sub
            End if
  
        Next
      Exit Sub   
    End if       
    
'-------------------------------------------------------------------

' We should find the searh string in each of 40 rows.
'Need to add AND/OR/NOT operator code here.

'-------------------------------------------------------------------
IF sID_Tag = "OPERATOR" Then

  Dim MyString,My_Array_String,i,sVerifykey1,sVerifykey2,sVerifykey3,sVerifykey4
  Dim Search_pattern_1,Search_pattern_2
  Dim Andopt,Oropt,Notopt,AND_firstflag,OR_firstflag,NOT_firstflag,AND_secflag,OR_secflag,NOT_secflag
  
  strSearchResultText = objTemp.CurrentRow.Cells.Item(5).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(9).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(10).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(11).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(12).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(24).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(43).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(44).Text & " " & _
                              objTemp.CurrentRow.Cells.Item(36).Text
  
  Andopt=0
  Oropt=0
  Notopt=0

  sSearchString = aqString.Replace(sSearchString, ";"," OR ")
  My_Array_String = Split(sSearchString, " ", -1, 1)

  For i = 0 to UBound(My_Array_String)

    IF ((ucase(My_Array_String(i))) = "AND") AND (Andopt=1) Then
	  	AND_secflag = i
	  end if
  
	  IF ((ucase(My_Array_String(i))) = "AND") AND (Andopt=0) Then
		  AND_firstflag = i
		  Andopt=1
	  end if

  	if((ucase(My_Array_String(i))) = "OR") AND (Oropt=1) Then
	  	OR_secflag=i
	  end if

  	if((ucase(My_Array_String(i))) = "OR") AND (Oropt=0) Then
	  	OR_firstflag=i
		  Oropt=1
	  end if

  	if((ucase(My_Array_String(i))) = "NOT") AND (Notopt=1) Then
	  	NOT_secflag=i
	  end if

  	if((ucase(My_Array_String(i))) = "NOT") AND (Notopt=0) Then
	  	NOT_firstflag=i
		  Notopt=1
	  end if

  Next

	'FOR DOUBLE OPERATORS :  ..AND... AND.. '

	IF(AND_firstflag <> "") AND (AND_secflag <> "") AND (OR_firstflag = "") AND (NOT_firstflag = "")Then

		sVerifykey1 = My_Array_String(AND_firstflag-1)
		sVerifykey2 = My_Array_String(AND_firstflag+1)' Equal to My_Array_String(OR_firstflag-1)
		sVerifykey3 = My_Array_String(AND_secflag+1)
 
 		For intJ = 0 to objTemp.RowCount - 1
			objTemp.row = intJ

			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then

				ObjTemp.CurrentRow.set_CheckState(0)
				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
			else
        strTestCaseResult = "FAIL"
				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed."  &  "' at row number - '" & intJ
				Exit For
			End if
		Next
	End if

	'FOR ... OR ...OR'
	if(OR_firstflag <> "") AND (OR_secflag <> "") AND (AND_firstflag = "") AND (NOT_firstflag = "") Then ' Expect result not found
			sVerifykey1 = My_Array_String(OR_firstflag-1)
			sVerifykey2 = My_Array_String(OR_firstflag+1) 
			sVerifykey3 = My_Array_String(OR_secflag+1)

			For intJ = 0 to objTemp.RowCount - 1
				objTemp.row = intJ

				if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then

					ObjTemp.CurrentRow.set_CheckState(0)
					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
				else
          strTestCaseResult = "FAIL"
					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
					Exit For
				End if
			Next
	End if

	'FOR...NOT...NOT...'
	if(NOT_firstflag <> "") AND (NOT_secflag <> "") AND (AND_firstflag = "") AND (OR_firstflag = "") Then ' Expect result not found
		sVerifykey1 = My_Array_String(NOT_firstflag-1)
		sVerifykey2 = My_Array_String(NOT_firstflag+1) 
		sVerifykey3 = My_Array_String(NOT_secflag+1)

		For intJ = 0 to objTemp.RowCount - 1
			objTemp.row = intJ
			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 Then
				if aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey,0,false) <> -1 Then
           strTestCaseResult = "FAIL" 
					 strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
					 Exit For
				else
					ObjTemp.CurrentRow.set_CheckState(0)
					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
				End if
			Else
        strTestCaseResult = "FAIL"
				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
				 Exit For
			End if
		Next
	End if

 
	IF(AND_secflag = "") AND (OR_secflag = "") AND (NOT_secflag = "")Then

		'..AND...OR..' 
		
		IF(AND_firstflag <> "") AND (OR_firstflag <> "") Then
			if(AND_firstflag < OR_firstflag) AND (NOT_firstflag = "") AND (AND_secflag = "")Then

				sVerifykey1 = My_Array_String(AND_firstflag-1)
				sVerifykey2 = My_Array_String(AND_firstflag+1)' Equal to My_Array_String(OR_firstflag-1)
				sVerifykey3 = My_Array_String(OR_firstflag+1)
 
				For intJ = 0 to objTemp.RowCount - 1
					objTemp.row = intJ
					
					if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then

						ObjTemp.CurrentRow.set_CheckState(0)
						strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
					else
            strTestCaseResult = "FAIL"
						strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
						Exit For
					End if
				Next
			End if
		End if

		'...AND...NOT...'
		IF(AND_firstflag <> "") AND (NOT_firstflag <> "") Then 
			if(AND_firstflag < NOT_firstflag) AND (OR_firstflag = "") Then

				sVerifykey1 = My_Array_String(AND_firstflag-1)
				sVerifykey2 = My_Array_String(AND_firstflag+1)' Equal to My_Array_String(OR_firstflag-1)
				sVerifykey3 = My_Array_String(NOT_firstflag+1)

				For intJ = 0 to objTemp.RowCount - 1
					objTemp.row = intJ

					if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1Then
						if aqstring.Find(strSearchResultText,sVerifykey3,0,false)<> -1 Then
 							strTestCaseResult = "FAIL"
							strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
							Exit For
						else
							ObjTemp.CurrentRow.set_CheckState(0)
							strTCRemarks = "Search result verification for keyword " & sUserSearchString & "is successful."
						End if
					Else
						strTestCaseResult = "FAIL"
						strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
						Exit For
					End if
				Next
			End if
		End if

		'...OR...AND...' 
    if(OR_firstflag <> "")AND (AND_firstflag <> "") Then
		  if(OR_firstflag < AND_firstflag) AND (NOT_firstflag = "") Then

  			sVerifykey1 = My_Array_String(OR_firstflag-1)
	  		sVerifykey2 = My_Array_String(OR_firstflag+1)' Equal to My_Array_String(OR_firstflag-1)
		  	sVerifykey3 = My_Array_String(AND_firstflag+1)

  			For intJ = 0 to objTemp.RowCount - 1
	  			objTemp.row = intJ
		  		
	   			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then

  					ObjTemp.CurrentRow.set_CheckState(0)
	  				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
		  		else
            strTestCaseResult = "FAIL"
				  	strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
					  Exit For 
  				End if
	  		Next
		  End if
    End if
    
		'...OR...NOT..'
		IF(OR_firstflag <> "") AND (NOT_firstflag <> "") Then
			if(OR_firstflag < NOT_firstflag) AND (AND_firstflag = "") Then

				sVerifykey1 = My_Array_String(OR_firstflag-1)
				sVerifykey2 = My_Array_String(OR_firstflag+1)' Equal to My_Array_String(OR_firstflag-1)
				sVerifykey3 = My_Array_String(NOT_firstflag+1)

				For intJ = 0 to objTemp.RowCount - 1
					objTemp.row = intJ
					
					if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then
						if aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then
              strTestCaseResult = "FAIL"
							strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
							Exit For 
						else
							ObjTemp.CurrentRow.set_CheckState(0)
							strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
						End if
					Else
            strTestCaseResult = "FAIL"
						strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
					End if
				Next
			End if
		End if

		'...NOT...AND...'
    if(NOT_firstflag <> "") AND  (AND_firstflag <> "") Then
  		if(NOT_firstflag < AND_firstflag) AND (OR_firstflag = "") Then

  			sVerifykey1 = My_Array_String(NOT_firstflag-1)
	  		sVerifykey2 = My_Array_String(AND_firstflag-1)' Equal to My_Array_String(OR_firstflag-1)
		  	sVerifykey3 = My_Array_String(AND_firstflag+1)
 
  			For intJ = 0 to objTemp.RowCount - 1
	  			objTemp.row = intJ
		  		
  				if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1Then
	  				if aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then
              strTestCaseResult = "FAIL"
			  			strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ 
				  		Exit For
					  else
  						ObjTemp.CurrentRow.set_CheckState(0)
	  					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
		  			End if
			  	Else
            strTestCaseResult = "FAIL"
					  strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
					  Exit For
  				End if
	  		Next
		  End if
    End IF
           

		'...NOT...OR...'
    IF(OR_firstflag <> "") AND (NOT_firstflag <> "") Then
		  if(NOT_firstflag < OR_firstflag) AND (AND_firstflag = "") Then

  			sVerifykey1 = My_Array_String(NOT_firstflag-1)
	  		sVerifykey2 = My_Array_String(OR_firstflag-1)' Equal to My_Array_String(OR_firstflag-1)
		  	sVerifykey3 = My_Array_String(OR_firstflag+1)

  			For intJ = 0 to objTemp.RowCount - 1
	  			objTemp.row = intJ
		  		
  				if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey3,0,false) <> -1 Then
	  				if aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then
              strTestCaseResult = "FAIL"
		  				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
			  			Exit For 
				  	else
					  	ObjTemp.CurrentRow.set_CheckState(0)
						  strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
					  End if
				  else
            strTestCaseResult = "FAIL"
					  strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
					  Exit For
				  End if
			  Next
  		End if
    End if
 'FOR SINGLE OPERATOR' 
  ' FOR "AND"  '
  
	if(AND_firstflag <> "") AND (OR_firstflag = "") AND (NOT_firstflag = "") Then ' Expect result not found
		sVerifykey1 = My_Array_String(AND_firstflag-1)
		sVerifykey2 = My_Array_String(AND_firstflag+1)

		For intJ = 0 to objTemp.RowCount - 1
			objTemp.row = intJ
			 
			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 AND aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then

				ObjTemp.CurrentRow.set_CheckState(0)
				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
			else
        strTestCaseResult = "FAIL"
				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
				Exit For
			End if
		Next
	End if

    ' FOR "OR" '
    
	if(OR_firstflag <> "") AND (AND_firstflag = "") AND (NOT_firstflag = "") Then ' Expect result not found
		sVerifykey1 = My_Array_String(OR_firstflag-1)
		sVerifykey2 = My_Array_String(OR_firstflag+1)

		For intJ = 0 to objTemp.RowCount - 1
			objTemp.row = intJ
			 
			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 OR aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then

				ObjTemp.CurrentRow.set_CheckState(0)
				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
			else
        strTestCaseResult = "FAIL"
				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
				Exit for
			End if
		Next
	End if

  ' FOR "NOT" '
  
	if(NOT_firstflag <> "") AND (AND_firstflag = "") AND (OR_firstflag = "") Then ' Expect result not found
		sVerifykey1 = My_Array_String(NOT_firstflag-1)
		sVerifykey2 = My_Array_String(NOT_firstflag+1) 

		For intJ = 0 to objTemp.RowCount - 1
			objTemp.row = intJ
			
			if aqstring.Find(strSearchResultText,sVerifykey1,0,false) <> -1 Then
				if aqstring.Find(strSearchResultText,sVerifykey2,0,false) <> -1 Then
          strTestCaseResult = "FAIL"
					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ 
					Exit For
				else
					ObjTemp.CurrentRow.set_CheckState(0)
					strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is successful."
				End if
			Else
        strTestCaseResult = "FAIL"
				strTCRemarks = "Search result verification for keyword " & sUserSearchString & " is failed." &  "' at row number - '" & intJ
				Exit For 
			End if
		Next
  End if
  Exit Sub
  End if
     
  'END OF OPERATOR Function'    
  
ElseIf((sID_Tag <> "ACRONYM") OR (sID_Tag <> "Acronym") OR (sID_Tag <> "acronym") OR (sID_Tag <> "OPERATOR")) Then
      
      dim strSearchResultText  
     ' See if the search got space in between.
      aArray1 = split(sSearchString, " ")
    
      For intJ = 0 to objTemp.RowCount - 1
        objTemp.row = intJ
        ' Search in Series Name (5), Location (36) & Source (11).
        strSearchResultText = objTemp.CurrentRow.Cells.Item(5).Text & " " & objTemp.CurrentRow.Cells.Item(11).Text & " " & objTemp.CurrentRow.Cells.Item(36).Text
      
        If blnSeriesName = True Then ' Search in series name only
          strSearchResultText = objTemp.CurrentRow.Cells.Item(5).Text      
        End IF
        ' If Quote  (exact string search)

     
              
        If Ubound(aArray1) = 0 Then ' single word search
          sFirstWord = aArray1(0)
          IF aqstring.Find(strSearchResultText,sFirstWord,0,false) <> -1  Then 'if not found - fail search
            ObjTemp.CurrentRow.set_CheckState(0)
            strTCRemarks = "Search result verification for keyword " & sFirstWord  & " is successful."
          Else 
            strTestCaseResult = "FAIL"
            strTCRemarks = "Search result verification for keyword " & sFirstWord  & " failed at row number - " & intJ
            Exit For         
          End IF
        Else ' multi word search.
          If Ubound(aArray1) = 1 then
            sFirstWord = aArray1(0)
            sSecondWord = aArray1(1)  
            IF aqstring.Find(strSearchResultText,sFirstWord,0,false) <> -1 OR aqstring.Find(strSearchResultText,sSecondWord,0,false) <> -1 Then 'if not found - fail search
              ObjTemp.CurrentRow.set_CheckState(0)
              strTCRemarks = "Search result verification for keywords '" & sFirstWord  & "' AND '" & sSecondWord & "' is successful."
            Else
              strTestCaseResult = "FAIL"
              strTCRemarks = "Search result verification for keywords '" & sFirstWord  & "' AND '" & sSecondWord & "' is failed at row number - " & intJ
              Exit For          
            End IF
          ElseIf Ubound(aArray1) = 2 then
              strTestCaseResult = "ABORT"
              strTCRemarks = "Search result verification for keyword having three strings is not handled."
              Exit For
      
          Else ' not handled
              strTestCaseResult = "ABORT"
              strTCRemarks = "Search result verification for keyword having multiple strings is not handled."
              Exit For
          End IF 
              
          
        End IF
      Next
    End if     
End if       
          
'-------------------------------------------------------------------
'-------------------------------------------------------------------

Else  ' Grid not found
  strTestCaseResult = "FAIL"
  strTCRemarks = "Search result grid not found."
End IF   
  
'  If stopic<>"" then 
'  IF aqstring.Find(objTemp.CurrentRow.Cells.Item(36).Text,stopic,0,false)<>-1  Then '36
'  strTCRemarks = "Search for '" & Search_String & "' in '" & DataBase & "' was successfully completed"
'  Call WriteLogFile (strTCRemarks) 
'  Else
'  strTestCaseResult = "FAIL"
'  strTCRemarks = "Search results verification failed"
'  End IF
'  elseif Search_String<>"" then 
'                                         
'  IF aqstring.Find(objTemp.CurrentRow.Cells.Item(36).Text,Search_String,0,false)<>-1 or aqstring.Find(objTemp.CurrentRow.Cells.Item(5).Text,Search_String,0,false)<>-1  Then '36
'  strTCRemarks = "Search for '" & Search_String & "' in '" & DataBase & "' was successfully completed"
'  Call WriteLogFile (strTCRemarks) 
'  strTestCaseResult = "PASS"
'  Else
'  strTestCaseResult = "FAIL"
'  strTCRemarks = "Search results verification failed"
'  End IF
'                                         
'        
'  Else
'  strTestCaseResult = "FAIL"
'  strTCRemarks = "Search results verification failed"
'  End IF  
'  End IF

If Err.Number > 0 Then
  strTestCaseResult = "FAIL"
  strTCRemarks = "Error in 'Verify_Search()' - " & Err.Description
  Err.Clear
End IF 

End Sub 

'***********  Search Result Verification  ***************
Sub Verify_Search_new(Keyword,sdata1,sdata2)
dim Provider,Search_String,IDSearch, ID_Tag, SelectAll,Database,Verifykey,SortBy
dim NoResult 
dim aArray1, aArray2, intI, intJ, intK 
dim blnGotResults, blnSort
dim StrDB,path
blnGotResults = False
IDSearch = "YES"
Provider = "CEIC"
Search_String = ""
ID_Tag = "ID"
SelectAll = "ALL"
DataBase = ""
Verifykey = "" 
SortBy = "" 
NoResult = "" 
Path=""              
'On Error Resume Next
aArray1 = split(sData1,Chr(10))
For intI = 0 to UBound(aArray1)
  If aArray1(intI) <> "" Then
    aArray2 = split(aArray1(intI),"=")  
    If ucase(trim(aArray2(0))) = "PROVIDER" Then
      Provider = trim(ucase(aArray2(1)))
    ElseIf ucase(trim(aArray2(0))) = "PATH" Then
      Path = trim(ucase(aArray2(1)))
    ElseIF ucase(trim(aArray2(0))) = "KEYWORD" Then 
      Search_String = trim(ucase(aArray2(1)))
    ElseIF ucase(trim(aArray2(0))) = "ID_TAG" Then
      ID_Tag = trim(ucase(aArray2(1)))
    ElseIF ucase(trim(aArray2(0))) = "SELECT" Then
      SelectAll = trim(ucase(aArray2(1)))
    ElseIF ucase(trim(aArray2(0))) = "IDSEARCH" Then
      IDSearch = trim(ucase(aArray2(1)))
    ElseIF ucase(trim(aArray2(0))) = "DATABASE" Then
      DataBase = trim(ucase(aArray2(1)))
    'Code written to include Verification key for the Search by TAG option  
    ElseIF ucase(trim(aArray2(0))) = "VERIFYKEY" Then
      Verifykey = trim(ucase(aArray2(1)))
    'Code written to include SortBy option
    ElseIF ucase(trim(aArray2(0))) = "SORTBY" Then
      SortBy = trim(aArray2(1))
      Log.Message ("Sortby - " & Sortby)       
    'Code written to include No result option
    ElseIF ucase(trim(aArray2(0))) = "NORESULT" Then
      NoResult = trim(aArray2(1))
      Log.Message ("No Result :" & aArray2(1))
    End IF
  End IF
Next

If NoResult <> "" Then
      Log.Message ("Inside No Result option " & NoResult) 
      'Checking for No results panel display
      delay(5000)
      Set objTemp = objCDM_MDI.WinFormsObject("MdiClient",""). _
                        WinFormsObject("SearchResults_Form")._
                        Waitchild("WinFormsObject(""Panel_NotResults"")",120000)
      If objTemp.Exists=True Then
          strTCRemarks = "No search results found page is displayed."
          Exit Sub   
      Else 
          strTestCaseResult="FAIL"          
          strTCRemarks = "No search results found page is not displayed."
          Exit Sub   
      End If 
End If     

Set objTemp = objCDM_MDI.WinFormsObject("MdiClient","").Waitchild("WinFormsObject(""SearchResults_Form"")",70000)._
                  Waitchild("WinFormsObject(""Panel_Results"")",60000).Waitchild("WinFormsObject(""GridEX_SearchResults"")",50000)

If Err.Number <> 0 Then
  strTCRemarks = "Error occured in getting Search results - " & Err.Description 
  strTestCaseResult="ABORT"
  Err.Clear
  Exit Sub 
End IF

If objTemp.Exists = True AND SortBy = "" Then
Log.Message ("Inside Sort by is empty ")         
  If IDSearch = "YES" Then
    If Verifykey = "" and ID_Tag = "ID" then 
      aarray1 = Split(Search_String,";")
    ElseIf Verifykey <> "" and ID_Tag ="TAG" then 
      aarray1 = Split(Verifykey,";")
    ElseIf Verifykey ="" and ID_TAG="TAG" then
      Log.Message ("Search Verification for TAG - " & Search_String & " failed. Verifykey was not found." )
      strTCRemarks = "Search Verification for TAG - " & Search_String & " failed. Verifykey was not found."
      strTestCaseResult = "FAIL"
      Exit Sub 
    End If
      
     DataBase=Split(DataBase,":")
     For intJ=0 to objTemp.RowCount-1  
         objTemp.row=intJ
         For intI=0 to UBound(DataBase)    
              If Ucase(objTemp.CurrentRow.Cells.Item(4).Text)=database(intI) then 
              End If
         Next  
     Next  
 Else
     IF objTemp.RowCount > 1 Then
      strTCRemarks = "Search for '" & Search_String & "' in '" & DataBase & "' was successfully completed"
      Log.Message (strTCRemarks) 
    Else
      strTestCaseResult = "FAIL"
      strTCRemarks = "Search results verification failed"
    End IF  
  End IF
ElseIf  SortBy = "" Then 
  'Checking for No results panel display
  Set objTemp = objCDM_MDI.WinFormsObject("MdiClient",""). _
                    WinFormsObject("SearchResults_Form")._
                    Waitchild("WinFormsObject(""Panel_NotResults"")",120000)
  If objTemp.Exists=True Then
      strTestCaseResult = "FAIL"
      strTCRemarks = "No search results found page is displayed."  
  End If 
End If 

If SortBy <> "" Then
if sortby="First Obs. Date" then
   sortby="Start Date"
end if  
    For intk = 0 to objTemp.CurrentTable.Columns.Count - 1   
     blnSort = False
     objTemp.col = intK
		 If objTemp.CurrentRow.Cells.Item(intK).Column.Caption = SortBy  Then	
			If objTemp.CurrentTable.Columns.Item(intK).IsSorted = True Then
         blnSort = True
			   Exit For	
			End If			
		 End If
	  Next  
  IF blnSort = True Then
    strTCRemarks = "Search results are sorted by '" & SortBy & "'"
  Else
    strTestCaseResult = "FAIL"
    strTCRemarks = "Search results are not sorted by '" & SortBy & "'" 
  End IF  
End If       
      if path="TRUE" then
          objTemp.CurrentRow.Cells.Item(intK).click
      end if
end sub 
'************************************************************************************************
'This Procedure checks the functions and function options selected in the Function Selector Form
'for a transformed series listed in My Series.

'Author:  Raghunandan
'Start Date: 25-04-2013 
'************************************************************************************************
Sub sVerify_Function_Selector(sData1)
	
	On Error Resume Next
	Dim sVerifyFunction, sParameters, sFunctionParam, sSeriesID, sSeriesSuffix
	Dim aArray, aArray1, aArray2, aArray3, aArray4
	Dim intSid, intSeriesName, intI, intJ, intK, intL, blnSidFound
	Dim oTemp, oTemp1, oTemp2, oTemp3, oTemp4, oTemp5
	
	sVerifyFunction = getSplitValue (UCase(Trim(sData1)),"VerifyFunction")
	sParameters = getSplitValue(UCase(Trim(sData1)),"Parameters")
	sSeriesID = getSplitValue(Trim(sData1),"SeriesID")
  sEdit = getSplitValue(Trim(sData1),"EditFunction")
	
	Set oTemp = objCDM_MDI.WinFormsObject("MdiClient", "").WinFormsObject("WorkspaceSeries_Form")._
	WinFormsObject("SplitContainer_Workspace").WinFormsObject("SplitterPanel", "",2)._
	WinFormsObject("GridEX_Series") 
	
	If oTemp.Exists = True Then
		' Search for the Series Id and Series Name Columns in the Table displayed Grid and get their index numbers
		oTemp.Row = 0
		For intI = 0 To oTemp.CurrentTable.Columns.Count-1
			If Trim(UCase(oTemp.CurrentRow.Cells.Item(intI).Column.Caption)) = "SERIES ID" Then
				intSid = intI
			End If 
			If Trim(UCase(oTemp.CurrentRow.Cells.Item(intI).Column.Caption)) = "SERIES NAME" Then
				intSeriesName = intI
			End If     
		Next
		'Unselect all the Rows present in the grid
		
		For intL = 0 To oTemp.RowCount-1
			oTemp.Row = intL  
			oTemp.CurrentRow.set_IsChecked(False)
		Next
		' Search the Grid for the row in which the given transformed Series, based on its Series ID 'AND' Series Suffix, is present and select it         
		sSeriesSuffix = ""
		aArray = Split(sSeriesID,":")
		strTemp = Trim(aArray(0))
		If UBound(aArray) > 0 Then  
			If aArray(1) <> "" Then
				sSeriesSuffix = Trim(aArray(1))
				Log.Message "Series Suffix = " & sSeriessuffix   
			End If 
		End If 
		blnSidFound = False                   
		If strTemp <> "" Then
			Log.Message "Looking for Series ID: " & strTemp 
			If sSeriesSuffix <> "" Then    
				For intJ = 0 To oTemp.RowCount-1
					oTemp.Row = intJ
					If oTemp.CurrentRow.Cells.Item(intSid).Text = strTemp And _
						aqString.Find(oTemp.CurrentRow.Cells.Item(intSeriesName).Text,sSeriesSuffix)<> -1 Then
						Log.Message("Transformed Series ID: " & oTemp.CurrentRow.Cells.Item(intSid).Text) & " found in row number " & intJ
						oTemp.CurrentRow.set_IsChecked(True)               
						blnSidFound = True
						Exit For 
					End If 
				Next   
			End If
		End If
		
		If blnSidFound = False Then
			strTCRemarks = " Transformed Series ID - " & sSeriesID & " not found in the Grid"
			Log.Message(strTCRemarks)
			strTestCaseResult = "FAIL"
			Exit Sub
		End If   
		'Invoke Function Selector Form through Short Cut key
		
		Sys.keys("^f")
		
		Set oTemp1 = Sys.Process("ISI.CeicDataManager.Startup").WaitChild("WinFormsObject(""NewFunctionSelector"")", 10000)
		
		' Check if the number of functions in the transformed series matches the number of functions listed in 
		' the Functions Summary List (Right Panel) 
		
		If oTemp1.Exists = True Then
			Set oTemp2 = oTemp1.WinFormsObject("TableLayoutPanel1").WinFormsObject("GridEX_Summary")
			aArray1 = Split(sSeriesSuffix,")")
			If UBound(aArray1) <> oTemp2.RecordCount Then
				strTCRemarks = "Function count mismatch in Function Selector"
				Log.Message (strTCRemarks)
				strTestCaseResult = "FAIL"
        oTemp1.Close
				Exit Sub   
			ElseIf UBound(aArray1)=oTemp2.RecordCount Then
				strTCRemarks = "Function count proper in Function Selector"
				Log.Message (strTCRemarks)
			End If
			
			'Select each item in the Summary List (Right Panel) and verify the contents of the resulting function and the 
			'options selected in it 
			
			aArray3 = Split(sVerifyFunction,";")
			
			For intK = 0 To UBound(aArray3) 
				oTemp2.Row = intK
				oTemp2.Col = 1
				oTemp2.CurrentRow.set_IsChecked(True)
				oTemp2.Click
				Delay 1500
				
        aArray = Split(Trim(UCase(sParameters)),"&")
        sFunctionParam = aArray(intK)
        
				Set oTemp3 = Sys.Process("ISI.CeicDataManager.Startup").WinFormsObject("NewFunctionSelector").WinFormsObject("TableLayoutPanel1").WinFormsObject("UiTab_Functions")
				
				If UCase(aArray3(intK)) = "FREQUENCYTRANSFORM" Then '******FREQUENCY TRANSFORM******
					Set oTemp3 = oTemp3.WinFormsObject("UiTabPage_FrequencyTransform").WinFormsObject("FrequencyTransform_Config")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub  
						End If                                
					ElseIf oTemp3.Exists = True Then 
						If oTemp3.Visible = True Then
							Call sVerify_Frequency_Transform(oTemp3,sFunctionParam)                                
						End If  
					End If                         
					
				ElseIf UCase(aArray3(intK)) = "ACCUMULATE" Then '******ACCUMULATE******
					Set oTemp3 = oTemp3.WinFormsObject("UiTabPage_Accumulate").WinFormsObject("Accumulate1")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If                              
					ElseIf oTemp3.Exists = True Then
						If oTemp3.Visible = True Then
							Call sVerify_Accumulate (oTemp3,sFunctionParam)                                
						End If 
					End If    
					
				ElseIf UCase(aArray3(intK)) = "MOVINGAVERAGE" Then '******MOVING AVERAGE****** 
					Set oTemp3 = oTemp3.WinFormsObject("UiTabPage_MovingAverage").WinFormsObject("MovingAverage__Config")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If                              
					ElseIf oTemp3.Exists = True Then
						If oTemp3.Visible = True Then
							Call sVerify_Moving_Average(oTemp3,sFunctionParam)                                                                
						End If
					End If                                                   
					
				ElseIf UCase(aArray3(intK)) = "SMOOTHING" Then '******SMOOTHING******
					Set oTemp3 = oTemp3.WinFormsObject("Smoothing").WinFormsObject("Smoothing1")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If                              
					ElseIf oTemp3.Exists = True Then 
						If oTemp3.Visible = True Then
							Call sVerify_Smoothing(oTemp3,sFunctionParam)                                
						End If                              
					End If                         
					
				ElseIf UCase(aArray3(intK)) = "MATHEMATICS" Then '******MATHEMATICS******
					Set oTemp3 = oTemp3.WinFormsObject("Mathematics").WinFormsObject("Mathematics1")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If                              
					ElseIf oTemp3.Exists = True Then
						If oTemp3.Visible = True Then
							Call sVerify_Mathematics(oTemp3,sFunctionParam)                                
						End If                                
					End If  
					
				ElseIf UCase(aArray3(intK)) = "ADJUSTMENT" Then '******ADJUSTMENT******
					Set oTemp3 = oTemp3.WinFormsObject("UiTabPage_Adjustment").WinFormsObject("Adjustment1")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If
					ElseIf oTemp3.Exists = True Then
						If oTemp3.Visible = True Then 
							Call sVerify_Adjustment(oTemp3,sFunctionParam)                              
						End If 
					End If
					
				ElseIf UCase(aArray3(intK)) = "SERIESOPERATION" Then '******SERIES OPERATIONS******
					Set oTemp3 = oTemp3.WinFormsObject("UiTabPage_SeriesOperation").WinFormsObject("SeriesOperation1")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If
					ElseIf oTemp3.Exists = True Then
						If oTemp3.Visible = True Then 
							Call sVerify_Series_Operations(oTemp3,sFunctionParam)                              
						End If 
					End If
					
				ElseIf UCase(aArray3(intK)) = "ARITHMETICOPERATIONS" Then '******ARITHMETIC OPERATIONS******
					Set oTemp3 = oTemp3.WinFormsObject("UiTabPage_ArithmeticOperations").WinFormsObject("ArithmeticOperations_Config")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If
					ElseIf oTemp3.Exists = True Then
						If oTemp3.Visible = True Then 
							Call sVerify_Arithmetic_Operations(oTemp3,sFunctionParam)                              
						End If 
					End If
					
				ElseIf UCase(aArray3(intK)) = "PERIODTODATE" Then '******PERIOD TO DATE******
					Set oTemp3 = oTemp3.WinFormsObject("UiTabPage_PeriodToDate").WinFormsObject("PeriodToDate_Config")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If
					ElseIf oTemp3.Exists = True Then
						If oTemp3.Visible = True Then 
							Call sVerify_Period_To_Date(oTemp3,sFunctionParam)                              
						End If 
					End If 
					
				ElseIf UCase(aArray3(intK)) = "SUMSELECTED" Then '******SUM SELECTED******
					Set oTemp3 = oTemp3.WinFormsObject("UiTabPage1").WinFormsObject("SumSelected1")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If
					ElseIf oTemp3.Exists = True Then
						If oTemp3.Visible = True Then 
							Call sVerify_Sum_Selected(oTemp3,sFunctionParam)                              
						End If 
					End If
					
				ElseIf UCase(aArray3(intK)) = "SEASONALADJUSTMENT" Then '******SEASONAL ADJUSTMENT AND FORECASTING******
					Set oTemp3 = oTemp3.WinFormsObject("SeasonalAdjustment").WinFormsObject("SeasonalAdjustment2")
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If
					ElseIf oTemp3.Exists = True Then
						If oTemp3.Visible = True Then 
							Call sVerify_Seasonal_Adjustment(oTemp3,sFunctionParam)                              
						End If 
					End If  
					
				ElseIf UCase(aArray3(intK)) = "CURRENCYCONVERSION" Then '****** CURRENCY CONVERSION ******
					Set oTemp3 = oTemp3.WinFormsObject("UiTabPage_CurrencyConversion").WinFormsObject("CurrencyConversion1") 
					If oTemp3.Exists = False Then
						If oTemp3.Visible = False Then
							strTCRemarks = "Function Mismatch"
							Log.Message (strTCRemarks)
							strTestCaseResult = "FAIL"
              oTemp1.Close
							Exit Sub
						End If
					ElseIf oTemp3.Exists = True Then
						If oTemp3.Visible = True Then 
							Call sVerify_Currency_Conversion(oTemp3,sFunctionParam)                              
						End If 
					End If
				End If                     
			Next                               
		End If
		oTemp1.Close 
	 
	If strTestCaseResult = "PASS" Then
    strTCRemarks = "All option/values in Function Selector proper"
    oTemp1.Close
  Else
    oTemp1.Close
  End If
End If
  
  If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Function_Selector()' - " & Err.Description)
		Err.Clear
	End If          
	
End Sub 

'****************************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN FREQUENCY TRANSFORM FUNCTION WITH INPUTS FROM RUN.XLS *
'Author:  Raghunandan                                                                                           *
'Start Date: 25-04-2013                                                                                         *
'****************************************************************************************************************
Sub sVerify_Frequency_Transform(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2
	Dim intI, intJ  
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			If (UCase(aArray2(0)) = "METHOD") And (UCase(aArray2(1)) = "AVG") Then '******FREQUENCY TRANSFORM - AVERAGE******                                             
				If oTemp1.WinFormsObject("UiGroupBox1").WinFormsObject("UiRadioButton_Avg").get_Checked = True Then
					strTCRemarks = "Average option in FT verified" 
				Else
					strTCRemarks = "Average option in FT Unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If
			ElseIf  (UCase(aArray2(0)) = "METHOD") And (UCase(aArray2(1)) = "SUM") Then '*****FREQUENCY TRANSFORM - SUM******                                             
				If oTemp1.WinFormsObject("UiGroupBox1").WinFormsObject("UiRadioButton_Sum").get_Checked = True Then
					strTCRemarks = "Sum option in FT verified" 
				Else
					strTCRemarks = "Sum option in FT Unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If      
			ElseIf  (UCase(aArray2(0)) = "METHOD") And (UCase(aArray2(1)) = "MIN") Then '*******FREQUENCY TRANSFORM - MIN******           
				If oTemp1.WinformsObject("UiGroupBox1").WinformsObject("UiRadioButton_Min").get_Checked = True Then
					strTCRemarks = "Min option in FT verified" 
				Else                           
					strTCRemarks = "Min option in FT Unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If
			ElseIf (UCase(aArray2(0)) = "METHOD") And (UCase(aArray2(1)) = "MAX") Then '******FREQUENCY TRANSFORM - MAX*******
				If oTemp1.WinformsObject("UiGroupBox1").WinformsObject("UiRadioButton_Max").get_Checked = True Then
					strTCRemarks = "Max option in FT verified"
				Else
					strTCRemarks = "Max option in FT Unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If  
			ElseIf (UCase(aArray2(0)) = "METHOD") And (UCase(aArray2(1)) = "FIRST") Then '***FREQUENCY TRANSFORM - FIRST******
				If oTemp1.WinformsObject("UiGroupBox1").WinformsObject("UiRadioButton_First").get_Checked = True Then
					strTCRemarks = "Method > First option in FT verified" 
				Else
					strTCRemarks = "Method > First option in FT Unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If            
			ElseIf (UCase(aArray2(0)) = "METHOD") And (UCase(aArray2(1)) = "LAST") Then '*****FREQUENCY TRANSFORM - LAST******
				If oTemp1.WinformsObject("UiGroupBox1").WinformsObject("UiRadioButton_Last").get_Checked = True Then
					strTCRemarks = "Method > Last option in FT verified"
				Else
					strTCRemarks = "Method > Last option in FT Unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"  
				End If
			ElseIf (UCase(aArray2(0)) = "METHOD") And (UCase(aArray2(1)) = "NTH") Then '******FREQUENCY TRANSFORM - NTH******
				If oTemp1.WinformsObject("UiGroupBox1").WinformsObject("UiRadioButton_Nth").get_Checked = True Then
					strTCRemarks = "Nth option in FT verified" 
				Else
					strTCRemarks = "Nth option in FT Unselected"                           
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If
			ElseIf (UCase(aArray2(0)) = "VALUE")  Then '******FREQUENCY TRANSFORM -NTH VALUE******
				If (oTemp1.WinformsObject("UiGroupBox1").WinFormsObject("IntegerUpDown_Nth")._
					WinFormsObject("NumericEdit", "").Enabled = True And _ 
					oTemp1.WinformsObject("UiGroupBox1").WinFormsObject("IntegerUpDown_Nth")._
					WinFormsObject("NumericEdit", "").Text = aArray2(1)) Then
					strTCRemarks = "Nth option value correct in FT" 
				Else
					strTCRemarks = "Nth option value in FT improper"                           
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If            
			ElseIf (UCase(aArray2(0)) = "FREQUENCY") Then '******FREQUENCY COMBO BOX SELECTION******
				Set oTemp2 = oTemp1.WinFormsObject("UiGroupBox2").WinFormsObject("UiComboBox_Frequency") 
				If oTemp2.SelectedItem.Text.ToUpper = aArray2(1) Then
					strTCRemarks = "Frequency selection correct in FT" 
				Else
					strTCRemarks = "Frequency selection in FT improper"                           
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub                       
				End If   
			ElseIf (UCase(aArray2(0)) = "PERIODEND") Then  '******PERIOD END SELECTION******
				Set oTemp2 = oTemp1.WinFormsObject("UiGroupBox_PeriodEnd").WinFormsObject("UiComboBox_PeriodEnd")  
				If oTemp2.SelectedItem.Text.ToUpper = aArray2(1) Then
					strTCRemarks = "Period End selection correct in FT" 
				Else
					strTCRemarks = "Period End selection in FT improper" 
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub                       
				End If  
				'******DISAGGREGATION - DISTRIBUTE******
			ElseIf  (UCase(aArray2(0)) = "DISAGGREGATION") And (UCase(aArray2(1)) = "DISTRIBUTE") Then 
				If oTemp1.WinFormsObject("UiGroupBox_Disaggregation").WinFormsObject("UiRadioButton_Distribute").get_Checked = True Then
					strTCRemarks = "Disaggregation > Distribute in FT verified" 
				Else
					strTCRemarks = "Disaggregation > Distribute in FT Unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If
				'******DISAGGREGATION - REPLICATE******
			ElseIf  (UCase(aArray2(0)) = "DISAGGREGATION") And (UCase(aArray2(1)) = "REPLICATE") Then
				If oTemp1.WinFormsObject("UiGroupBox_Disaggregation").WinFormsObject("UiRadioButton_Replicate").get_Checked = True Then
					strTCRemarks = "Disaggregation > Replicate in FT verified"
				Else
					strTCRemarks = "Disaggregation > Replicate in FT Unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If                          
			End If
		Next

	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Frequency_Transform()' - " & Err.Description)
		Err.Clear
	End If
End Sub

'*************************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN ACCUMULATE FUNCTION WITH INPUTS FROM RUN.XLS       
'Author:  Raghunandan
'Start Date: 25-04-2013
'*************************************************************************************************************
Sub sVerify_Accumulate(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2
	Dim intI, intJ  
	
	
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			If (aArray2(0) = "FUNCTION") And (aArray2(1) = "ACCUMULATE") Then '******ACCUMULATE OPTION******
				If oTemp1.WinFormsObject("UiRadioButton_Accumulate").get_Checked = True Then
					strTCRemarks = "'Accumulate' option in Accumulate verified"
				Else
					strTCRemarks = "'Accumulate' option in Accumulate unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If
			ElseIf (aArray2(0) = "FUNCTION") And (aArray2(1) = "ROLLINGSUM") Then '******ACCUMULATE - ROLLING SUM****** 
				If oTemp1.WinFormsObject("UiRadioButton_RollingSum").get_Checked = True Then
					strTCRemarks = "Rolling sum option in Accumulate verified"
				Else
					strTCRemarks = "Rolling sum option in Accumulate unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If
			ElseIf (aArray2(0) = "FUNCTION") And (aArray2(1) = "ROLLINGAVG") Then '******ACCUMULATE - ROLLING AVERAGE******
				If oTemp1.WinFormsObject("UiRadioButton_RollingAVG").get_Checked = True Then
					strTCRemarks = "Rolling Avg option in Accumulate verified"
				Else
					strTCRemarks = "Rolling Avg option in Accumulate unselected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If
			ElseIf (aArray2(0) = "PERIOD") Then '******ACCUMULATE - ROLLING AVERAGE PERIOD******
				Set oTemp2 = oTemp1.WinFormsObject("IntegerUpDown_period").WinFormsObject("NumericEdit", "")
				If oTemp2.Text = aArray2(1) Then
					strTCRemarks = "Rolling Avg value correct in Accumulate"
				Else
					strTCRemarks = "Rolling Avg value in Accumulate improper"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If  
			End If
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Accumulate()' - " & Err.Description)
		Err.Clear
	End If
End Sub

'*************************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN MOVING AVERAGE FUNCTION WITH INPUTS FROM RUN.XLS   
'Author:  Raghunandan
'Start Date: 25-04-2013
'*************************************************************************************************************
Sub sVerify_Moving_Average(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2
	Dim intI, intJ  
	
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			If (aArray2(0) = "MOVINGAVERAGE") Then
				Set oTemp2 = oTemp1.WinFormsObject("UiComboBox_MAvgType")
				If aArray2(1) = "EXPO" Then '******MOVING AVERAGE - EXPONENTIALLY WEIGHTED MOVING AVERAGE******
					If oTemp2.get_SelectedIndex = 0 Then
						strTCRemarks = "'Exponentially..' verified in Moving Average-Type"
					Else
						strTCRemarks = "'Exponentially..' in Moving Average-Type unselected"
						Log.Message(strTCRemarks)
						strTestCaseResult = "FAIL"
						Exit Sub    
					End If 
				ElseIf aArray2(1) = "GEO" Then '******GEOMETRIC MOVING AVERAGE******
					If oTemp2.get_SelectedIndex = 1 Then
						strTCRemarks = "'Geometric' verified in Moving Average-Type"
					Else
						strTCRemarks = "'Geometric' in Moving Average-Type unselected"
						Log.Message(strTCRemarks)
						strTestCaseResult = "FAIL"
						Exit Sub    
					End If 
				ElseIf aArray2(1) = "SIM" Then '******SIMPLE MOVING AVERAGE******
					If oTemp2.get_SelectedIndex = 2 Then
						strTCRemarks = "'Simple' verified in Moving Average-Type"
					Else
						strTCRemarks = "'Simple' in Moving Average-Type unselected"
						Log.Message(strTCRemarks)
						strTestCaseResult = "FAIL"
						Exit Sub    
					End If
				ElseIf aArray2(1) = "LINEAR" Then '******LINEARLY WEIGHTED MOVING AVERAGE******
					If oTemp2.get_SelectedIndex = 3 Then
						strTCRemarks = "'Linearly..' verified in Moving Average-Type"
					Else
						strTCRemarks = "'Linearly..' in Moving Average-Type unselected"
						Log.Message(strTCRemarks)
						strTestCaseResult = "FAIL"
						Exit Sub    
					End If
				ElseIf aArray2(1) = "CENTER" Then '******CENTERED MOVING AVERAGE******
					If oTemp2.get_SelectedIndex = 4 Then
						strTCRemarks = "'Centered' verified in Moving Average-Type"
					Else
						strTCRemarks = "'Centered' in Moving Average-Type unselected"
						Log.Message(strTCRemarks)
						strTestCaseResult = "FAIL"
						Exit Sub    
					End If
				End If 
			ElseIf (aArray2(0) = "PERIOD") Then '******PERIOD VALUE******
				If oTemp1.WinFormsObject("IntegerUpDown_Period")._
					WinFormsObject("NumericEdit", "").Text = aArray2(1)Then
					strTCRemarks = "Period value correct in Moving Average"
				Else
					strTCRemarks = "Period value in Moving Average improper"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If
			ElseIf (aArray2(0) = "SF") Then  '******SMOOTHING FACTOR VALUE******
				Set oTemp2 = oTemp1.WinFormsObject("IntegerUpDown__SmoothingFactor")._
				WinFormsObject("NumericEdit", "")
				If oTemp2.Text = aArray2(1) Then
					strTCRemarks = "Smoothing Factor value correct in Moving Average"
				Else
					strTCRemarks = "Smoothing Factor value in Moving Average improper"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If  
			End If
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Moving_Average()' - " & Err.Description)
		Err.Clear
	End If
End Sub

'*************************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN SMOOTHING FUNCTION WITH INPUTS FROM RUN.XLS        
'Author:  Raghunandan
'Start Date: 25-04-2013
'*************************************************************************************************************
Sub sVerify_Smoothing(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2
	Dim intI, intJ 
	
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			If (aArray2(0) = "HP") Then '******HODRICK - PRESCOTT (HP) FILTER SELECTION******
				If oTemp1.WinFormsObject("UiRadioButton_HodrickPrescott").get_Checked = True Then
					strTCRemarks = "HP option verified in Smoothing"
				Else
					strTCRemarks = "HP option unselected in Smoothing"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub    
				End If
				If (aArray2(1) = "SMOOTHED") Then '******HP SMOOTHED *******
					If oTemp1.WinFormsObject("UiGroupBox_HodrickPrescott")._
						WinFormsObject("UiCheckBox_Smoothed").get_Checked = True Then
						
						If  oTemp1.WinFormsObject("UiGroupBox_HodrickPrescott")._
							WinFormsObject("UiCheckBox_Smoothed").get_Enabled = True Then
							strTCRemarks = "HP-Smoothed verified in Smoothing"
						Else
							strTCRemarks = "HP-Smoothed unselected in Smoothing"
							Log.Message(strTCRemarks)
							strTestCaseResult = "FAIL"
							Exit Sub
						End If                   
					End If  
				ElseIf (Eval(aArray2(1) = "CYCLE"))  Then '******HP CYCLE ******* 
					If (oTemp1.WinFormsObject("UiGroupBox_HodrickPrescott")._
						WinFormsObject("UiCheckBox_Cycle").get_Checked = True And _
						oTemp1.WinFormsObject("UiGroupBox_HodrickPrescott")._ 
						WinFormsObject("UiCheckBox_Smoothed").get_Checked = False) Then
						strTCRemarks = "HP-Cycle verified in Smoothing"
					Else
						strTCRemarks = "HP-Cycle unselected in Smoothing"
						Log.Message(strTCRemarks)
						strTestCaseResult = "FAIL"                               
						Exit Sub
					End If       
				ElseIf (Eval(aArray2(1) = "BOTH")) Then '******HP - BOTH ******   
					If (oTemp1.WinFormsObject("UiGroupBox_HodrickPrescott")._
						WinFormsObject("UiCheckBox_Cycle").get_Checked = True And _
						oTemp1.WinFormsObject("UiGroupBox_HodrickPrescott")._ 
						WinFormsObject("UiCheckBox_Smoothed").get_Checked = True) Then
						strTCRemarks = "HP-Both options verified in Smoothing"
					Else
						strTCRemarks = "HP-Both options unselected in Smoothing"
						Log.Message(strTCRemarks)
						strTestCaseResult = "FAIL"
						Exit Sub
					End If                                                    
				End If
			ElseIf (aArray2(0) = "TYPE") And (aArray2(1) = "SIMPLE") Then '******TYPE - SIMPLE ******
				If oTemp1.WinFormsObject("UiGroupBox_Method").WinFormsObject("UiGroupBox_Type")._
					WinFormsObject("UiRadioButton_Simple").get_Checked = True Then
					strTCRemarks = "Type-Simple option verified in Smoothing"
				Else
					strTCRemarks = "Type-Simple option unselected in Smoothing"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub                                                                  
				End If                    
			ElseIf (aArray2(0) = "TYPE") And (aArray2(1) = "EXPONENTIAL") Then '******TYPE - EXPONENTIAL ******
				If oTemp1.WinFormsObject("UiGroupBox_Method").WinFormsObject("UiGroupBox_Type")._
					WinFormsObject("UiRadioButton_Exponential").get_Checked = True Then
					strTCRemarks = "Type-Exponential option verified in Smoothing"
				Else
					strTCRemarks = "Type-Exponential option unselected in Smoothing"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub                                         
				End If 
			ElseIf (aArray2(0) = "SMOOTHING") And (aArray2(1) = "SINGLE") Then '******SMOOTHING - SINGLE ******
				If oTemp1.WinFormsObject("UiGroupBox_Method").WinFormsObject("UiGroupBox_Smoothing")._
					WinFormsObject("UiRadioButton_Single").get_Checked = True Then
					strTCRemarks = "'Single' option verified in Smoothing"
				Else
					strTCRemarks = "'Single' option unselected in Smoothing"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                                      
				End If
			ElseIf (aArray2(0) = "SMOOTHING") And (aArray2(1) = "DOUBLE") Then '******SMOOTHING - DOUBLE ****** 
				If oTemp1.WinFormsObject("UiGroupBox_Method").WinFormsObject("UiGroupBox_Smoothing")._
					WinFormsObject("UiRadioButton_Double").get_Checked = True Then
					strTCRemarks = "'Double' option verified in Smoothing"
				Else
					strTCRemarks = "'Double' option unselected in Smoothing"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                                         
				End If
      ElseIf (aArray2(0) = "SMOOTHFACTOR") Then '******SMOOTHING FACTOR VALUE****** 
				If oTemp1.WinFormsObject("UiGroupBox_Method"). _
          WinFormsObject("NumericEditBox_SmoothFactor").Text = aArray2(1) Then
					strTCRemarks = "Smoothing Factor Value proper Smoothing"
				Else
					strTCRemarks = "Smoothing Factor Value improper Smoothing"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                                         
				End If              
			End If             
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Smoothing()' - " & Err.Description)
		Err.Clear
	End If
End Sub

'*************************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN MATHEMATICS FUNCTION WITH INPUTS FROM RUN.XLS      
'Author:  Raghunandan
'Start Date: 25-04-2013
'*************************************************************************************************************
Sub sVerify_Mathematics(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2
	Dim intI, intJ 
	
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			If (aArray2(0) = "OPTION") And (aArray2(1) = "NATURALLOG") Then '******MATHEMATICS - NATUARAL LOG *******
				If oTemp1.WinFormsObject("UiRadioButton_NaturalLog").get_Checked = True Then
					strTCRemarks = "Natural Log option verified in Mathematics"
				Else
					strTCRemarks = "Natural Log option unselected in Mathematics"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                      
				End If                      
			ElseIf (aArray2(0) = "OPTION") And (aArray2(1) = "ANTILOG") Then '******MATHEMATICS - ANTILOG *******
				If oTemp1.WinFormsObject("UiRadioButton_Antilog").get_Checked = True Then
					strTCRemarks = "Antilog option verified in Mathematics"
				Else
					strTCRemarks = "Antilog option unselected in Mathematics"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                      
				End If 
			ElseIf (aArray2(0) = "OPTION") And (aArray2(1) = "EXPONENTIAL") Then '******MATHEMATICS - EXPONENTIAL *******
				If oTemp1.WinFormsObject("UiRadioButton_Exponential").get_Checked = True Then
					strTCRemarks = "Exponential option verified in Mathematics"
				Else
					strTCRemarks = "Exponential option unselected in Mathematics"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                      
				End If
			ElseIf (aArray2(0) = "OPTION") And (aArray2(1) = "SQUAREROOT") Then '******MATHEMATAICS - SQUARE ROOT *******
				If oTemp1.WinFormsObject("UiRadioButton_SquareRoot").get_Checked = True Then
					strTCRemarks = "SQ Root option verified in Mathematics"
				Else
					strTCRemarks = "SQ Root option unselected in Mathematics"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                      
				End If
			ElseIf (aArray2(0) = "OPTION") And (aArray2(1) = "BASE10") Then '******MATHEMATICS - BASE10 *******
				If oTemp1.WinFormsObject("UiRadioButton_Base").get_Checked = True Then
					strTCRemarks = "Base10 option verified in Mathematics"
				Else
					strTCRemarks = "Base10 option unselected in Mathematics"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                      
				End If
			ElseIf (aArray2(0) = "OPTION") And (aArray2(1) = "RECIPROCAL") Then '******MATHEMATICS - RECIPROCAL *******
				If oTemp1.WinFormsObject("UiRadioButton_Reciprocal").get_Checked = True Then
					strTCRemarks = "Reciprocal option verified in Mathematics"
				Else
					strTCRemarks = "Reciprocal option unselected in Mathematics"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                      
				End If
			ElseIf (aArray2(0) = "OPTION") And (aArray2(1) = "POWER") Then'******MATHEMATICS POWER OPTION *******
				If oTemp1.WinFormsObject("UiRadioButton_Power").get_Checked = True Then
					strTCRemarks = "Power option verified in Mathematics"
				Else
					strTCRemarks = "Power option unselected in Mathematics"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                      
				End If
			ElseIf (aArray2(0) = "VALUE")  Then '******MATHEMATICS  - POWER VALUE *******
				If (oTemp1WinFormsObject("NumericEditBox_Power").get_Enabled = True And _ 
					oTemp1WinFormsObject("NumericEditBox_Power").Text = aArray2(1)) Then
					strTCRemarks = "Power-value correct in Mathematics"
				Else
					strTCRemarks = "Power-value in Mathematics improper"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub                      
				End If
			End If
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Mathematics()' - " & Err.Description)
		Err.Clear
	End If
End Sub

'*******************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN ADJUSTMENT FUNCTION WITH INPUTS FROM RUN.XLS 
'Author:  Raghunandan
'Start Date: 25-04-2013
'*******************************************************************************************************
Sub sVerify_Adjustment(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2, strSeriesSuffix
	Dim intI, intJ 
	
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			If aArray2(0) =  "SERIESTOOPERATE" Then 
				strSeriesSuffix = aArray2(1)
			End If
			If (aArray2(0) = "FILL GAPS") And (aArray2(1) = "PREVIOUS") Then '******FILL GAPS - PREVIOUS *******
				If (oTemp1.WinFormsObject("UiRadioButton_FillGaps").get_Checked = True And _
					oTemp1.WinFormsObject("UiGroupBox_FillGaps").WinFormsObject("UiRadioButton_Previous").get_Checked = True) Then                       
					strTCRemarks = "Fill Gaps-Previous verified in Adjustment"
				Else
					strTCRemarks = "Fill Gaps-Previous unselected in Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (aArray2(0) = "FILL GAPS") And (aArray2(1) = "NEXT") Then '******FILL GAPS - NEXT *******
				If (oTemp1.WinFormsObject("UiRadioButton_FillGaps").get_Checked = True And _
					oTemp1.WinFormsObject("UiGroupBox_FillGaps").WinFormsObject("UiRadioButton_Next").get_Checked = True) Then                       
					strTCRemarks = "Fill Gaps-Next verified in Adjustment"
				Else
					strTCRemarks = "Fill Gaps-Next unselected in Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (aArray2(0) = "FILL GAPS") And (aArray2(1) = "LINEAR") Then '******FILL GAPS - LINEAR *******
				If (oTemp1.WinFormsObject("UiRadioButton_FillGaps").get_Checked = True And _
					oTemp1.WinFormsObject("UiGroupBox_FillGaps").WinFormsObject("UiRadioButton_Linear").get_Checked = True) Then                       
					strTCRemarks = "Fill Gaps-Lin-Interpol verified in Adjustment"
				Else
					strTCRemarks = "Fill Gaps-Lin-Interpol unselected in Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (aArray2(0) = "FILL GAPS") And (aArray2(1) = "EXPO") Then '******FILL GAPS - EXPONENTIAL *******
				If (oTemp1.WinFormsObject("UiRadioButton_FillGaps").get_Checked = True And _
					oTemp1.WinFormsObject("UiGroupBox_FillGaps").WinFormsObject("UiRadioButton_Exponential").get_Checked = True) Then                       
					strTCRemarks = "Fill Gaps-Expo-Interpol verified in Adjustment"
				Else
					strTCRemarks = "Fill Gaps-Expo-Interpol unselected in Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (aArray2(0) = "FILL GAPS") And (aArray2(1) = "CUBIC SPLINE") Then '******FILL GAPS -CUBIC SPLINE *******
				If (oTemp1.WinFormsObject("UiRadioButton_FillGaps").get_Checked = True And _
					oTemp1.WinFormsObject("UiGroupBox_FillGaps").WinFormsObject("UiRadioButton_CubicSpline").get_Checked = True) Then                       
					strTCRemarks = "Fill Gaps-Cubic Spline verified in Adjustment"
				Else
					strTCRemarks = "Fill Gaps-Cubic Spline unselected in Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (aArray2(0) = "VALUE") Then '******FILL GAPS - VALUE *******
				If (oTemp1.WinFormsObject("UiGroupBox_FillGaps")._
					WinFormsObject("UiRadioButton_Value").get_Checked = True And _
					oTemp1.WinFormsObject("UiGroupBox_FillGaps"). _
					WinFormsObject("NumericEditBox_FillGapsValue").get_Enabled = True And _
					oTemp1.WinFormsObject("UiGroupBox_FillGaps"). _
					WinFormsObject("NumericEditBox_FillGapsValue").Text = aArray2(1)) Then
					
					strTCRemarks = "Fill Gaps-Value correct in Adjustment"
				Else
					strTCRemarks = "Fill Gaps-Value in Adjustment improper"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (aArray2(0) = "VALUE TO REPLACE") Then '******VALUE TO REPLACE *******
				If (oTemp1.WinFormsObject("UiRadioButton_ReplaseObservation").get_Checked = True And _
					oTemp1.WinFormsObject("UiGroupBox_ReplaseObservation"). _
					WinFormsObject("NumericEditBox_ValueToReplace").get_Enabled = True And _
					oTemp1.WinFormsObject("UiGroupBox_FillGaps"). _
					WinFormsObject("NumericEditBox_ValueToReplace").Text = aArray2(1)) Then
					
					strTCRemarks = "Value to replace correct in Adjustment"
				Else
					strTCRemarks = "Value to replace in Adjustment improper"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
				
			ElseIf (aArray2(0) = "REPLACEMENT") Then '******REPLACEMENT *******
				If (oTemp1.WinFormsObject("UiRadioButton_ReplaseObservation").get_Checked = True And _
					oTemp1.WinFormsObject("UiGroupBox_ReplaseObservation"). _
					WinFormsObject("NumericEditBox_Replacement").get_Enabled = True And _
					oTemp1.WinFormsObject("UiGroupBox_ReplaseObservation"). _
					WinFormsObject("NumericEditBox_Replacement").Text = aArray2(1)) Then
					strTCRemarks = "Replacement value correct in Adjustment"
				Else
					strTCRemarks = "Replacement value in Adjustment improper"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"  
					Exit Sub
				End If 
			ElseIf (aArray2(0) = "ADJUSTMENT") And (aArray2(1) = "UPDATEXWITHY") Then '******UPDATE X WITH Y *******
				If oTemp1.WinFormsObject("UiGroupBox_AdjFunctions"). _
					WinFormsObject("UiRadioButton_Update").get_Checked = True Then
					strTCRemarks = "Update X with Y selected in Adjustment"
				Else
					strTCRemarks = "Update X with Y unselected in Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (aArray2(0) = "ADJUSTMENT") And (aArray2(1) = "SPLICEXONTOY") Then '******SPLICE X ONTO Y*******
				If oTemp1.WinFormsObject("UiGroupBox_AdjFunctions"). _
					WinFormsObject("UiRadioButton_Splice").get_Checked = True Then
					strTCRemarks = "Splice X onto Y selected in Adjustment"
				Else
					strTCRemarks = "Splice X onto Y unselected in Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (aArray2(0) = "SERIESTOOPERATE") Then '******ADJUSTMENT - Y SERIES *******
				Set oTemp2 = oTemp1.WinFormsObject("UiGroupBox_AdjFunctions").WinFormsObject("UiComboBox_SeriesToOperate")
				If oTemp2.SelectedItem.Value.SeriesId = strSeriesSuffix Then
					strTCRemarks = "Y-Series correct in Adjustment"
				Else
					strTCRemarks = "Y-Series improper in Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			End If
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Adjustment()' - " & Err.Description)
		Err.Clear
	End If
End Sub

'****************************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN SERIES OPERATIONS FUNCTION WITH INPUTS FROM RUN.XLS  
'Author:  Raghunandan
'Start Date: 25-04-2013
'****************************************************************************************************************
Sub sVerify_Series_Operations(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2, strSeriesSuffix
	Dim intI, intJ 
	
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			If (UCase(aArray2(0)) = "SERIESTOOPERATE") Then
				strSeriesSuffix = aArray2(1)
			End If            
			If (UCase(aArray2(0)) = "SERIESTOOPERATE") Then '****** SERIES OPERATION - SERIES TO OPEATE *******
				Set oTemp2 = oTemp1.WinFormsObject("UiComboBox_Series")
				If oTemp2.SelectedItem.Value.SeriesId =strSeriesSuffix Then
					strTCRemarks = "Y-Series correct in Series Operations"
				Else
					strTCRemarks = "Y-Series improper in Series Operations"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (UCase(aArray2(0)) = "OPERATION") And (UCase(aArray2(1)) = "ADD") Then'******SERIES OP ADD *******
				If oTemp1.WinFormsObject("UiGroupBox1"). _
					WinFormsObject("UiRadioButton_Add").get_Checked = True Then
					strTCRemarks = "Add option verified in Series Operations"
				Else
					strTCRemarks = "Add option unselected in Series Operations"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (UCase(aArray2(0)) = "OPERATION") And (UCase(aArray2(1)) = "MULTIPLY") Then '******SERIES OP MULTIPLY *******
				If oTemp1.WinFormsObject("UiGroupBox1"). _
					WinFormsObject("UiRadioButton_Multiply").get_Checked = True Then
					strTCRemarks = "Multiply option verified in Series Operations"
				Else
					strTCRemarks = "Multiply option unselected in Series Operations"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (UCase(aArray2(0)) = "OPERATION") And (UCase(aArray2(1)) = "DIVIDE") Then'******SERIES OP DIVIDE *******
				If oTemp1.WinFormsObject("UiGroupBox1"). _
					WinFormsObject("UiRadioButton_Divide").get_Checked = True Then
					strTCRemarks = "Divide option verified in Series Operations"
				Else
					strTCRemarks = "Divide option unselected in Series Operations"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (UCase(aArray2(0)) = "OPERATION") And (UCase(aArray2(1)) = "SUBTRACT") Then '******SERIES OP SUBTRACT *******
				If oTemp1.WinFormsObject("UiGroupBox1"). _
					WinFormsObject("UiRadioButton_Subtract").get_Checked = True Then
					strTCRemarks = "Subtract option verified in Series Operations"
				Else
					strTCRemarks = "Subtract option unselected in Series Operations"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			End If
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Series_Operations()' - " & Err.Description)
		Err.Clear
	End If
End Sub

'******************************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN ARITHMETIC OPERATIONS FUNCTION WITH INPUTS FROM RUN.XLS 
'Author:  Raghunandan
'Start Date: 25-04-2013
'******************************************************************************************************************
Sub sVerify_Arithmetic_Operations(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2
	Dim intI, intJ 
	
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			If (aArray2(0) = "ARITHMETIC") And (aArray2(1) = "ADD") Then '******ARITHMETIC ADD *******
				If oTemp1.WinFormsObject("UiGroupBox1"). _
					WinFormsObject("UiRadioButton_Add").get_Checked = True Then
					strTCRemarks = "Add option verified Arithmetic Ops"
				Else
					strTCRemarks = "Add option unselected in Arithmetic Ops"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL" 
					Exit Sub
				End If
			ElseIf (aArray2(0) = "ARITHMETIC") And (aArray2(1) = "SUBTRACT") Then '******ARITHMETIC SUBTRACT *******
				If oTemp1.WinFormsObject("UiGroupBox1"). _
					WinFormsObject("UiRadioButton_Subtract").get_Checked = True Then
					strTCRemarks = "Subtract option verified Arithmetic Ops"
				Else
					strTCRemarks = "Subtract option unselected in Arithmetic Ops"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If
			ElseIf (aArray2(0) = "ARITHMETIC") And (aArray2(1) = "MULTIPLY") Then'******ARITHMETIC MULTIPLY *******
				If oTemp1.WinFormsObject("UiGroupBox1"). _
					WinFormsObject("UiRadioButton_Multiply").get_Checked = True Then
					strTCRemarks = "Multiply option verified Arithmetic Ops"
				Else
					strTCRemarks = "Multiply option unselected in Arithmetic Ops"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If
			ElseIf (aArray2(0) = "ARITHMETIC") And (aArray2(1) = "DIVIDE") Then'******ARITHMETIC DIVIDE *******
				If oTemp1.WinFormsObject("UiGroupBox1"). _
					WinFormsObject("UiRadioButton_Divide").get_Checked = True Then
					strTCRemarks = "Divide option verified Arithmetic Ops"
				Else
					strTCRemarks = "Divide option unselected in Arithmetic Ops"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If
			ElseIf (aArray2(0) = "VALUE") Then '******CONSTANT K VALUE *******
				If oTemp1.WinFormsObject("NumericEditBox_ConstantK").Text = aArray2(1)  Then
					strTCRemarks = "Constant k value correct Arithmetic Ops"
				Else
					strTCRemarks = "Constant k value improper in Arithmetic Ops"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If
			End If            
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Arithmetic_Operations()' - " & Err.Description)
		Err.Clear
	End If        
End Sub

'***********************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN PERIOD TO DATE FUNCTION WITH INPUTS FROM RUN.XLS 
'Author:  Raghunandan
'Start Date: 25-04-2013
'***********************************************************************************************************
Sub sVerify_Period_To_Date(oTemp1,sParameters)
	Dim oTemp2, oTemp3, aArray, aArray1, aArray2
	Dim intI, intJ 
	
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			If (UCase(aArray2(0)) = "PERIOD") Then '******PERIOD *******
				Set oTemp2 = oTemp1.WinFormsObject("UiComboBox_Period")
				If oTemp2.SelectedItem.Text.ToUpper = aArray2(1) Then
					strTCRemarks = "Period selection verified in Period To Date"
				Else
					strTCRemarks = "Period selection improper in Period to Date"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub 
				End If 
			ElseIf (UCase(aArray2(0)) = "PERIODEND") Then '******PERIOD END *******
				Set oTemp3 = oTemp1.WinFormsObject("UiComboBox_PeriosEnd")
				If oTemp3.SelectedItem.Text.ToUpper = aArray2(1) Then
					strTCRemarks = "Period End selection verified in Period to date"
				Else
					strTCRemarks = "Period End selection improper in Period to date"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub 
				End If 
			ElseIf (UCase(aArray2(0)) = "OPTION") And (UCase(aArray2(1)) = "SUM") Then '******SUM *******
				If oTemp1.WinFormsObject("UiRadioButton_Sum").get_Checked = True Then
					strTCRemarks = "Sum option verified in Period to date"
				Else
					strTCRemarks = "Sum option unselected in Period to date"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub 
				End If 
			ElseIf (UCase(aArray2(0)) = "OPTION") And (UCase(aArray2(1)) = "DIFF") Then '******DIFFERENCE ******
				If oTemp1.WinFormsObject("UiRadioButton_Difference").get_Checked = True Then
					strTCRemarks = "Difference option verified in Period to date"
				Else
					strTCRemarks = "Difference option unselected in Period to date"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub 
				End If 
			End If        
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Period_To_Date()' - " & Err.Description)
		Err.Clear
	End If        
End Sub

'*********************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN SUM SELECTED FUNCTION WITH INPUTS FROM RUN.XLS 
'Author:  Raghunandan
'Start Date: 25-04-2013
'*********************************************************************************************************
Sub sVerify_Sum_Selected(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2
	Dim intI, intJ 
	
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			If (UCase(aArray2(0)) = "EXTEND") And (UCase(aArray2(1)) = "YES") Then'******EXTEND - YES ******
				If oTemp1.WinFormsObject("UiCheckBox_ExtendSeries").get_Checked = True Then
					strTCRemarks = "'Extend..' option verified Sum Selected"
				Else
					strTCRemarks = "'Extend..' option unselected in Sum Selected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub          
				End If
			ElseIf (UCase(aArray2(0)) = "EXTEND") And (UCase(aArray2(1)) = "NO") Then '******EXTEND - NO ******
				If oTemp1.WinFormsObject("UiCheckBox_ExtendSeries").get_Checked = True Then
					strTCRemarks = "'Extend..' option wrongly selected in Sum Selected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub                                                         
				Else
					strTCRemarks = "Extend option unselection verified Sum Selected"                                  
				End If
			ElseIf (UCase(aArray2(0)) = "IGNOREMISSING") And (UCase(aArray2(1)) = "YES") Then'******IGNORE MISSING -YES******
				If oTemp1.WinFormsObject("UiCheckBox_IgnoreMissingObs").get_Checked = True Then
					strTCRemarks = "'Ignore missing..' option verified Sum Selected"
				Else
					strTCRemarks = "'Ignore missing..' option unselected in Sum Selected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub 
				End If
			ElseIf (UCase(aArray2(0)) = "IGNOREMISSING") And (UCase(aArray2(1)) = "NO") Then '******IGNORE MISSING-N0 ******
				If oTemp1.WinFormsObject("UiCheckBox_IgnoreMissingObs").get_Checked = True Then
					strTCRemarks = "'Ignore missing..' option wrongly selected in Sum Selected"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub                                                         
				Else
					strTCRemarks = "'Ignore missing..' option unselection verified Sum Selected"
				End If
			End If
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Sum_Selected()' - " & Err.Description)
		Err.Clear
	End If 
End Sub

'****************************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN SEASONAL ADJUSTMENT FUNCTION WITH INPUTS FROM RUN.XLS 
'Author:  Raghunandan
'Start Date: 25-04-2013
'****************************************************************************************************************
Sub sVerify_Seasonal_Adjustment(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2
	Dim intI, intJ 
	
		aArray1 = Split(Trim(sParameters),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)
			Set oTemp2 = oTemp1.WinFormsObject("TabControl_SA").WinFormsObject("TabPage_TramoSeats177"). _
			WinFormsObject("UiGroupBox_Operations")
			If (UCase(aArray2(0)) = "SEASONALADJUST") And (UCase(aArray2(1)) = "YES") Then
				If oTemp2.WinFormsObject("UiCheckBox_Seasonally").get_Checked = True then'**SEASONALY ADJUSTED -YES ******
					strTCRemarks = "SA option verified in Seasonal Adjustment"
				Else
					strTCRemarks = "SA option unselected in Seasonal Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If
			ElseIf (UCase(aArray2(0)) = "SEASONALADJUST") And (UCase(aArray2(1)) = "NO") Then '***SEASONALLY ADJUSTED -NO******
				If oTemp2.WinFormsObject("UiCheckBox_Seasonally").get_Checked = True Then
					strTCRemarks = "'SA option wrongly selected in Seasonal Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub                                                         
				Else
					strTCRemarks = "SA option unslection verified in Seasonal Adjustment"                                  
				End If 
			ElseIf (UCase(aArray2(0)) = "TREND") And (UCase(aArray2(1)) = "YES") Then '****** TREND - YES ******
				If oTemp2.WinFormsObject("UiCheckBox_Trend").get_Checked = True Then
					strTCRemarks = "Trend option verified in Seasonal Adjustment"
				Else
					strTCRemarks = "Trend option unselected in Seasonal Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If
			ElseIf (UCase(aArray2(0)) = "TREND") And (UCase(aArray2(1)) = "NO") Then'****** TREND - NO ******
				If oTemp2.WinFormsObject("UiCheckBox_Trend").get_Checked = True Then
					strTCRemarks = "Trend option wrongly selected in Seasonal Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub                                                         
				Else
					strTCRemarks = "Trend option unslection verified in Seasonal Adjustment"                                  
				End If
			ElseIf (UCase(aArray2(0)) = "FORECAST") And (UCase(aArray2(1)) = "YES") Then '****** FORECAST - YES ******
				If oTemp2.WinFormsObject("UiCheckBox_Forecast").get_Checked = True Then
					strTCRemarks = "Forecast option verified in Seasonal Adjustment"
				Else
					strTCRemarks = "Forecasts option unselected in Seasonal Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If
			ElseIf (UCase(aArray2(0)) = "FORECAST") And (UCase(aArray2(1)) = "NO") Then '****** FORECAST - NO ******
				If oTemp2.WinFormsObject("UiCheckBox_Forecast").get_Checked = True Then
					strTCRemarks = "Forecast option wrongly selected in Seasonal Adjustment"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub                                                         
				Else
					strTCRemarks = "Forecast option unslection verified in Seasonal Adjustment"                            
				End If            
			End If
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Seasonal_Adjustment()' - " & Err.Description)
		Err.Clear
	End If 
End Sub

'****************************************************************************************************************
'THIS PROCEDURE VALIDATES THE VARIOUS OPTIONS SELECTED IN CURRENCY CONVERSION FUNCTION WITH INPUTS FROM RUN.XLS 
'Author:  Raghunandan
'Start Date: 25-04-2013
'****************************************************************************************************************
Sub sVerify_Currency_Convervsion(oTemp1,sParameters)
	Dim oTemp2, aArray, aArray1, aArray2
	Dim intI, intJ
	
		aArray1 = Split(Trim(aArray(intI)),";")
		For intJ = 0 To UBound(aArray1)
			aArray2 = Split(Trim(aArray1(intJ)),":",2)                  
			If (aArray2(0) = "TARGETCURRENCY") Then '******TARGET CURRENCY ******
				Set oTemp2 = oTemp1.WinFormsObject("UiComboBox_Target")
				If oTemp2.SelectedItem.Text.ToUpper = aArray2(1) Then
					strTCRemarks = "Target Currency selection verified in CC"
				Else
					strTCRemarks = "Target Currency selection wrong in CC"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If
			ElseIf (aArray2(0) = "UNITOFACCOUNT") Then '******UNIT OF ACCOUNT ******
				Set oTemp2 =  oTemp1.WinFormsObject("UiComboBox_Unit")          
				If oTemp2.SelectedItem.Text.ToUpper = aArray2(1) Then
					strTCRemarks = "Unit of Acc selection verified in CC"
				Else
					strTCRemarks = "Unit of Acc selection wrong in CC"
					Log.Message(strTCRemarks)
					strTestCaseResult = "FAIL"
					Exit Sub
				End If               
			End If
		Next
	
	If Err.Number <> 0 Then
		Log.Warning("Error in 'sVerify_Currency_Convervsion()' - " & Err.Description)
		Err.Clear
	End If 
End Sub

' Check Webservice
Sub Check_WS()
 
dim otemp

Err.clear
On Error Resume Next
 set otemp=Sys.Process("ISI.CeicDataManager.Startup").waitchild("WinFormsObject(""Login_Dialog"")",1000)
  if otemp.Exists=true then
      
       otemp.Close
    
    end if
    'To Check Workspace
   
   if fCDM_MDI_Loaded=true then
   
   objCDM_MDI.Activate
  
   end if
   objCDM_MDI.Keys("~nu")   
   set otemp= Sys.Process("ISI.CeicDataManager.Startup").waitchild("WinFormsObject(""ConnectionSetup_Form"")",2000) 
      if otemp.exists=true then
         delay(50) 
         sWS=otemp.WinFormsObject("UserProxySettings1").WinFormsObject("ComboBox_WebServiceURL").WinFormsObject("TextBox", "").wText
         delay(50)
         if sWS="" then
         sWS=otemp.WinFormsObject("UserProxySettings1").WinFormsObject("ComboBox_WebServiceURL").WinFormsObject("TextBox", "").wText
         end if
            
         otemp.WinFormsObject("Panel1").WinFormsObject("Button_Cancel").click
        
       end if

end sub


Sub sInsertSeries_MySeries(sData1)
	
	On Error Resume Next
	Log.Message("Inside sInsertSeries_MySeries()")
	
	Dim sTreeFlag, intCount, oTemp, oTemp1, odbTree, intRowIndex, intSelCount, intI
	Dim sDataBase, blnItemFound
	sDataBase = getSplitValue(sData1,"Database")
	intCount = CInt(getSplitValue(sData1,"Count")-1)
	sTreeFlag = "MySeries"
	intSelCount = 0
	blnItemFound = False
	
	'Invoke Insert Series Form Through Short Cut
	Sys.Keys("~e")
	Set oTemp = Sys.Process("ISI.CeicDataManager.Startup").WaitChild("WinFormsObject(""InsertSeriestoDownload_Form"")",6000)
	If oTemp.Exists = True Then
		oTemp.WinFormsObject("UiTabSearchDownload").TabPages.Item(1).set_Selected(True)
		Set oTemp1=otemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1")._
		WinFormsObject("SearchSeriestoDownload").WinFormsObject("UiGroupBox1").WinFormsObject("UiGroupBox2")._
		WinFormsObject("UiComboBox_Databases")
		If otemp1.exists=True Then
			For intI = 0 To oTemp1.Items.get_Count-1
				If otemp1.Items.Item(intI).Text.ToString = sDataBase Then
					otemp1.set_SelectedIndex(intI) 'Select Database in ComboBox
					blnItemFound = True
					Delay(3000)
					Exit For                               
				End If
			Next
		End If          
		If blnItemFound = True Then
			Log.Message("Database Found")
		Else
			strTCRemarks = "Database Not Found"
			Log.Message(strTCRemarks) 
			oTemp.Close          
			Exit Sub
		End If        		 
		
		Set odbTree = oTemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1")._
		WinFormsObject("SearchSeriestoDownload").WinFormsObject("UiGroupBox1")._
		WinFormsObject("GridEX_Tree")
		
		If odbTree.Exists = True Then
			If odbTree.Visible = True Then
				Call sExpandDBTree(sData1, sTreeFlag)   'Expand Database
				intRowIndex = odbTree.Row
				For intI = intRowIndex To intRowIndex+intCount
					odbTree.set_Row(intI) 
					odbTree.CurrentRow.set_IsChecked(True) 'Select Series
					intSelCount = intSelCount+1         
				Next
				If intCount = intSelcount Then   'Verify Selection
					Log.Message( intCount & "Series selected")
				Else
					Log.Message("Problem in selecting series")
					oTemp.Close
					Exit Sub    
				End If 
				'Click OK
				oTemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1")._
				WinFormsObject("SearchSeriestoDownload").WinFormsObject("UiButton_OK").Click
				
				'Click Add Series button and start the Stop Watch
				If sExStart = "ADDSERIES" Then
					oTemp.WinFormsObject("UiTabSearchDownload").WinFormsObject("UiTabPage1")._
					WinFormsObject("SearchSeriestoDownload").WinFormsObject("UiButton_Cancel").Click
					If blnTimeRecorded = False Then
            Watch.Start
          End IF				

				End If
			End If
		End If
	End If 			
	'Verify Series Addition in grid and stop the Stop Watch
	If sExStop = "ADDCONF" Then
		Set oTemp1 = Sys.Process("ISI.CeicDataManager.Startup").Find("Name","WinFormsObject(""GridEX_Series"")",6,True)
		If oTemp1.Exists = True Then
			If oTemp1.Visible = True Then
				If oTemp1.RecordCount = intRecCount+selCount Then
					Watch.Stop
          blnTimeRecorded = True
				End If
			End If
		Else
			strTestCaseResult = "FAIL"
			Log.Message("Series Addition Failed")            
			oTemp.Close  
			Exit Sub
		End If
	End If 		
	
	If Err.Number <> 0 Then
		Log.Warning("Error in sInsertSeries_Myseries() - " & Err.Description)
		Err.Clear
	End If    
	
End Sub

Sub sRefreshWordPpt(sOption)
	'This procedure performs CDM refresh on MS Word and Power Point files 
	
	'Author: Raghunandan
	'Start Date: 18-10-2013
  
  If blnEDGESystem = True Then
    If sOption = "REFRESHOBJECT" Then
      Call Sys.Keys("~y1")
      Call Sys.Keys("y2")    
    ElseIf sOption = "REFRESHALL" Then
      Call Sys.Keys("~y1")
      Call Sys.Keys("y3")    
    End IF
  Else
   If sOption = "REFRESHOBJECT" Then
      Call Sys.Keys("~y")
      Call Sys.Keys("y1")    
    ElseIf sOption = "REFRESHALL" Then
      Call Sys.Keys("~y")
      Call Sys.Keys("y2")    
    End IF  
  End IF
  
  If Err.Number <> 0 Then
		Log.Warning("Error in sRefreshWordPpt(sOption) - " & Err.Description)
		Err.Clear
	End If 	
End Sub

Function fCheckEmpty(objTest)
  fCheckEmpty=IsEmpty(objTest) or IsNull(objTest) or (objTest Is Nothing)  
End Function

Sub DelayWait(strParameters)

On Error Resume Next

  Dim time1
'  'Skipping if Execution is in Production mode
'  If Ucase(Trim(strRequiredTCName))=Ucase(Trim("TC_RELEASESCHEDULE_04")) and Ucase(Trim(strEnvi)) = Ucase(Trim("Edge ( US Production )"  )) Then
'      Exit Sub
'  End If 
'   
  time1=getSplitValue(strParameters,"Interval")
  if time1 = "" then 
    time1 =300
  End If

  Delay time1*1000,"Pls wait for "&time1&" seconds"
End Sub


